#+TITLE: Git mode
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

To ignore file chmod changes
#+BEGIN_SRC shell :tangle no
  git config core.fileMode false
 #+END_SRC

* Dependencies
#+BEGIN_SRC emacs-lisp
  (my/add-dependency "git")
 #+END_SRC
* PACKAGE Magit =C-x g=
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init (my/add-to-package-list 'magit))

  (global-set-key (kbd "C-x g") (function magit))
 #+END_SRC
* PACKAGE Git Gutter    =M-g M-g=
This allows to preview changes in files, see difference and restore hunks
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :init (my/add-to-package-list 'git-gutter)
    (global-git-gutter-mode +1))
 #+END_SRC
** Hydra
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                                        :hint nil)
    "
    Git gutter:
      _j_: next hunk        _s_tage hunk     _q_uit
      _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
      ^ ^                   _p_opup hunk
      _h_: first hunk
      _l_: last hunk        set start _R_evision
    "
    ("j" git-gutter:next-hunk)
    ("k" git-gutter:previous-hunk)
    ("h" (progn (goto-char (point-min))
                (git-gutter:next-hunk 1)))
    ("l" (progn (goto-char (point-min))
                (git-gutter:previous-hunk 1)))
    ("s" git-gutter:stage-hunk)
    ("r" git-gutter:revert-hunk)
    ("p" git-gutter:popup-hunk)
    ("R" git-gutter:set-start-revision)
    ("q" nil :color blue)
    ("Q" (progn (git-gutter-mode -1)
                                          ; git-gutter-fringe doesn't seem to
                                          ; clear the markup right away
                (sit-for 0.1)
                (with-no-warnings
                  (git-gutter:clear)
                  ))
     :color blue))

  (global-set-key (kbd "M-g M-g") (function hydra-git-gutter/body))
 #+END_SRC
* PACKAGE Time machine
Allow quickly to browser through the file version. Launch with =M-x git-time-machine=
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t)
 #+END_SRC
* smerge
Used to resolve git conflicts
#+BEGIN_SRC emacs-lisp
  (require 'magit)
  (define-key smerge-mode-map (kbd "C-c C-n") (function smerge-next))
  (define-key smerge-mode-map (kbd "C-c C-p") (function smerge-prev))
  (define-key smerge-mode-map (kbd "C-c C-c") (function smerge-keep-current))
  (define-key smerge-mode-map (kbd "u") (function smerge-keep-upper))
  (define-key smerge-mode-map (kbd "l") (function smerge-keep-lower))
 #+END_SRC
