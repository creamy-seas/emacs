#+TITLE: LaTeX Config
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

* Dependencies
#+BEGIN_SRC emacs-lisp
                                          ; for refferencing
  (my/add-dependency "biber")
                                          ; for compilation
  (my/add-dependency "latexmk")
                                          ; for instant preview
  (my/add-dependency "pdf2dsc")
 #+END_SRC

| =kbordermatrix.sty=                                            | https://www.ctan.org/pkg/kbordermatrix |
1. Copy over the =.sty= files to your latex directory
For mac
#+BEGIN_SRC shell :tangle no
  sudo cp $STYFILE /usr/local/texlive/2018/texmf-dist/tex/latex/base
 #+END_SRC
For linux
#+BEGIN_SRC shell :tangle no
  sudo cp $STYFILE /usr/share/texmf-dist/tex/latex/base
 #+END_SRC

2. [@2] Run =sudo -s texhash= to load them up

* Warning about auctex
It is important not to launch certain =.el= files manually:
- =tex.el=
- =latex.el=
There should only be loaded by the auctex hooks, otherwise features such as:
- linting
- funcions
will not properly load

*Therefore, when adding new features of functionality make sure that you either use*:
- =(with-eval-after-load "tex" <BODY>)=
- =(add-hook 'LaTeX-mode-hook (function <FUNCTION>))=

* General Parameters
#+BEGIN_SRC emacs-lisp
  (defvar max-latex-fill-width 120)
 #+END_SRC
* PACKAGE Auctex
The default =TeX mode= package of emacs has modes which are redefined by auctex
|----------------+-------------|
| *Auctex*       | *Tex*       |
|----------------+-------------|
| plain-TeX-mode | plain-tex-m |
| ams-TeX-mode   |             |
| ConTeXt-mode   | slitex-mode |
| Texinfo-mode   |             |
| docTeX-mode    | doctex-mode |
|----------------+-------------|
| Tex-mode       | tex-mode    |
| LaTeX-mode     | latex-mode  |
|----------------+-------------|

** Test if installed
Although there is a package called =auctex= there is no =auctex.el= file.

*Therefore we first need to test if auctex has been installed by calling one if it's =.el= files*

#+BEGIN_SRC emacs-lisp
  (fset 'my-auctex-install
     (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([134217848 108 105 115 116 45 112 97 99 107 97 103 101 115 return 19 97 117 99 116 101 120 return 105 120 121 113] 0 "%d")) arg)))

  (condition-case nil
      (require 'tex-site)
    (error
     (message ">>>>>>>>>> Installing auctex manually by running list-packages - Avoid closing emacs<<<<<<<<<<")
     (my-auctex-install)))
 #+END_SRC
** Basic setup
#+BEGIN_SRC emacs-lisp
  (setq TeX-auto-save t)
                                          ; access imported packages
  (setq TeX-parse-self t)
                                          ; don't prompt file save
  (setq TeX-save-query nil)
                                          ; display compilation in a parrallel window
  (setq-default TeX-show-compilation t)

  (setq TeX-interactive-mode t)
                                          ; spell checking
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
                                          ; folding
  (add-hook 'LaTeX-mode-hook
            (lambda () (TeX-fold-mode 1)))
                                          ; ensure that anything inside $ $ is treated as math mode
  (add-hook 'LaTeX-mode-hook
            (lambda () (set (make-variable-buffer-local 'TeX-electric-math)
                       (cons "$" "$"))))
                                          ; font highlighting
  (add-hook 'LaTeX-mode-hook 'font-lock-mode)
 #+END_SRC**
* PACKAGE Cdlatex
Autocompletion and environments
#+BEGIN_SRC emacs-lisp
  (use-package cdlatex
    :ensure t
    :init (my/add-to-package-list 'cdlatex)
    :config
    (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex))
 #+END_SRC
** Math symbols
#+BEGIN_SRC emacs-lisp
  (setq cdlatex-math-symbol-alist
        `(
          (?F ("\\Phi"))))
 #+END_SRC
** Quick application of styles using =`=
#+BEGIN_SRC emacs-lisp
  (setq cdlatex-math-modify-alist
        '(
          (82 "\\red" "\\red" t nil nil)))
 #+END_SRC
** Quick env templates
#+BEGIN_SRC emacs-lisp
  (setq cdlatex-env-alist
        '(("cases" "\\begin{cases}\nAUTOLABEL\n?\n\\end{cases}" nil)
          ("big-left-right" "\\big(?\\big)" nil)
          ("left-right-bar" "\\left|?\\right|" nil)
          ("bigg-left-right" "\\bigg(?\\bigg)" nil)
          ("left-right-brace" "\\left\\lbrace?\\right\\rbrace" nil)
          ("theorem" "\\begin{theorem}\nLABEL\n?\n\\end{theorem}\n" nil)))

  ;; last 2 t/nil is whether to activate in text and math modes
  (setq cdlatex-command-alist
        '(("blr(" "Insert big left-right brackets"   "" cdlatex-environment ("big-left-right") t t)
          ("bblr(" "Insert bigg-left-right brackets"   "" cdlatex-environment ("bigg-left-right") t t)
          ("lr{" "Inserts brace" "" cdlatex-environment ("left-right-brace") t t)
          ("lr|" "Inserts left and right bars 卍" "" cdlatex-environment ("left-right-bar") t t)
          ("cases" "Insert case environment"   "" cdlatex-environment ("cases") t t)
          ("thr" "Insert theorem env" "" cdlatex-environment ("theorem") t nil)))
 #+END_SRC
* PACKAGE Fill-column-indicator
This is to show what the current fill column is
#+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
    :ensure t
    :config
    (add-hook 'LaTeX-mode-hook 'fci-mode)
                                          ; colour for the fill colum
    (setq fci-rule-color "#248")
                                          ; width of the indicator
    (setq fci-rule-width 1))
 #+END_SRC

* PACKAGE Reftex
Referencing and bibliography
#+BEGIN_SRC emacs-lisp
  (use-package reftex
    :ensure t
    :init
    (my/add-to-package-list 'reftex)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-AUCTeX t))
 #+END_SRC
* Colouring
#+BEGIN_SRC emacs-lisp
  ;; (custom-set-faces
  ;;  '(font-latex-bold-face ((t (:inherit bold))))
  ;;  '(font-latex-italic-face ((t (:inherit italic))))
  ;;  '(font-latex-math-face ((t (:foreground "#99c616"))))
  ;;  '(font-latex-sedate-face ((t (:foreground "burlywood")))))
 #+END_SRC
* Function Compilation
*Some important AucTex commands and variables*
| =TeX-expand-list-builtin= | pair list tying command with a % expression e.g. =%s= -> evalutes the master latex file |
| =TeX-expand-list=         | this variables contains the above =TeX-expand-list-builtin                              |
| =Tex-command-expand=      | =(Tex-command-expand "commandInStringForm" 'TeX-master-file TeX-expand-list)=           |
** supporing functions
#+BEGIN_SRC emacs-lisp
  (defvar my/latex/active-compilations 0 "Number of running latex compilation processes")

  (defun my/latex/evaluate-subsitutions (command-script)
    "Subsititutes the %s variables in accordance with project's master file"
    (interactive)
    (TeX-command-expand command-script 'TeX-master-file TeX-expand-list))

  (defun my/latex/prepare-for-compilation (process-type)
    "Return a list (process-id, )"
    (let ((master-file (my/latex/get-master-file-name)))

      (list
       (concat process-type ":" master-file)
       )))

  (defun my/latex/get-master-file-name ()
    "Get the name of the master latex file in the current project"
    (interactive)
    (TeX-command-expand "%s" 'TeX-master-file TeX-expand-list))

  (defun my/latex/modeline-colour ()
    "Reads the env variale my/latex/active-compilations and colours the modeline according to how many compilations are running"
    (if (> my/latex/active-compilations 0)
        (progn
          ;; (setq global-mode-string (concat "[" (number-to-string my/latex/active-compilations) "]"))
          (message (format " Still running %s compilations" my/latex/active-compilations)))
      (progn
        (setq global-mode-string "")
        (message " No more running compilations"))))
 #+END_SRC
** =my/latex/compile=           =C-c C-c=


#+BEGIN_SRC emacs-lisp
  (defun my/latex/compile ()
    "Generate pdf with latexmk
  1) a process name is generated based off the name of the master file
  2) the actual command calls the =pdf_engine= script
  3) expansion if performed to change =%s= to the master file name"
    (interactive)
    (minibuffer-message (concat " Generating \"" (TeX-master-file) "\""))
    (let* (
                                          ; evaluate information for compilation
           (compilation-info (my/latex/prepare-for-compilation "Compile-PDF"))
                                          ; 1st arugment is unique process name
           (compilation-process-id (car compilation-info))
           (compilation-script
            (my/latex/evaluate-subsitutions (my/config-file-path-evaluate "my-scripts/latex/pdf_engine.sh %s"))))

      (ignore-errors
        ;; 1 - run compilation script
        (TeX-run-TeX compilation-process-id compilation-script (TeX-master-file))
        ;; 2 - increment number of running compilations
        (setq my/latex/active-compilations (+ my/latex/active-compilations 1)))

      ;; 3 - update modeline
      (my/latex/modeline-colour)))
 #+END_SRC
** =my/latex/exterminate=       =C-c C-j=
#+BEGIN_SRC emacs-lisp
  (defun my/latex/exterminate()
    "Kill the compile process for this project
  1) kill any running processes on this master files
  2) delete the buffer that was running that process
  3) move files into output directory
  4) close this buffer as well"

    (interactive)
    (minibuffer-message (concat " Exterminating \"" (my/latex/get-master-file-name) "\""))

    (let* (
                                          ; evaluate information for running compilation
           (compilation-info (my/latex/prepare-for-compilation "Compile-PDF"))
                                          ; 1st arugment is unique process name
           (compilation-process-id (car compilation-info))
           (cleanup-script
            (my/latex/evaluate-subsitutions (my/config-file-path-evaluate "my-scripts/latex/jew_engine.sh %s"))))

      (ignore-errors
        (let* ((process-to-kill (get-process compilation-process-id))
               (process-buffer (process-buffer process-to-kill))
               )
          ;; 1 - delete compilation process
                                          ; no queries
          (set-process-query-on-exit-flag process-to-kill nil)
                                          ; delete process
          (delete-process process-to-kill)
                                          ; delete buffer
          (kill-buffer process-buffer))

        ;; 2 - run cleanup script
        (async-shell-command cleanup-script)

        ;; 3 - cleanup buffers
        (kill-buffer "*TeX Help*"))

      ;; 4 - switch to the termination window
      (other-window 1)
      (sleep-for 1)
      (kill-buffer-and-window)

      ;; 5 - change number of running processes and recolour bar if required
      (setq my/latex/active-compilations (max (- my/latex/active-compilations 1) 0))
      (my/latex/modeline-colour)

      ;; 6 - close this buffer window
      (minibuffer-message "卍 Extermination complete")))
#+END_SRC
** TODO error checking =C-c C-w=
natively, auctex creates a list of errors once the compiling finishes.
here we make it do it explictly

#+BEGIN_SRC emacs-lisp
  ;; (defun ilya_latex-next-error (args)
  ;;   "Reads the compilation buffer and extracts errors to run through"
  ;;   (interactive "p")

  ;;   ;; 1 - search for active buffer (assign it to tempvar)
  ;;   (if-let ((tempvar (TeX-active-buffer)))

  ;;       ;; 2 - if open, go to that buffer and get all the errors
  ;;       (save-excursion
  ;;         (set-buffer (TeX-active-buffer))
  ;;         (TeX-parse-all-errors)

  ;;         ;; 3 - display error list
  ;;         (if TeX-error-list
  ;;             (minibuffer-message "ᛋᛋ Jew hunt finished ᛋᛋ"))

  ;;         ;; 4 - iterate through error list
  ;;         (call-interactively (function TeX-next-error))
  ;;         ;; clear region
  ;;         (delete-region (point-min) (point-max))
  ;;         (minibuffer-message "ᛋᛋ Make this totally aryan, free from scheckel mounds ᛋᛋ"))

  ;;     (minibuffer-message "ᛋᛋ But mein Führer - there's no-one running ᛋᛋ")))

  ;; (add-hook 'LaTeX-mode-hook (lambda ()
  ;;                              (local-unset-key (kbd "C-c C-w"))
  ;;                              (local-set-key (kbd "C-c C-w") (function ilya_latex-next-error))))

  ;; (defmacro my-save-excursion (&rest forms)
  ;;   (let ((old-point (gensym "old-point"))
  ;;         (old-buff (gensym "old-buff")))
  ;;     `(let ((,old-point (point))
  ;;            (,old-buff (current-buffer)))
  ;;        (prog1
  ;;            (progn ,@forms)
  ;;          (unless (eq (current-buffer) ,old-buff)
  ;;            (switch-to-buffer ,old-buff))
  ;;          (goto-char ,old-point)))))
 #+END_SRC
* Functions General
** =my/latex/buffer-fill-column=
#+BEGIN_SRC emacs-lisp
  (defun my/latex/buffer-fill-column ()
    "Evaluate the width that the fill column should be set to and set it"
    (interactive)

    (let ((initial-fill-width (- (window-width) 10))
          (max-fill-width max-latex-fill-width))

      ;; 1- set the width to 94 max
      (if (> max-fill-width initial-fill-width)
          (set-fill-column initial-fill-width)
        (set-fill-column max-fill-width))))
 #+END_SRC
** =my/latex/save-buffer=       =C-x C-s=
#+BEGIN_SRC emacs-lisp
  (defun my/latex/save-buffer ()
    "Save the current buffer and performs indent"
    (interactive)

    ;; 1 - update fill column
    (my/latex/buffer-fill-column)

    (my/latex/indent-buffer)
    ;; 2 - save file
    (save-buffer))
 #+END_SRC
** =my/latex/indent-buffer=
#+BEGIN_SRC emacs-lisp
  (defun my/latex/indent-buffer ()
    "Indents the full buffer"
    (interactive)
    (let ((fill-width (my/latex/buffer-fill-column)))
      (ignore-errors (LaTeX-fill-buffer fill-width))))
 #+END_SRC
** =my/latex/reftex-reference=
#+BEGIN_SRC emacs-lisp
  ;; (defun my/latex/reftex-reference (&optional type no-insert cut)
  ;;   "Make a LaTeX reference.  Look only for labels of a certain TYPE.
  ;; With prefix arg, force to rescan buffer for labels.  This should only be
  ;; necessary if you have recently entered labels yourself without using
  ;; reftex-label.  Rescanning of the buffer can also be requested from the
  ;; label selection menu.
  ;; The function returns the selected label or nil.
  ;; If NO-INSERT is non-nil, do not insert \\ref command, just return label.
  ;; When called with 2 C-u prefix args, disable magic word recognition."

  ;;   (interactive)

  ;;   ;; Check for active recursive edits
  ;;   (reftex-check-recursive-edit)

  ;;   ;; Ensure access to scanning info and rescan buffer if prefix is '(4)
  ;;   (reftex-access-scan-info current-prefix-arg)

  ;;   (let ((reftex-refstyle (when (and (boundp 'reftex-refstyle) reftex-refstyle)
  ;;                            reftex-refstyle))
  ;;         (reftex-format-ref-function reftex-format-ref-function)
  ;;         (form "\\ref{%s}")
  ;;         label labels sep sep1 style-alist)

  ;;     (unless reftex-refstyle
  ;;       (if reftex-ref-macro-prompt
  ;;           (progn
  ;;             ;; Build a temporary list which handles more easily.
  ;;             (dolist (elt reftex-ref-style-alist)
  ;;               (when (member (car elt) (reftex-ref-style-list))
  ;;                 (mapc (lambda (x)
  ;;                         (add-to-list 'style-alist (cons (cadr x) (car x)) t))
  ;;                       (nth 2 elt))))
  ;;             ;; Prompt the user for the macro.
  ;;             (let ((key (reftex-select-with-char
  ;;                         "" (concat "SELECT A REFERENCE FORMAT\n\n"
  ;;                                    (mapconcat
  ;;                                     (lambda (x)
  ;;                                       (format "[%c] %s  %s" (car x)
  ;;                                               (if (> (car x) 31) " " "")
  ;;                                               (cdr x)))
  ;;                                     style-alist "\n")))))
  ;;               (setq reftex-refstyle (cdr (assoc key style-alist)))
  ;;               (unless reftex-refstyle
  ;;                 (error "No reference macro associated with key `%c'" key))))
  ;;         ;; Get the first macro from `reftex-ref-style-alist' which
  ;;         ;; matches the first entry in the list of active styles.
  ;;         (setq reftex-refstyle
  ;;               (or (caar (nth 2 (assoc (car (reftex-ref-style-list))
  ;;                                       reftex-ref-style-alist)))
  ;;                   ;; Use the first entry in r-r-s-a as a last resort.
  ;;                   (caar (nth 2 (car reftex-ref-style-alist)))))))

  ;;     (unless type
  ;;       ;; Guess type from context
  ;;       (if (and reftex-guess-label-type
  ;;                (setq type (reftex-guess-label-type)))
  ;;           (setq cut (cdr type)
  ;;                 type (car type))
  ;;         (setq type (reftex-query-label-type))))

  ;;     ;; Have the user select a label
  ;;     (set-marker reftex-select-return-marker (point))
  ;;     (setq labels (save-excursion
  ;;                    (reftex-offer-label-menu type)))
  ;;     (reftex-ensure-compiled-variables)
  ;;     (set-marker reftex-select-return-marker nil)
  ;;     ;; If the first entry is the symbol 'concat, concat all labels.
  ;;     ;; We keep the cdr of the first label for typekey etc information.
  ;;     (if (eq (car labels) 'concat)
  ;;         (setq labels (list (list (mapconcat 'car (cdr labels) ",")
  ;;                                  (cdr (nth 1 labels))))))
  ;;     (setq type (nth 1 (car labels))
  ;;           form (or (cdr (assoc type reftex-typekey-to-format-alist))
  ;;                    form))

  ;;     (cond
  ;;      (no-insert
  ;;       ;; Just return the first label
  ;;       (car (car labels)))
  ;;      ((null labels)
  ;;       (message "Quit")
  ;;       nil)
  ;;      (t
  ;;       (while labels
  ;;         (setq label (car (car labels))
  ;;               sep (nth 2 (car labels))
  ;;               sep1 (cdr (assoc sep reftex-multiref-punctuation))
  ;;               labels (cdr labels))
  ;;         (when cut
  ;;           (backward-delete-char cut)
  ;;           (setq cut nil))

  ;;         ;; remove ~ if we do already have a space
  ;;         (when (and (= ?~ (string-to-char form))
  ;;                    (member (preceding-char) '(?\ ?\t ?\n ?~)))
  ;;           (setq form (substring form 1)))
  ;;         ;; do we have a special format?
  ;;         (unless (string= reftex-refstyle "\\ref")
  ;;           (setq reftex-format-ref-function 'reftex-format-special))
  ;;         ;; ok, insert the reference
  ;;         (if sep1 (insert sep1))
  ;;         (let ((temp-refference
  ;;                (if reftex-format-ref-function
  ;;                    (funcall reftex-format-ref-function label form reftex-refstyle)
  ;;                  (format form label label))))
  ;;           (setq temp-refference (my/extract-string "\\(ref{\\)\\(.*\\)\\(}\\)" 2 temp-refference)))

  ;;         ;; take out the initial ~ for good
  ;;         (and (= ?~ (string-to-char form))
  ;;              (setq form (substring form 1))))
  ;;       (message "")
  ;;       label))))
 #+END_SRC
* Regexp colouring
*Suppose we want to highlight certain constructs in a document*
The first thing that would happen, is latex searches for matching expressions - we need to create a rule for it to do so by running =(regexp-opt '("string1" "string2" etc) OPTION)

It would be a mumble jumble like with a lot of escapes
="\\(«\\(.+?\\|\n\\)\\)\\(+?\\)\\(»\\)"=
|-----------+------------------------------------------|
| .         | matches any character                    |
| ^ or $    | start or end of line                     |
| ?         | repeat the previos match 0 or 1 time     |
| +         | repeat the previous match 1 or more time |
| *         | repeat previous match 0 or more times    |
| [^x]      | any symbol appart from x                 |
| [:ascii:] | match ascii characters                   |
|-----------+------------------------------------------|

** DOWN Blocks
#+BEGIN_SRC emacs-lisp
  ;; (defface my/face/latex-red
  ;;   '((t :background "#964854"
  ;;        :weight bold
  ;;        ))
  ;;   "Face for red blocks")

  ;; (defface my/face/latex-gold
  ;;   '((t :background "gold1"
  ;;        :weight bold
  ;;        ))
  ;;   "")

  ;; (defface my/face/latex-blue
  ;;   '((t :background "#464896"
  ;;        :weight bold
  ;;        ))
  ;;   "Face for blue blocks")

  ;; (font-lock-add-keywords 'latex-mode
  ;;                         '(("\\(\\\\red\{\\)\\(\\(.\\|\\Ca\\)*?\\)\\(\}\\\\ec\\)"
  ;;                            (1 'ilya_face-latex-red t)
  ;;                            (4 'ilya_face-latex-red t))))

  ;; (font-lock-add-keywords 'latex-mode
  ;;                         '(("\\(\\\\blue\{\\)\\(\\(.\\|\\Ca\\)*?\\)\\(\}\\\\ec\\)"
  ;;                            (1 'ilya_face-latex-blue t)
  ;;                            (4 'ilya_face-latex-blue t))))

  ;; (font-lock-add-keywords 'latex-mode
  ;;                         '(("\\(\\\\gold\{\\)\\(\\(.\\|\\Ca\\)*?\\)\\(\}\\\\ec\\)"
  ;;                            (1 'ilya_face-latex-gold t)
  ;;                            (4 'ilya_face-latex-gold t))))
 #+END_SRC

** Comments
#+BEGIN_SRC emacs-lisp
  (defface my/face/latex-background
    '((t :background "#2d3743"
         :foreground "#3a3a6e"
         :weight bold
         ))
    "Face for red blocks"
    :group 'my-latex)

  (defface my/face/latex-title
    '((t :foreground "firebrick1"
         :slant italic
         :overline t
         ))
    "Face for comments"
    :group 'my-latex)

  (font-lock-add-keywords 'latex-mode
                          '(("\\(%\\{2,\\}\\)\\(\s.*\\)\\($\\)"
                             (1 'my/face/latex-title t)
                             (2 'my/face/latex-title t))))
 #+END_SRC
* View program    =C-c C-v=
*Skim on os-x*
- skim is run, reading the current line in the emacs buffer and highlighting it in the pdf
- =syntex.gz= file needs to be in the directory for this to occur, so it's copied
|-------------------+------------------------------------------------------|
| *Unique to skim*  |                                                      |
| =-b=              | inserts a reading bar into the pdf                   |
| =-g=              | tells it to load in background                       |
|-------------------+------------------------------------------------------|
| *Unique to emacs* | commands in TeX-expand-list-builtin in =tex.el= file |
| =%s=              | master latex file                                    |
| =%n=              | is the line number we are on                         |
| =%o=              | is the output file name                              |
| =%b=              | is the tex file name                                 |
|-------------------+------------------------------------------------------|

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "tex"
    (setq TeX-view-program-list TeX-view-program-list-builtin)

    (if (string-equal system-type "darwin")
        (progn
          (let ((skim-view-script (my/config-file-path-evaluate "my-scripts/latex/skim_view.sh %s %n %o %b")))
            (add-to-list 'TeX-view-program-list
                                          ; over here I escape (`) the bracketed region. Anything I want to evaluate I prepend with a comma
                         `("SkimViewer" ,skim-view-script))
            (setq TeX-view-program-selection '((output-pdf "SkimViewer")))))
      (progn
        (setq TeX-view-program-selection '((output-pdf "Zathura")))
        (my/add-dependency "zathura"))))
 #+END_SRC
* Key Bindings
** Table of useful bindings
I will most be using CDLaTeX to type in a command and then autocomplete it
Yasnippet to add stuff once I am there (like and an extra item) and create own tab commands
|-----------------+------------------------------------------+----------------------------------|
| =C-c C-p <kbd>= | Preview directly in the latex buffer     |                                  |
| TABBING         | -----------------                        | ------------------               |
| =cdlatex=       | tabbing out common commands              | =cdlatex= help with =C-c ?=      |
| =yasnippet=     | tabbing out common and personal commands | =yasnippet= =yasnippet-snippets= |
| CREATE AND FILL | ------------------                       | -------------------              |
| =C-c C-f=       | change the font                          | =auctex=                         |
| =C-c C-e=       | create figure environemnt                | =auctex=                         |
| =C-c C-s=       | create section environment               | =auctex=                         |
| =`=             | math mode help                           | =LaTeX-math-mode=                |
| REFFERENCING    | ------------------                       | -------------------              |
| =C-c (= =C-c )= | create/use refference                    | =reftex=                         |
| =C-c [=         | refferences a citation                   | =reftex=                         |
| =C-c ==         | create content list to navigate          | =reftex=                         |
| AESTHETICS      | ------------                             | --------------                   |
| =C-c C-o=       | autohide sections                        | =TeX-fold-mode=                  |
| =C-c C-q C-e=   | indent environment or region             |                                  |
| COMMENTING      | ------------                             | --------------                   |
| =C-c '=         | comment paragraph                        |                                  |
| =C-c ;=         | comment region                           |                                  |
| COMPILING       | ------------                             | --------------                   |
| =C-c C-c=       | run next latex generations tep           |                                  |
| =C-c `=         | look through errors                      |                                  |
| =C-c C-v=       | Look at pdf                              |                                  |
|-----------------+------------------------------------------+----------------------------------|
** Custom bindings
#+BEGIN_SRC emacs-lisp
  ;;(ad d-hook 'LaTeX-mode-hook (lambda ()
  ;;                              (local-unset-key (kbd "C-c C-a"))
  ;;                              (local-unset-key (kbd "C-c C-b"))
  ;;                              (local-unset-key (kbd "C-c C-d"))
  ;;                              (local-unset-key (kbd "C-c C-k"))
  ;;                              (local-unset-key (kbd "C-c C-r"))
  ;;                              (local-unset-key (kbd "C-c C-z"))
  ;;                              (local-unset-key (kbd "C-c ESC"))
  ;;                              (local-unset-key (kbd "C-c C-t"))
  ;;                              (local-unset-key (kbd "C-c <")) ;;index and glossary
  ;;                              (local-unset-key (kbd "C-c /")) ;;index
  ;;                              (local-unset-key (kbd "C-c \\")) ;;index
  ;;                              (local-unset-key (kbd "C-c >")) ;;index
  ;;                              (local-unset-key (kbd "C-c _")) ;;set master file
  ;;                              (local-unset-key (kbd "C-c C-n")) ;;normal mode (use C-c #)
  ;;                              (local-unset-key (kbd "C-c ~")) ;;math mode
  ;;                              (local-unset-key (kbd "C-c }")) ;;up list
  ;;                              (local-unset-key (kbd "C-c `")) ;TeX-next-error
  ;;                              (local-unset-key (kbd "C-c ^")) ;TeX-home-buffer
  ;;                              (local-unset-key (kbd "C-x `")) ;next-error
  ;;                              ))

  (with-eval-after-load "latex"
    (define-key LaTeX-mode-map (kbd "C-x C-s") (function my/latex/save-buffer))
    (define-key LaTeX-mode-map (kbd "C-c C-j") (function my/latex/exterminate))
    (define-key LaTeX-mode-map (kbd "C-c C-c") (function  my/latex/compile)))
  ;; ;; (add-hook 'LaTeX-mode-hook (lambda ()
  ;; ;;
  ;; (define-key LaTeX-mode-map (kbd "C-c C-n") (function next-error))
  ;;                              (define-key LaTeX-mode-map (kbd "C-c C-;") (function comment-line))
  ;;                              (define-key LaTeX-mode-map (kbd "C-c C-u") (lambda () (insert "_")))
  ;;                              (define-key LaTeX-mode-map (kbd "C-c C-q") (function my/latex/indent-buffer))
  ;;                              (define-key LaTeX-mode-map (kbd "C-c C-h") (function TeX-home-buffer))
  ;;                              (define-key LaTeX-mode-map (kbd "C-x C-s") (function my/latex/save-buffer))))
 #+END_SRC
