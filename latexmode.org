#+TITLE: LaTeX Config
#+STARTUP: overview

- [ ] Read https://www.gnu.org/software/auctex/manual/auctex/Folding.html

Set parameters in =.latexmkrc=

|-----------------+------------------------------------------+----------------------------------|
| =C-c C-p <kbd>= | Preview directly in the latex buffer     |                                  |
| TABBING         | -----------------                        | ------------------               |
| =cdlatex=       | tabbing out common commands              | =cdlatex= help with =C-c ?=      |
| =yasnippet=     | tabbing out common and personal commands | =yasnippet= =yasnippet-snippets= |
| CREATE AND FILL | ------------------                       | -------------------              |
| =C-c C-f=       | change the font                          | =auctex=                         |
| =C-c C-e=       | create figure environemnt                | =auctex=                         |
| =C-c C-s=       | create section environment               | =auctex=                         |
| =`=             | math mode help                           | =LaTeX-math-mode=                |
| REFFERENCING    | ------------------                       | -------------------              |
| =C-c (= =C-c )= | create/use refference                    | =reftex=                         |
| =C-c [=         | refferences a citation                   | =reftex=                         |
| =C-c ==         | create content list to navigate          | =reftex=                         |
| AESTHETICS      | ------------                             | --------------                   |
| =C-c C-o=       | autohide sections                        | =TeX-fold-mode=                  |
| =C-c C-q C-e=   | indent environment or region             |                                  |
| COMMENTING      | ------------                             | --------------                   |
| =C-c '=         | comment paragraph                        |                                  |
| =C-c ;=         | comment region                           |                                  |
| COMPILING       | ------------                             | --------------                   |
| =C-c C-c=       | run next latex generations tep           |                                  |
| =C-c `=         | look through errors                      |                                  |
| =C-c C-v=       | Look at pdf                              | See [[*View program =C-c C-v=][View program]]                 |
|-----------------+------------------------------------------+----------------------------------|

Dependencies
| =latexmk=           | perform the compilation                    |
| =biber=             | referencing                                |
| =pdf2dsv=           | generation of preview in the .tex document |
| =kbordermatrix.sty= | https://www.ctan.org/pkg/kbordermatrix     |

Instuctions for =.sty= files
1. Copy over the =.sty= files to your latex directory
For mac
#+BEGIN_SRC shell :tangle no
  sudo cp $STYFILE /usr/local/texlive/2018/texmf-dist/tex/latex/base
 #+END_SRC
For linux
#+BEGIN_SRC shell :tangle no
  sudo cp $STYFILE /usr/share/texmf-dist/tex/latex/base
 #+END_SRC

2. [@2] Run =sudo -s texhash= to load them up

Setup with skim
1. Need to run =(server-start)= for an emacsclient server to start
2. Make sure that =emacsclient= is linked to the binary from the running emacs installation
3. In Skim, go to preferences and select Emacs


* General setup
#+begin_src emacs-lisp
(after! tex
  (setq-default TeX-show-compilation t)
  ;; (add-hook 'find-file-hook 'TeX-fold-buffer t)
  (add-hook 'TeX-mode-hook 'prettify-symbols-mode))
;; Opening a LaTeX file will format titles, equations, textbg etc

#+end_src

* Cdlatex
** Math mode
#+begin_src emacs-lisp
(setq cdlatex-use-dollar-to-ensure-math t)
#+end_src
** Math symbols
#+BEGIN_SRC emacs-lisp
(setq cdlatex-math-symbol-alist
      `(
        (?F ("\\Phi"))
        (?K ("\\Ket{?}"))
        (?B ("\\Bra{?}"))
        ))
 #+END_SRC
** Formatting
#+BEGIN_SRC emacs-lisp
(setq cdlatex-math-modify-alist
      '(
        (82 "\\red" "\\red" t nil nil)))
 #+END_SRC
** Brackets
#+BEGIN_SRC emacs-lisp
  (setq cdlatex-env-alist
        '(("cases" "\\begin{cases}\nAUTOLABEL\n?\n\\end{cases}" nil)
          ("big-left-right" "\\big(?\\big)" nil)
          ("left-right-bar" "\\left|?\\right|" nil)
          ("bigg-left-right" "\\bigg(?\\bigg)" nil)
          ("left-right-sq" "\\left[?\\right]" nil)
          ("left-right-brace" "\\left\\lbrace?\\right\\rbrace" nil)
          ("theorem" "\\begin{theorem}\nLABEL\n?\n\\end{theorem}\n" nil)))

  ;; last 2 t/nil is whether to activate in text and math modes
  (setq cdlatex-command-alist
        '(("blr(" "Insert big left-right brackets"   "" cdlatex-environment ("big-left-right") t t)
          ("bblr(" "Insert bigg-left-right brackets"   "" cdlatex-environment ("bigg-left-right") t t)
          ("lr{" "Inserts brace" "" cdlatex-environment ("left-right-brace") t t)
          ("lr|" "Inserts left and right bars 卍" "" cdlatex-environment ("left-right-bar") t t)
          ("cases" "Insert case environment"   "" cdlatex-environment ("cases") t t)
          ("thr" "Insert theorem env" "" cdlatex-environment ("theorem") t nil)))
 #+END_SRC
* Reftex
#+begin_src emacs-lisp
(defun my/latex/autoref ()
  "Insert \autoref using reftex lookup - see the yasnippet that calls this"
  (interactive)
  (progn
    "Set the style to skip the prompt"
    (setq reftex-refstyle "\autoref"))
  "Need to insert this way to overcome the \ escaping"
  (reftex-reference nil t))

(defun my/latex/eqref ()
  "Lookup formula"
  (interactive)
  (progn
    "Set the style to skip the prompt"
    (setq reftex-refstyle "\autoref"))
  "Need to insert this way to overcome the \ escaping"
  (reftex-reference 'e t))
#+end_src

* Regexp colouring
*Suppose we want to highlight certain constructs in a document*
The first thing that would happen, is latex searches for matching expressions - we need to create a rule for it to do so by running =(regexp-opt '("string1" "string2" etc) OPTION)

It would be a mumble jumble like with a lot of escapes
="\\(«\\(.+?\\|\n\\)\\)\\(+?\\)\\(»\\)"=
|-----------+------------------------------------------|
| .         | matches any character                    |
| ^ or $    | start or end of line                     |
| ?         | repeat the previos match 0 or 1 time     |
| +         | repeat the previous match 1 or more time |
| *         | repeat previous match 0 or more times    |
| [^x]      | any symbol appart from x                 |
| [:ascii:] | match ascii characters                   |
|-----------+------------------------------------------|

#+BEGIN_SRC emacs-lisp
  (defface my/face/latex-background
    '((t :background "#2d3743"
         :foreground "#3a3a6e"
         :weight bold
         ))
    "Face for red blocks"
    :group 'my-latex)

  (defface my/face/latex-title
    '((t :foreground "firebrick1"
         :slant italic
         :overline t
         ))
    "Face for comments"
    :group 'my-latex)

  (font-lock-add-keywords 'latex-mode
                          '(("\\(%\\{2,\\}\\)\\(\s.*\\)\\($\\)"
                             (1 'my/face/latex-title t)
                             (2 'my/face/latex-title t))))
 #+END_SRC

* Latex export


#+begin_src emacs-lisp
(after! org
  ;; Use imagemagick for export
  (setq org-preview-latex-default-process 'imagemagick)
  (add-to-list 'org-latex-packages-alist '("" "ketbra" t)))
#+end_src
(setq org-latex-packages-alist '("\\usepackage{ketbra}"))
* DOWN =my/latex/save-buffer=       =C-x C-s=
#+BEGIN_SRC emacs-lisp
(defun my/latex/buffer-fill-column ()
  "Evaluate the width that the fill column should be set to and set it"
  (interactive)

  (let ((initial-fill-width (- (window-width) 10))
        (max-fill-width 80))

    ;; 1- set the width to 94 max
    (if (> max-fill-width initial-fill-width)
        (set-fill-column initial-fill-width)
      (set-fill-column max-fill-width))))

(defun my/latex/indent-buffer ()
  "Indents the full buffer"
  (interactive)
  (let ((fill-width (my/latex/buffer-fill-column)))
    (ignore-errors (LaTeX-fill-buffer fill-width))))

(defun my/latex/save-buffer ()
  "Save the current buffer and performs indent"
  (interactive)

  ;; 1 - update fill column
  (my/latex/buffer-fill-column)

  (my/latex/indent-buffer)
  ;; 2 - save file
  (save-buffer))
 #+END_SRC

* Compilation Functions
Normally =C-c C-a= is best, but for continous update use =C-c C-s=

*Some important AucTex commands and variables*
| =TeX-expand-list-builtin= | pair list tying command with a % expression e.g. =%s= -> evalutes the master latex file |
| =TeX-expand-list=         | this variables contains the above =TeX-expand-list-builtin                              |
| =Tex-command-expand=      | =(Tex-command-expand "commandInStringForm" 'TeX-master-file TeX-expand-list-builtin)=           |

** Supporting Functions
#+BEGIN_SRC emacs-lisp
  (defun my/latex/evaluate-subsitutions (command-script)
    "Subsititutes the %s variables in accordance with project's master file"
    (interactive)
    (TeX-command-expand command-script TeX-expand-list-builtin))

  (defun my/latex/prepare-for-compilation (process-type)
    "Return a list (process-id, )"
    (let ((master-file (my/latex/get-master-file-name)))

      (list
       (concat process-type ":" master-file)
       )))

  (defun my/latex/get-master-file-name ()
    "Get the name of the master latex file in the current project"
    (interactive)
    (TeX-command-expand "%s" TeX-expand-list-builtin))

  (defun my/latex/modeline-colour ()
    "Reads the number of active compilations colour modeline"
    (let ((number-of-running-compilations
           (my/strings/recursive-count "Compile-PDF" (format "%s" (process-list)) 0)))
      (if (> number-of-running-compilations 0)
          (if (eq number-of-running-compilations 1)
              (message (format " Currently running %s compilation" number-of-running-compilations))
            (message (format " Currently running %s compilations" number-of-running-compilations)))
        (message " No running compilations"))))
 #+END_SRC

** =my/latex/compile=           =C-c C-c=
#+BEGIN_SRC emacs-lisp
  (defun my/latex/compile ()
    "Generate pdf with latexmk
  1) a process name is generated based off the name of the master file
  2) the actual command calls the =pdf_engine= script
  3) expansion if performed to change =%s= to the master file name"
    (interactive)
    (minibuffer-message (concat " Generating \"" (TeX-master-file) "\""))
    (let* (
                                          ; evaluate information for compilation
           (compilation-info (my/latex/prepare-for-compilation "Compile-PDF"))
                                          ; 1st arugment is unique process name
           (compilation-process-id (car compilation-info))
           (compilation-script
            (my/latex/evaluate-subsitutions (concat doom-user-dir "my-scripts/latex/pdf_engine.sh %s"))))

      (ignore-errors
        ;; 1 - run compilation script
        (TeX-run-TeX compilation-process-id compilation-script (TeX-master-file)))

      ;; 3 - update modeline
      (my/latex/modeline-colour)))
 #+END_SRC
** =my/latex/exterminate=       =C-c C-j=

#+BEGIN_SRC emacs-lisp
  (defun my/latex/exterminate()
    "Kill the compile process for this project
  1) kill any running processes on this master files
  2) delete the buffer that was running that process
  3) move files into output directory
  4) close this buffer as well"

    (interactive)
    (let* (
           ;; 1 - evaluate information for running compilation
           (compilation-info (my/latex/prepare-for-compilation "Compile-PDF"))
                                          ; 1st argument is unique process name
           (compilation-process-id (car compilation-info))
           (cleanup-script
            (my/latex/evaluate-subsitutions (concat doom-user-dir "my-scripts/latex/jew_engine.sh %s"))))

      ;; 2 - locate if the process is running
      (let ((process-to-kill (get-process compilation-process-id)))
        (if process-to-kill
            ;; 3 - get buffer the process is running in
            (let ((process-buffer (process-buffer process-to-kill)))
              (minibuffer-message (format " Exterminating \"%s\"" (my/latex/get-master-file-name)))
              ;; 4 - delete compliation process
                                          ; no queries
              (set-process-query-on-exit-flag process-to-kill nil)
                                          ; delete process
              (delete-process process-to-kill)
                                          ; delete buffer
              (kill-buffer process-buffer)

              ;; 5 - run cleanup script
              (shell-command cleanup-script)

              ;; 6 - cleanup buffers
              ;; (other-window 1)
              ;; (sleep-for 1)
              ;; (kill-buffer-and-window)
              (my/latex/modeline-colour)

              (minibuffer-message "卍 Extermination complete"))
          (minibuffer-message (format " No latex compilation is running for \"%s.tex\"" (my/latex/get-master-file-name)))))))
#+END_SRC
* Keybindings
#+begin_src emacs-lisp
(after! latex
  (define-key LaTeX-mode-map (kbd "C-c C-o C-s") (function my/latex/save-buffer))
  (define-key LaTeX-mode-map (kbd "C-c C-j") (function my/latex/exterminate))
  (define-key LaTeX-mode-map (kbd "C-c C-c") (function  my/latex/compile)))
#+end_src
