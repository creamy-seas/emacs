#+TITLE: Essential config for functions and packages that should be set by default
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

*[[https://stackoverflow.com/questions/134887/when-to-use-or-quote-in-lisp][A must read post about quoting]]*
|-----+---------------------------------------------------------------------------------------------|
| ='= | are used to not evalute the symbols (pass them as literals)                                 |
| =`= | are use before a bracketed region () - anything escaped with a comma =,= will be evaluated. |
|-----+---------------------------------------------------------------------------------------------|


* 1 - Keyboard
** My keymap on =C-i= and =C-z=
*** Unbind <C-i> from the TAB key
#+BEGIN_SRC emacs-lisp
  (if (window-system)
                                          ; if we are not in a TTY, unbind C-i from TAB
      (progn
        (define-key input-decode-map [?\C-i] [C-i]))

    ;; Since TAB and <C-i> cannot be differentiated in TTY emacs,
    ;; the workaround is to conditionally bind TAB to indent-region
    ;; when there is an active region selected.
    (defun my/tab-replacement (&optional START END)
      (interactive "r")
      (if (use-region-p)
                                          ; IF active region, use indent-region
          (indent-region START END)
                                          ; ELSE IF no active region, use default tab command
        (indent-for-tab-command)))
                                          ; Bind our quick-and-dirty TAB replacement to the TAB key
    (global-set-key (kbd "TAB") 'my/tab-replacement))
 #+END_SRC
*** Bind my keymap
#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'my/keymap)
  (global-set-key (kbd "<C-i>") 'my/keymap)
  (global-set-key (kbd "<C-z>") 'my/keymap)
 #+END_SRC
** Symbols mapping
#+BEGIN_SRC emacs-lisp
  (define-key key-translation-map (kbd "C-x 8 h") (kbd "Âçç")) ; naughty
  (define-key key-translation-map (kbd "C-x 8 C") (kbd "‚ò≠")) ; erm, kinda naughty
  (define-key key-translation-map (kbd "C-x 8 w") (kbd "üê≥"))
  (define-key key-translation-map (kbd "C-x 8 W") (kbd "üêã"))
  (define-key key-translation-map (kbd "C-x 8 O") (kbd "Œ©"))
  (define-key key-translation-map (kbd "C-x 8 #") (kbd "¬£"))
  (define-key key-translation-map (kbd "C-x 8 -") (kbd "‚Üí"))
  (define-key key-translation-map (kbd "C-x 8 t") (kbd "‚úî"))
  (define-key key-translation-map (kbd "C-x 8 c") (kbd "‚úò"))
  (define-key key-translation-map (kbd "C-x 8 b") (kbd "‚¶ø"))
  (define-key key-translation-map (kbd "C-x 8 _") (kbd "Ã≤"))
  (define-key key-translation-map (kbd "C-x 8 q") (kbd "\""))
 #+END_SRC
** Russian mappings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-—á C-—ã") (function save-buffer))
  (global-set-key (kbd "C-—á C-–∏") (function ido-switch-buffer))
  (global-set-key (kbd "C-—Ç") (function next-line))
  (global-set-key (kbd "C-–∞") (function forward-char))
  (global-set-key (kbd "C-–∏") (function backward-char))
  (global-set-key (kbd "M-–∞") (function forward-word))
  (global-set-key (kbd "M-–∏") (function backward-word))
  (global-set-key (kbd "C-—Ñ") (function beginning-of-visual-line))
  (global-set-key (kbd "C-—É") (function end-of-visual-line))
  (global-set-key (kbd "C-–∑") (function previous-line))
  (global-set-key (kbd "C-–Ω") (function yank))
  (global-set-key (kbd "C-–≤") (function sp-delete-char))

 #+END_SRC
* 2 - Minor Functions
** =my/add-dependency=
#+BEGIN_SRC emacs-lisp
    (defun my/add-dependency (new-dependency)
      "Add the new-dependency to the requirements file.
  It will be checked by the Makefile to ensure all is installed for this config to run smoothly"
      (interactive)
      (let* ((requirement-file (concat my/config-folder-location "support_files/requirements.txt"))
             (updated-depencies
              (with-temp-buffer
                                            ; 1 - add the new dependency to the buffer
                (insert (concat new-dependency "\n"))
                                            ; 2 - add the previous dependecies
                (insert-file-contents requirement-file)
                (sort
                 (split-string
                                            ; 2 - select the whole buffer and read into list
                  (buffer-substring-no-properties
                   (point-min)
                   (point-max))
                  "\n" t)
                 'string<))))
                                            ; 3 - drop dupliactes IMPORTANT
        (setq updated-depencies (my/drop-duplicates-in-list updated-depencies))
                                            ; 4 - open file and write the new list
        (with-temp-file requirement-file
          (my/write-list-into-current-buffer updated-depencies))

        (message (format "Ó©° Dependecy list: %s" updated-depencies))))
 #+END_SRC
** =my/config-file-path-evaluate=
#+BEGIN_SRC emacs-lisp
  (defun my/config-file-path-evaluate (path-from-config-folder)
    "Expanding the path for a file in the emacs config folder"
    (concat my/config-folder-location path-from-config-folder))
 #+END_SRC
** =my/copy-line=
#+BEGIN_SRC emacs-lisp
  (defun my/copy-line ()
    "Copies the current line of the cursor
       Returns the current line as a string"
    (interactive)
    (buffer-substring (line-beginning-position) (line-end-position)))
 #+END_SRC
** =my/copy-line-save-position=
#+BEGIN_SRC emacs-lisp
  (defun my/copy-line-save-position ()
    (interactive)
    (save-excursion ;;save the cursor position
      (kill-new            ;;kill the following
       (buffer-substring ;;from begginin of line to end of line
        (point-at-bol)
        (point-at-eol)))))
  (global-set-key (kbd "C-c w l") (function my/copy-line-save-position))
#+END_SRC
** =my/drop-duplicates-in-list=
#+BEGIN_SRC emacs-lisp
  (defun my/drop-duplicates-in-list (list)
    (let ((new-list nil))
      (while list
        (when (and (car list) (not (member (car list) new-list)))
          (setq new-list (cons (car list) new-list)))
        (setq list (cdr list)))
      (nreverse new-list)))
 #+END_SRC
** =my/extract-string=
#+BEGIN_SRC emacs-lisp
  (defun my/extract-string (regexp index string)
    "Extract a particular part of a regexp from the chosen string
    -------------------------------------------------------------------
    regexp     regular expression with individual arguments in \\(\\)
    index         index match to extract
    string        string to extract from
    "
    (string-match regexp string)
    (match-string index string))
 #+END_SRC
** =my/fetch-config-files=
#+BEGIN_SRC emacs-lisp
  (defun my/fetch-config-files ()
    "I store all of the .org files in my_org_files.txt. This method simply fetches them into a list"
    (with-temp-buffer
      (insert-file-contents (concat my/config-folder-location "support_files/my_org_files.txt"))
      (sort
       (split-string
                                          ; select the whole buffer
        (buffer-substring-no-properties
         (point-min)
         (point-max))
        "\n" t)
       'string<)))
 #+END_SRC
** =my/figlet=
#+BEGIN_SRC emacs-lisp
  (defun my/figlet (string-to-convert)
    "Converts 'string-to-convert' to ascii art and inserts it into buffer

      string-to-convert:	string to turn to art
      "
    (interactive "sString to make into art: ")
    (let* ((ascii-art (shell-command-to-string (concat "figlet -k" " " string-to-convert))))
      (setq ascii-art (replace-regexp-in-string "^"
                                                comment-start
                                                ascii-art))
      (insert ascii-art)
      ))
 #+END_SRC
** =my/file-name-from-line=
#+BEGIN_SRC emacs-lisp
  (defun my/file-name-from-line (prefix suffix)
    "Copies the current line and elinates all spaces"
    (interactive)
    (let* (
           (file-name (my/copy-line))
           (file-name (replace-regexp-in-string "^\s*" "" file-name))
           (file-name (downcase file-name))
           (file-name (replace-regexp-in-string " " "_" file-name))
           (file-name (concat prefix file-name suffix)))
      (message file-name)))
 #+END_SRC
** =my/generate-filename-from-line=
#+BEGIN_SRC emacs-lisp
  (defun my/generate-filename-from-line ()
    "Reads in the current line and generates a valid filename with an underscore"
    (let* (;reads in current line
           (file-name (my/copy-line)))
      ;; Trim leading whitespaces -> downcase -> replace spaces with underscore
      (replace-regexp-in-string " " "_" (downcase (replace-regexp-in-string "^\s*" "" file-name)))))
 #+END_SRC
** =my/rename-file-and-buffer=
#+BEGIN_SRC emacs-lisp
  (defun my/rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))
 #+END_SRC
** =my/write-list-into-current-buffer=
#+BEGIN_SRC emacs-lisp
  (defun my/write-list-into-current-buffer (list-to-write)
    "Inserts elements of a simple list 1-by-1 into the current file"
    (while list-to-write
      (insert (format "%s\n" (car list-to-write)))
      (setq list-to-write (cdr list-to-write))))
 #+END_SRC

* Major Function: Describe the installed packages
#+BEGIN_SRC emacs-lisp
  (defun my/describe-packages ()
    "Gets the info for an isntalled package"
    (interactive)
    (let ((chosen-package (ido-completing-read "Ó©° Package to describe: " (sort
                                                                          (hash-table-keys my/package-hashmap)
                                                                          'string<))))
      (describe-package (gethash chosen-package my/package-hashmap))))
 #+END_SRC
* Major Function: Narrow and widen region smartly =C-x n=
#+BEGIN_SRC emacs-lisp
  (defun my/narrow-or-widen-dwim (p)
    "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
  Intelligently means: region, org-src-block, org-subtree, or defun,
  whichever applies first.
  Narrowing to org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer is already
  narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning) (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing command.
           ;; Remove this first conditional if you don't want it.
           (cond ((ignore-errors (org-edit-src-code))
                  (delete-other-windows))
                 ((org-at-block-p)
                  (org-narrow-to-block))
                 (t (org-narrow-to-subtree))))
          (t (narrow-to-defun))))

  (global-set-key (kbd "C-x n") (function my/narrow-or-widen-dwim))
 #+END_SRC
* Major Function: Open config file =C-c e=
#+BEGIN_SRC emacs-lisp
  (defun my/config-file-open ()
    "Prints out the config files and opens the selected one for editing"
    (interactive)
    (let ((chosen-file (ido-completing-read "Config file to open:"
                                            (my/fetch-config-files))))
      (find-file (my/config-file-path-evaluate chosen-file))))

    (global-set-key (kbd "C-c e") (function my/config-file-open))
 #+END_SRC
* Major Function: Tangle config files automatically
Whenever a config file is saved:
- tangle it (extract out all of the emacs-lisp code blocks)
- compile it (=.el= -> =.elc=)
- load it up

This way you can quickly edit the configuration (using [[*Open config file =C-c e=][Open config file]]), save it and immediately apply the changes
#+BEGIN_SRC emacs-lisp
  (defun my/config-file-tangle ()
    "Should be run after saving every file - check if the name is in the config files and
      tangle if yes"
    (let ((current-org-file (file-name-nondirectory (buffer-file-name))))
      (when (member current-org-file (my/fetch-config-files))
                                          ; Avoid running hooks when tangling.
        (let ((prog-mode-hook nil)
              (el-file (concat
                        user-emacs-directory
                        (replace-regexp-in-string "\.org" "\.el" current-org-file))))
                                          ; Tangle the file -> get name of file -> rename
          (rename-file
           (car (org-babel-tangle-file current-org-file))
           el-file t)
                                          ; Bytecompile
          (byte-compile-file el-file t)
                                          ; Reload config
          ;; (load-file (concat user-emacs-directory el-emacs-file "c"))
          (message (concat "Ó§¶ Compiled and loaded " el-file))))))

  (add-hook 'after-save-hook 'my/config-file-tangle)
 #+END_SRC
* Bookmarks
** Config
#+BEGIN_SRC emacs-lisp
                                          ; save bookmars to file
  (setq bookmark-save-flag t)

                                          ; load boomarks from "~/.emacs.d/bookmarks"
  (when (file-exists-p (concat user-emacs-directory "bookmarks"))
    (bookmark-load bookmark-default-file t))
  (setq bookmark-default-file (concat user-emacs-directory "bookmarks"))
 #+END_SRC
** Keybindigs
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f6>") 'bookmark-set)
  (global-set-key (kbd "<f7>") 'bookmark-jump)
  (global-set-key (kbd "<f8>") 'bookmark-bmenu-list)
 #+END_SRC
* Comment line  =C-c C-;=
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c C-;") (function comment-line))
 #+END_SRC
* Overwrite selected text when typing
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
 #+END_SRC
* Reload on the go
Any changes of a file, will be automatically reloaded
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)
  (setq load-prefer-newer t)
 #+END_SRC
* Saving hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook #'whitespace-cleanup)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
                                          ; adding new line to end of file when saving
  (setq require-final-newline    t)
  (setq next-line-add-newlines nil)
 #+END_SRC
* PACKAGE Agressive indenting
To keep code aliged
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :init
    (aggressive-indent-global-mode 1)
    (my/add-to-package-list 'aggressive-indent))
 #+END_SRC
** Disable it in certain modes
#+BEGIN_SRC emacs-lisp
  (dolist (mode '(cider-repl-mode
                  comint-mode
                  eshell-mode
                  slime-repl-mode
                  term-mode))
    (add-to-list 'aggressive-indent-excluded-modes mode))
 #+END_SRC
* PACKAGE Avy   =M-s=
The superior search method with highlighting of the leading characters
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :init
    (global-set-key (kbd "M-s") 'avy-goto-word-or-subword-1)
    (setq avy-background t)
    (my/add-to-package-list 'avy))
#+END_SRC
* PACKAGE Company
Completion. With a dropdown box. Metal.
** Init
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    (my/add-to-package-list 'company)
    :config
    (setq company-tooltip-align-annotations t)
    (setq company-show-numbers t)
                                          ;set time before company popup shows up
    (setq company-idle-delay 0.2)
                                          ;when autocompletion kicks in
    (setq company-minimum-prefix-length 3))
#+END_SRC
** Company colours
#+BEGIN_SRC emacs-lisp
  ;; (custom-set-faces
  ;;  ;; annotation (i.e. function or method)
  ;;  `(company-tooltip-annotation ((t (:foreground "#CFD0E3"))))
  ;;  `(company-tooltip-annotation-selection ((t (:foreground "#334676"))))
  ;;  ;; scrollbar showing position in list
  ;;  `(company-scrollbar-bg ((t (:background "#189a1e1224a2"))))
  ;;  `(company-scrollbar-fg ((t (:background "#41bf505b61e3"))))
  ;;  ;; text being expanded
  ;;  `(company-tooltip-common ((t (:foreground "#33ccff"))))
  ;;  `(company-tooltip-common-selection ((t (:foreground "#3a3a6e" :weight bold))))
  ;;  ;; autocompletion selection
  ;;  `(company-tooltip-selection ((t (:background "orange2" :foreground "#090C42" :weight bold))))
  ;;  ;; change background of the box
  ;;  `(company-tooltip ((t (:inherit default :background "#41bf505b61e3")))))
 #+END_SRC
** Company popup help
#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp
    :ensure t
    :init
    (company-quickhelp-mode)
    (my/add-to-package-list 'company-quickhelp))

  ;; do not show popups automatically
  (customize-set-variable 'company-quickhelp-delay nil)
 #+END_SRC
** Keybinding
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-j") #'company-quickhelp-manual-begin)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))
 #+END_SRC
* MANUAL-PACKAGE Dired
Beautiful file browsing. Dired+ is downloaded manually
| =a=       | go to file or directory and close dired bufffer |
| =v=       | preview                                         |
| =o=       | open in new window                              |
| =m/u=     | mark/unmark                                     |
| =+=       | add directory                                   |
| =r=       | rename                                          |
| =R=       | move mass                                       |
| =*=       | regexp                                          |
| =C-c C-q= | rename then =C-c C-c=                           |
** Init
#+BEGIN_SRC emacs-lisp
  (require 'dired+)
  (my/add-to-package-list 'diminish)
  ; hook that does not show boring files
  ;; (add-hook 'dired-mode-hook (function dired-omit-mode))
 #+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-d") (function dired))

  (define-key dired-mode-map (kbd "<right>") (function dired-find-file-other-window))
 #+END_SRC

* PACKAGE Diminish
Allows hiding of modes from the modeline
Set =:diminish t= when using use-package
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init (my/add-to-package-list 'diminish))
 #+END_SRC

* PACKAGE Expand region         =C-q=
Allos to expand to word, bracket, sentence, paragraph
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :init (my/add-to-package-list 'expand-region)
    :bind ("C-q" . er/expand-region))
#+END_SRC
* PACKAGE Fic
Highlighting of TODOs
#+BEGIN_SRC emacs-lisp
  (load-file (my/config-file-path-evaluate "manual_el/fic-mode.el"))
  (use-package fic-mode
    :ensure t
    :init  (my/add-to-package-list 'fic-mode)
    :config
    (add-hook 'prog-mode-hook 'turn-on-fic-mode))
 #+END_SRC
* PACKAGE Flycheck

- Better than the default spellchecker called =flyspell=
- To get information on flycheck for the current mode run =flycheck-verify-setup=
- =M-$= to check word

** Dependencies
#+BEGIN_SRC emacs-lisp
  (my/add-dependency "ispell")
 #+END_SRC

** Init
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish t
    :init (my/add-to-package-list 'flycheck)
    (global-flycheck-mode))
 #+END_SRC
** Set dictionaries
#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "/usr/local/bin/aspell")
  (setq ispell-dictionary "en_GB")
  ;; Save to user dictionary
  (setq ispell-silently-savep t)
  (setq ispell-personal-dictionary (my/config-file-path-evaluate "dictionaries/aspell.en.pws"))
 #+END_SRC
** DOWN Colouring of errors
#+BEGIN_SRC emacs-lisp
  ;; (set-face-attribute 'flycheck-error nil
  ;;                       :background "#bf0004"
  ;;                       :foreground "gold2"
  ;;                       :underline nil
  ;;                       :box '(:color "gold2" :line-width 1))
  ;;   (set-face-attribute 'flycheck-warning nil
  ;;                       :underline "DarkOrange")
 #+END_SRC
** Turn off documentation warnings for emacs-lisp
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'flycheck
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
 #+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp
  (define-key my/keymap (kbd "n") (function flycheck-next-error))
  (define-key my/keymap (kbd "p") (function flycheck-previous-error))
  (define-key my/keymap (kbd "L") (function flycheck-list-errors))
 #+END_SRC
* PACKAGE Hungry delete
Hungry delete deletes all white space between cursor and the next character
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :init (my/add-to-package-list 'hungry-delete)
    :config (global-hungry-delete-mode))
#+END_SRC
* PACKAGE Hydra
Used for defining custom menus
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t
    :init (my/add-to-package-list 'hydra))
 #+END_SRC
* PACKAGE iedit =C-:=
Mark and edit all copies of the marked region simultaniously.
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t
    :bind ("C-:" . iedit-mode)
    :init (my/add-to-package-list 'iedit))
 #+END_SRC

* PACKAGE Ivy
A generic autocompletion framework
| Ivy     | Generic completion                      |
| Counsel | Ivy-enhanced versions of emacs commands |
| Swiper  | Alternative search                     |

https://sam217pa.github.io/2016/09/11/nuclear-power-editing-via-ivy-and-ag/

** PACKAGE Ivy
*** Init
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :init (my/add-to-package-list 'ivy)
    (ivy-mode)
    :config
    (setq ivy-use-virtual-buffers t
          enable-recursive-minibuffers t
                                          ;change how ivy displays autocompletion
          ivy-count-format "%d/%d "))
 #+END_SRC

*** Keybindings
#+BEGIN_SRC emacs-lisp
  (define-key my/keymap (kbd "s") (function ivy-resume))
 #+END_SRC
** PACKAGE Counsel
Rebind emacs commands to use ivy https://github.com/abo-abo/swiper#counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :init (my/add-to-package-list 'counsel)
    :config
    (counsel-mode))
 #+END_SRC
** PACKAGE Swiper
The superior search mode to the original
#+BEGIN_SRC emacs-lisp
  (require 'swiper)
  (global-set-key (kbd "C-s") 'swiper)
#+END_SRC
* PACKAGE Kill ring
Popup menu when pasting of the past history
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring)
    :init (my/add-to-package-list 'popup-kill-ring))
#+END_SRC
* PACKAGE LSP
Language server used in rust
- https://github.com/emacs-lsp/lsp-mode
- Turn on user interface (ui) and allow company autocomplete to access the ui

** Init
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init
    (my/add-to-package-list 'lsp-mode)
    (setq lsp-keymap-prefix "s-l")
    :commands
    (lsp lsp-deferred))
#+END_SRC

** UI
Higher lever features such as flycheck
https://github.com/emacs-lsp/lsp-ui
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)
 #+END_SRC

** Company Integration
Put lsp into the backend of company
#+BEGIN_SRC emacs-lisp
  (use-package company-lsp
    :ensure t
    :config
    (push '(company-lsp :with company-yasnippet)
          company-backends)
    :commands company-lsp)
 #+END_SRC

** Ivy Intergration
To autocomplete in the search buffergpg
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ivy
    :ensure t
    :init (my/add-to-package-list 'lsp-ivy))
 #+END_SRC
* PACKAGE Popwin
*Help* *Completions* and other buffers are spawned as popups
#+BEGIN_SRC emacs-lisp
  (use-package popwin
    :ensure t
    :init (my/add-to-package-list 'popwin)
    (popwin-mode t))
 #+END_SRC
* PACKAGE Projectile    =S-p=
Navigation around a set of project files. There's tons of shortcuts to explore
https://projectile.readthedocs.io/en/latest/projects/

- Use [[counsel-projectile][Counsel-projectile]] =s-M-p= to explore functions
- The ones that are useful should be added to the Hydra [[counsel-hydra][Hydra]]
** Dependencies
#+BEGIN_SRC emacs-lisp
  (my/add-dependency "ag")
 #+END_SRC

| =ag= aka =the_silver_searcher= | used by projectile to search cross project |

** Init
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init (my/add-to-package-list 'projectile)
    :config
    (projectile-mode))

(define-key projectile-mode-map (kbd "M-s-p") 'projectile-command-map)
 #+END_SRC
** Counsel-projectile <<counsel-projectile>>
For better autocompletion
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :init (my/add-to-package-list 'counsel-projectile)
    :config
    (counsel-projectile-mode))
 #+END_SRC
** Ag
#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t
    :init (my/add-to-package-list 'ag))
 #+END_SRC
** Hydra <<counsel-hydra>>
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-projectile-other-window (:color teal)
    "projectile-other-window"
    ("f"  projectile-find-file-other-window        "file")
    ("g"  projectile-find-file-dwim-other-window   "file dwim")
    ("d"  projectile-find-dir-other-window         "dir")
    ("b"  projectile-switch-to-buffer-other-window "buffer")
    ("q"  nil                                      "cancel" :color blue))

  (defhydra hydra-projectile (:color teal
                                     :hint nil)
    "
         PROJECTILE: %(projectile-project-root)

         Find File            Search/Tags          Buffers                Cache
    ------------------------------------------------------------------------------------------
    _s-f_: file            _a_: ag                _i_: Ibuffer           _c_: cache clear
     _ff_: file dwim       _b_: switch to buffer  _x_: remove known project
     _fd_: file curr dir   _o_: multi-occur     _s-k_: Kill all buffers  _X_: cleanup non-existing
                         _r_: replace regexp                         ^^^^_z_: cache current
      _d_: dir
      _R_: run

    "
    ("R"	 projectile-run-project)
    ("a"   projectile-ag)
    ("b"   projectile-switch-to-buffer)
    ("c"   projectile-invalidate-cache)
    ("d"   projectile-find-dir)
    ("s-f" projectile-find-file)
    ("ff"  projectile-find-file-dwim)
    ("fd"  projectile-find-file-in-directory)
    ("i"   projectile-ibuffer)
    ("K"   projectile-kill-buffers)
    ("s-k" projectile-kill-buffers)
    ("m"   projectile-multi-occur)
    ("o"   projectile-multi-occur)
    ("s-p" projectile-switch-project "switch project")
    ("p"   projectile-switch-project)
    ("s"   projectile-switch-project)
    ("r"   counsel-ag)
    ("x"   projectile-remove-known-project)
    ("X"   projectile-cleanup-known-projects)
    ("z"   projectile-cache-current-file)
    ("`"   hydra-projectile-other-window/body "other window")
    ("q"   nil "cancel" :color blue))

  (global-set-key (kbd "s-p") (function hydra-projectile/body))
 #+END_SRC
* PACKAGE Restart
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :ensure t
    :init (my/add-to-package-list 'restart-emacs))
 #+END_SRC
* PACKAGE Smartparens
Smart way of moving around brackets. Still lreadning the bindings
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :init (my/add-to-package-list 'smartparens)
    :config
    (require 'smartparens-config)
    (smartparens-global-mode)
    (show-smartparens-global-mode))
 #+END_SRC
** Enforce strict mode in certain modes
You may want to turn this off if it triggers your workflow
#+BEGIN_SRC emacs-lisp
  (mapc (lambda (hook)
          (add-hook hook #'smartparens-strict-mode))
        '(markdown-mode-hook
          prog-mode-hook))
 #+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp
  (define-key smartparens-mode-map (kbd "C-M-f") #'sp-forward-sexp)
  (define-key smartparens-mode-map (kbd "C-M-b") #'sp-backward-sexp)

  ;; Up/down
  (define-key smartparens-mode-map (kbd "C-M-d") #'sp-down-sexp)
  (define-key smartparens-mode-map (kbd "C-M-e") #'sp-up-sexp)
  (define-key smartparens-mode-map (kbd "C-M-a") #'sp-backward-down-sexp)
  (define-key smartparens-mode-map (kbd "C-M-q") #'sp-backward-up-sexp)
  (define-key smartparens-mode-map (kbd "C-M-`") #'beginning-of-defun)

  ;; Transpose
  (define-key smartparens-mode-map (kbd "C-M-t") 'sp-transpose-sexp)

  ;; Mark/kill/copy
  (global-set-key [remap mark-sexp] #'sp-mark-sexp)
  (define-key smartparens-mode-map (kbd "C-M-k") #'sp-kill-sexp)
  (define-key smartparens-mode-map (kbd "C-M-w") #'sp-copy-sexp)

  ;; Unwrap
  (define-key smartparens-mode-map (kbd "M-<delete>") #'sp-unwrap-sexp)
  (define-key smartparens-mode-map (kbd "M-<backspace>") #'sp-backward-unwrap-sexp)

  ;; Slurp/barf
  (define-key smartparens-mode-map (kbd "C-<right>") #'sp-forward-slurp-sexp)
  (define-key smartparens-mode-map (kbd "C-<left>") #'sp-forward-barf-sexp)
  (define-key smartparens-mode-map (kbd "C-S-<left>") #'sp-backward-slurp-sexp)
  (define-key smartparens-mode-map (kbd "C-S-<right>") #'sp-backward-barf-sexp)

  (define-key smartparens-mode-map (kbd "C-M-<backspace>") #'sp-splice-sexp-killing-backward)
  (define-key smartparens-mode-map (kbd "C-S-<backspace>") #'sp-splice-sexp-killing-around)

  ;; Indent
  (define-key smartparens-mode-map (kbd "C-M-<tab>") #'sp-indent-defun)
 #+END_SRC
* PACKAGE Undo Tree     =M-/=
Spawns a tree of all the undos that you have ever made
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat my/config-folder-location "manual_el/undo-tree-0.6.5"))
  (require 'undo-tree)
  (my/add-to-package-list 'undo-tree)
  (global-undo-tree-mode)
  (setq undo-tree-visualizer-timestamps t)
  (setq undo-tree-visualizer-diff t)

  (global-set-key (kbd "M-/") 'undo-tree-visualize)
#+END_SRC
* PACKAGE Yasnippet
Autocompletion by typing in first part of word and tabbing to insert a template
- yasnippet is the framework
- yasnippet-snippets is the official collection of snippets
** Init
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init (my/add-to-package-list 'yasnippet)
    :config
    (yas-global-mode)
                                          ; do not user yasnippet in terminal mode
    (add-hook 'term-mode-hook (lambda ()
                                (yas-minor-mode -1))))
 #+END_SRC
** PACKAGE Default snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t
    :init (my/add-to-package-list 'yasnippet-snippets)
    :config
    (yas-reload-all))
 #+END_SRC
#+BEGIN_SRC emacs-lisp
  (setq yas-snippet-dirs (list 'yasnippet-snippets-dir (my/config-file-path-evaluate "snippets")))
  (yas-reload-all)
 #+END_SRC
** PACKAGE Auto yasnippets
Quickly create disposable yasnippets with =~=
#+BEGIN_SRC emacs-lisp
  (use-package auto-yasnippet
    :ensure t
    :init (my/add-to-package-list 'auto-yasnippet)
    :config
    (define-key my/keymap (kbd "s") (function aya-create))
    (define-key my/keymap (kbd "y") (function aya-expand)))
 #+END_SRC
