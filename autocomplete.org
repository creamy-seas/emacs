#+AUTHOR: Ilya Antonov
#+TITLE: Autcomplete-Helm
#+EMAIL: ilya.antonov@dreams-ai.com
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

| *Helm Options* |                                     |   |
| =C-t=          | Switch to vertical/horizontal       |   |
| =C-Space=      | to mark a selection                 |   |
| =M-a=          | to mark everything                  |   |
| =C-c C-i=      | to insert                           |   |
| =C-s=          | To launch =helm-moccur=             |   |
|                | Can regex search                    |   |
|                | =*major-mode1,*major-mode-2=        |   |
|                | =!/excludeparam=                    |   |
|                | =@search-for-regexp=                |   |
| =C-j=          | Narrow to candidates/preview buffer |   |
| =C-l=          | Return to all candidates            |   |
| =C-l, C-r=     | Move in and out of directiries      |   |
| =C-c C-o=      | Open file in anothe frame         |   |

| *Global Rebinds* |                                                  |                          |
| =M-z=            | Execute using helm (just like =M-x=)             |                          |
| =C-z=            | Available actions                                |                          |
| =C-x C-b=        | List buffers and recent filers                   | =helm-mini=              |
|------------------+--------------------------------------------------+--------------------------|
| *Files*          |                                                  |                          |
| =C-c h C-f=      | Find files                                       |                          |
| =C-c h C-x C-b=  | List buffers                                     | ~Same as =helm-mini=     |
| =C-c h C-x C-r=  | Recent buffers                                   | but uses recent files    |
|                  |                                                  | managed by IDO           |
|------------------+--------------------------------------------------+--------------------------|
| *Search*         |                                                  |                          |
|------------------+--------------------------------------------------+--------------------------|
| =C-c h M-s=      | Find all occurunces of current word in this file | =helm-occur=             |
| =C-c h s=        | Swoop Search in all open files                   | =helm-swoop=             |
| =C-c h C-s=      | Swoop - open buffer to enter search query        | =helm-multi-swoop-all=   |
|                  | =M-i= to expand the search to all files          |                          |
|                  | =C-c C-e= to enter edit mode                     |                          |
|------------------+--------------------------------------------------+--------------------------|
| *Tools*          |                                                  |                          |
| =C-c h i=        | Launch semantics menu - search for functions     | =helm-semantic-or-imenu= |
| =C-c h m=        | man pages                                        | =helm-man-woman=         |
| =C-c h t=        | top                                              | =helm-top=               |
| =C-c h c=        | colours                                          | =helm-colors=            |
| =C-c h r=        | Helm register                                    |                          |
| =C-c h p=        | Helm process                                     |                          |
| =C-h r=          | Emacs info                                       |                          |

| *Helm Projectile*          |                                  |
| =C-c p=                    |                                  |
| *Once in search file mode* |                                  |
| =C-c f=                    | Create a buffer for this project |
| =C-c a=                    | Add file to the buffer           |


A generic autocompletion framework
| Ivy     | Generic completion                      |
| Counsel | Ivy-enhanced versions of emacs commands |
| Swiper  | Alternative search                      |

| *Tags*          |                                  |   |
| =C-j=           | jump to a tag selected from menu |   |
| =M-.= and =M-,= | move to an from tag under cursor |   |
| =C-c g h=       | List all tasg                    |   |
| =C-c g r=       | Find tags in project             |   |
| =C-c g a=       | List tags in current scope       | h |
|-----------------+----------------------------------+---|

https://sam217pa.github.io/2016/09/11/nuclear-power-editing-via-ivy-and-ag/

* PACKAGE Ivy
** Init
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :init (my/add-to-package-list 'ivy)
    :config
    (setq ivy-use-virtual-buffers t
          enable-recursive-minibuffers t
                                          ;change how ivy displays autocompletion
          ivy-count-format "%d/%d "))
 #+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
  (define-key my/keymap (kbd "s") (function ivy-resume))
 #+END_SRC
* PACKAGE Counsel
Rebind emacs commands to use ivy https://github.com/abo-abo/swiper#counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :init (my/add-to-package-list 'counsel)
    :config
    (counsel-mode))
 #+END_SRC
* ggtags
- In every project, run =gtags= from the command line in the root directory or
- Run =ggtags-create-tags= in the root directory

| =C-c g XXX= | For expansion |
| =C-c M-XXX= |               |

** External setup
1) Install ctags backend https://github.com/universal-ctags/homebrew-universal-ctags
2) Download
#+BEGIN_SRC sh :tangle no
wget https://www.gnu.org/software/global/download.html
 #+END_SRC
3) [@3] Install
#+BEGIN_SRC shell :tangle no
  ./configure --with-universal-ctags=/usr/local/bin/ctags
  make & make install
 #+END_SRC
** Normal ggtags
*** Init
#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :ensure t
    :init (my/add-to-package-list 'ggtags)
    (my/add-dependency "gtags"))

  (add-hook 'c-mode-common-hook (lambda ()
                                  (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                                    (ggtags-mode 1))))
 #+END_SRC
*** Keybindings
#+BEGIN_SRC emacs-lisp
  (dolist (map (list ggtags-mode-map dired-mode-map))
    ;; (define-key map (kbd "C-c g s") 'ggtags-find-other-symbol)
    ;; (define-key map (kbd "C-c g h") 'ggtags-view-tag-history)
    (define-key map (kbd "C-c g r") 'ggtags-find-reference)
    ;; (define-key map (kbd "C-c g f") 'ggtags-find-file)
    (define-key map (kbd "C-c g c") 'ggtags-create-tags)
    ;; (define-key map (kbd "C-c g u") 'ggtags-update-tags)
    ;; (define-key map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
    ;; (define-key map (kbd "M-.") 'ggtags-find-tag-dwim)
    ;; (define-key map (kbd "M-,") 'pop-tag-mark)
    ;; (define-key map (kbd "C-c <") 'ggtags-prev-mark)
    ;; (define-key map (kbd "C-c >") 'ggtags-next-mark)
    )
 #+END_SRC
** PACKAGE Helm-ggtags =C-c g=
Use helm-etags when looking through tags
*** Init
#+BEGIN_SRC emacs-lisp
  (use-package helm-gtags
    :ensure t
    :init (my/add-to-package-list 'helm-gtags))

  (add-hook 'dired-mode-hook 'helm-gtags-mode)
  (add-hook 'eshell-mode-hook 'helm-gtags-mode)
  (add-hook 'c-mode-hook 'helm-gtags-mode)
  (add-hook 'c++-mode-hook 'helm-gtags-mode)
  (add-hook 'asm-mode-hook 'helm-gtags-mode)
 #+END_SRC
*** Config
#+BEGIN_SRC emacs-lisp
  (setq
   helm-gtags-ignore-case t
   helm-gtags-auto-update t
   helm-gtags-use-input-at-cursor t
   helm-gtags-pulse-at-cursor t
   helm-gtags-prefix-key "\C-cg"
   helm-gtags-suggested-key-mapping t)
 #+END_SRC
*** Keybinding
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'helm-gtags
    (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
    (define-key helm-gtags-mode-map (kbd "C-c g h") 'helm-gtags-show-stack)
    (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
    (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
    (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
    (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
    (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history))
 #+END_SRC
* PACKAGE Swiper
The superior search mode to the original
#+BEGIN_SRC emacs-lisp
  (require 'swiper)
  (global-set-key (kbd "C-s") 'swiper)
#+END_SRC
* PACKAGE Helm
Look at [[https://tuhdo.github.io/helm-intro.html][this tutorial]]
** Init
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :init
    (my/add-to-package-list 'helm)
    (require 'helm-config)
    (require 'helm-grep))
 #+END_SRC
** Config
#+BEGIN_SRC emacs-lisp
  (setq
   helm-split-window-inside-p t          ; open helm buffer inside current window, not occupy whole other window

   helm-echo-input-in-header-line t

   helm-scroll-amount 4                   ; scroll 4 lines other window using M-<next>/M-<prior>

   helm-quick-update t                    ; do not display invisible candidates

   helm-ff-search-library-in-sexp t       ; search for library in `require' and `declare-function' sexp.

   ;; you can customize helm-do-grep to execute ack-grep
   ;; helm-grep-default-command "ack-grep -Hn --smart-case --no-group --no-color %e %p %f"
   ;; helm-grep-default-recurse-command "ack-grep -H --smart-case --no-group --no-color %e %p %f"

   ;; helm-candidate-number-limit 500     ; limit the number of displayed canidates

   helm-ff-file-name-history-use-recentf t

   helm-move-to-line-cycle-in-source t    ; move to end or beginning of source when reaching top or bottom of source.

   helm-buffer-skip-remote-checking t

   helm-completion-style t

   helm-buffers-fuzzy-matching t

   helm-org-headings-fontify t

   ;; helm-find-files-sort-directories t

   ;; ido-use-virtual-buffers t

   helm-M-x-fuzzy-match t

   helm-lisp-fuzzy-completion t

   ;; helm-apropos-fuzzy-match t

   helm-buffer-skip-remote-checking t

   helm-locate-fuzzy-match t

   helm-display-header-line nil)
 #+END_SRC
** Supporting [[file:cppmode.org::*Semantics][Semantics]] and imenu for function search
#+BEGIN_SRC emacs-lisp
  (setq helm-semantic-fuzzy-match t
        helm-imenu-fuzzy-match    t)
 #+END_SRC
** Max heights
If you don't want the Helm window to be resized, you can set helm-autoresize-max-height equal to helm-autoresize-min-height.
#+BEGIN_SRC emacs-lisp
  (setq helm-autoresize-max-height 40)
  (setq helm-autoresize-min-height 10)
 #+END_SRC
** Inteference with golden ratio
#+BEGIN_SRC emacs-lisp
  (defun pl/helm-alive-p ()
    (if (boundp 'helm-alive-p)
        (symbol-value 'helm-alive-p)))

  (with-eval-after-load "golden-ratio"
    (add-to-list 'golden-ratio-inhibit-functions 'pl/helm-alive-p))
 #+END_SRC
** Loading of minibuffer
#+BEGIN_SRC emacs-lisp
  (defun helm-hide-minibuffer-maybe ()
    (when (with-helm-buffer helm-echo-input-in-header-line)
      (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
        (overlay-put ov 'window (selected-window))
        (overlay-put ov 'face (let ((bg-color (face-background 'default nil)))
                                `(:background ,bg-color :foreground ,bg-color)))
        (setq-local cursor-type nil))))

  (add-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe)
 #+END_SRC
** Rebinding common commads
#+BEGIN_SRC emacs-lisp
  (define-key global-map [remap list-buffers] 'helm-buffers-list)
  (define-key global-map [remap find-tag] 'helm-etags-select)
 #+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))

                                          ; rebind tab to do persistent action
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)

                                          ; list actions using C-z
  (define-key helm-map (kbd "C-z")  'helm-select-action)

                                          ; jumping to buffers
  (define-key helm-grep-mode-map (kbd "<return>") 'helm-grep-mode-jump-other-window)
  (define-key helm-grep-mode-map (kbd "n") 'helm-grep-mode-jump-other-window-forward)
  (define-key helm-grep-mode-map (kbd "p") 'helm-grep-mode-jump-other-window-backward)

  (define-key minibuffer-local-map (kbd "M-p") 'helm-minibuffer-history)
  (define-key minibuffer-local-map (kbd "M-n") 'helm-minibuffer-history)
 #+END_SRC
** Inactive bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-z") 'helm-M-x)

  (global-set-key (kbd "C-C h C-f") 'helm-find-files)

  (global-set-key (kbd "C-x C-b") 'helm-mini)

  (global-set-key (kbd "M-y") 'helm-show-kill-ring)

  (global-set-key (kbd "C-c h C-b") 'helm-buffers-list)
  ;; (global-set-key (kbd "C-x C-f") 'helm-find-files)

  (global-set-key (kbd "C-c h C-x C-r") 'helm-recentf)

  ;; (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)

  (global-set-key (kbd "C-c h M-s") 'helm-occur)
  ;; (global-set-key (kbd "C-c h C-s") 'helm-regexp)

  ;; (global-set-key (kbd "C-c h w") 'helm-wikipedia-suggest)
  ;; (global-set-key (kbd "C-c h g") 'helm-google-suggest)

  (global-set-key (kbd "C-c h r") 'helm-register)


  (define-key 'help-command (kbd "C-f") 'helm-apropos)
  (define-key 'help-command (kbd "r") 'helm-info-emacs)
  (define-key 'help-command (kbd "C-l") 'helm-locate-library)
 #+END_SRC
* PACKAGE Helm swoop
Allows to select a word, and run through all the matches
#+BEGIN_SRC emacs-lisp
  (use-package helm-swoop
    :ensure t
    :init (my/add-to-package-list 'helm-swoop)

    :bind (("C-c h C-s" . helm-swoop)
           ("C-c h s" . helm-multi-swoop-all))

    :config
    ;; When doing isearch, hand the word over to helm-swoop
    (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)

    ;; From helm-swoop to helm-multi-swoop-all
    (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)

    ;; Save buffer when helm-multi-swoop-edit complete
    (setq helm-multi-swoop-edit-save t)

    ;; If this value is t, split window inside the current window
    (setq helm-swoop-split-with-multiple-windows t)

    ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
    (setq helm-swoop-split-direction 'split-window-vertically)

    ;; If nil, you can slightly boost invoke speed in exchange for text color
    (setq helm-swoop-speed-or-color t))
 #+END_SRC
* PACKAGE iBuffer
Buffer that groups other buffers
** Init
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 (" Magit" (or
                             (name . "^.*gitignore$")
                             (name . "^magit.*$")))
                 (" Rust" (or
                            (name . "Cargo\\.*$")
                            (name . ".*\\.rs")
                            (name . ".*rls.*")
                            (name . ".*rustic.*")
                            (mode . rust-mode)))
                 (" Jupyter" (or
                               (mode . "ein:notebooklist-mode")
                               (name . "\\*ein:.*")
                               ))
                 (" Dired" (mode . dired-mode))
                 (" Python" (or
                              (mode . python-mode)
                              (mode . inferior-python-mode)
                              (name . "^\\*Python Doc\\*$")
                              (name . "^matplotlibrc$")
                              (name . "^.*mplstyle$")
                              (name . "^\\*Flycheck error messages\\*$")))
                 (" Latex" (or
                             (name . "^.*tex$")
                             (name . "^.*bib$")
                             (name . "^.*log$")
                             (name . "\\*RefTeX Select\\*")
                             (name . "^\\*toc\\*$")
                             (mode . comint-mode)))
                 (" Docker" (name . ".*[Dd]ock.*"))
                 (" Org" (name . "\\.org"))
                 (" eLisp" (name . "\\.el"))
                 (" Shell" (name . "\\.sh"))
                 (" PDF" (name . "\\.pdf"))
                 ("⚙ Config" (name . "^\\..*$"))
                 (" Elfeed" (or
                              (name . "\\*elfeed.*\\*")
                              (name . "^ef.*$")))))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")
              (add-to-list `ibuffer-never-show-predicates "*Completions*")
              (add-to-list `ibuffer-never-show-predicates "*Help*")))

  ;; (" Emacs" (or
  ;;               (name . "^\\*scratch\\*$")
  ;;               (name . "^\\*Messages\\*$")
  ;;               (name . "^\\*Backtrace\\*$")))
  ;; ("卍 Horter" (or
  ;;               (name . "^\\*dashboard\\*$")
  ;;               (mode . emacs-lisp-mode)))
  ;;(add-to-list `ibuffer-never-show-predicates "*Completions*")
  ;;  (add-to-list `ibuffer-never-show-predicates "*Help*")
  ;; (add-to-list `ibuffer-never-show-predicates "*elfeed-log*")
#+END_SRC
** Column lengths
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-formats
        '((mark
           modified
           "   "
           (mode 20 30 :left)
           "   "
           ;; (size 9 -1 :right)
           (name 10 70 :left);; :elide)
           "   "
           )
                ;; " "
                ;; (mode 50 50 :left :elide)
                ;; " " filename-and-process)
          ;; (mark " "
                ;; (name 16 -1)
                ;; " " filename)
        ))
#+END_SRC
** Collapse by Default
#+BEGIN_SRC emacs-lisp
  (defvar my/ibuffer-collapsed-groups (list "Default" "*Internal*" "ᛓ Elfeed"))
  ;; (setq my/ibuffer-collapsed-groups (list "*Internal*"))

  (defadvice ibuffer (after collapse-helm)
    (dolist (group my/ibuffer-collapsed-groups)
            (progn
              (goto-char 1)
              (when (search-forward (concat "[ " group " ]") (point-max) t)
                (progn
                  (move-beginning-of-line nil)
                  (ibuffer-toggle-filter-group)
                  )
                )
              )
            )
      (goto-char 1)
      (search-forward "[ " (point-max) t)
    )
 #+END_SRC
* PACKAGE IDO mode (buffers)
|---------------------+----------------------------------------|
| [[*Buffer suggestion][*Buffer suggestion*]] |                                        |
| =C-j=               | to just use whatever you have typed in |
| =C-s/r=             | Put at start/end of list               |
| =C-d=               | open directory in dired mode           |
| =M-n/p=             | next/previous directory in history     |
| =M-s=               | seach in directory history             |
| =C-t=               | toggle regex                           |
| =C-a=               | toggle ignore files                    |
|---------------------+----------------------------------------|
** Enable ido mode
 #+BEGIN_SRC emacs-lisp
   (setq ido-enable-flex-matching nil)
   (setq ido-create-new-buffer 'always)
   ;; (setq ido-everywhere t)
 #+END_SRC
** PACKAGE Enable vertical mode for buffer suggestion
 #+BEGIN_SRC emacs-lisp
   (use-package ido-vertical-mode
     :ensure t
     :init (my/add-to-package-list 'ido-vertical-mode)
     :config
     (setq ido-vertical-define-keys 'C-n-and-C-p-only)
     (ido-vertical-mode 1))

 #+END_SRC
** Remap "C-x C-b" buffer switching to ido-switch-buffer
 #+BEGIN_SRC emacs-lisp
   ;; (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
 #+END_SRC
* PACKAGE Projectile    =S-p=
Navigation around a set of project files. There's tons of shortcuts to explore
https://projectile.readthedocs.io/en/latest/projects/

- Use [[counsel-projectile][Counsel-projectile]] =s-M-p= to explore functions
- The ones that are useful should be added to the Hydra [[counsel-hydra][Hydra]]
** Dependencies
#+BEGIN_SRC emacs-lisp
  (my/add-dependency "ag")
 #+END_SRC

| =ag= aka =the_silver_searcher= | used by projectile to search cross project |
** PACKAGE Ag
#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t
    :init (my/add-to-package-list 'ag))
 #+END_SRC

** PACKAGE Init
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init (my/add-to-package-list 'projectile)
    :config
    (projectile-mode))

(define-key projectile-mode-map (kbd "M-s-p") 'projectile-command-map)
 #+END_SRC
** PACKAGE Counsel-projectile <<counsel-projectile>>
For better autocompletion
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :init (my/add-to-package-list 'counsel-projectile)
    :config
    (counsel-projectile-mode))
 #+END_SRC
** DOWN Open magit by default when opening project
#+BEGIN_SRC emacs-lisp
  ;;(setq projectile-switch-project-action 'projectile-vc)
 #+END_SRC
** PACKAGE Hydra <<counsel-hydra>>
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-projectile-other-window (:color teal)
    "projectile-other-window"
    ("f"  projectile-find-file-other-window        "file")
    ("g"  projectile-find-file-dwim-other-window   "file dwim")
    ("d"  projectile-find-dir-other-window         "dir")
    ("b"  projectile-switch-to-buffer-other-window "buffer")
    ("q"  nil                                      "cancel" :color blue))

  (defhydra hydra-projectile (:color teal
                                     :hint nil)
    "
         PROJECTILE: %(projectile-project-root)

         Find File            Search/Tags          Buffers                Cache
    ------------------------------------------------------------------------------------------
    _s-f_: file            _a_: ag                _i_: Ibuffer           _c_: cache clear
     _ff_: file dwim       _b_: switch to buffer  _x_: remove known project
     _fd_: file curr dir   _o_: multi-occur     _C-k_: Kill all buffers  _X_: cleanup non-existing
      _h_: helm-projectile _r_: replace regexp                         ^^^^_z_: cache current
      _d_: dir
      _R_: run

    "
    ("R"	 projectile-run-project)
    ("a"   projectile-ag)
    ("b"   projectile-switch-to-buffer)
    ("c"   projectile-invalidate-cache)
    ("d"   projectile-find-dir)
    ("s-f" projectile-find-file)
    ("ff"  projectile-find-file-dwim)
    ("fd"  projectile-find-file-in-directory)
    ("i"   projectile-ibuffer)
    ("K"   projectile-kill-buffers)
    ("h"   helm-projectile)
    ("C-k" projectile-kill-buffers)
    ("m"   projectile-multi-occur)
    ("o"   projectile-multi-occur)
    ("s-p" projectile-switch-project "switch project")
    ("p"   projectile-switch-project)
    ("s"   projectile-switch-project)
    ("r"   counsel-ag)
    ("R"   counsel-ag)
    ("x"   projectile-remove-known-project)
    ("X"   projectile-cleanup-known-projects)
    ("z"   projectile-cache-current-file)
    ("`"   hydra-projectile-other-window/body "other window")
    ("q"   nil "cancel" :color blue))

  (global-set-key (kbd "s-p") (function hydra-projectile/body))
 #+END_SRC
* PACKAGE Projectile with Helm  =C-c p=
Keep reading here: https://tuhdo.github.io/helm-projectile.html
** Dependencies
#+BEGIN_SRC emacs-lisp
  (my/add-dependency "ag")
 #+END_SRC

| =ag= aka =the_silver_searcher= | used by projectile to search cross project |
** PACKAGE Init
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :ensure t
    :init (my/add-to-package-list 'helm-projectile)
    (helm-projectile-on)
    (setq projectile-completion-system 'helm)
                                          ; fast, but does not work on windows
    (setq projectile-indexing-method 'alien))
 #+END_SRC
** Default switching of projects
#+BEGIN_SRC emacs-lisp
  (setq projectile-switch-project-action 'helm-projectile)
 #+END_SRC
** PACKAGE Helm-ag
#+BEGIN_SRC emacs-lisp
  (use-package helm-ag
    :ensure t
    :init (my/add-to-package-list 'helm-ag))
 #+END_SRC
** Hydra
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-helm-projectile (:color teal
                                          :hint nil)
    "
         PROJECTILE: %(projectile-project-root)

         Find File               Projects               Search/Tags               Cache
    ------------------------------------------------------------------------------------------
    _h_:   all              _p_: switch-project   _a_: ag                 _z_:  cache-file
    _f_:   find-file        _R_:   run project      _g_: grep               _c_:  cache-clear
    _F_:   find-file-all    _C-k_: killl-buffers    _c_: ack
    _g_:   find-file-dwim   _x_:   remove project
    _d_:   find-dir         _X_:   cleanup non-existing
    _e_:   recentf
    _o_:   find-other-file
    _b_:   swithc-to-buffer
    _i_:   Ibuffer
    "
    ("h" helm-projectile)
    ("p" helm-projectile-switch-project)
    ("f" helm-projectile-find-file)
    ("F" helm-projectile-find-file-in-known-projects)
    ("g" helm-projectile-find-file-dwim)
    ("d" helm-projectile-find-dir)
    ("e" helm-projectile-recentf)
    ("o" helm-projectile-find-other-file)
    ("b" helm-projectile-switch-to-buffer)
    ("z" projectile-cache-current-file)
    ("c" projectile-invalidate-cache)
    ("g" helm-projectile-grep)
    ("a" helm-projectile-ag)
    ("c" helm-projectile-ack)
    ("R"	 projectile-run-project)
    ("i"   projectile-ibuffer)
    ("C-k" projectile-kill-buffers)
    ("x"   projectile-remove-known-project)
    ("X"   projectile-cleanup-known-projects)
    ("q"   nil "cancel" :color blue))

  (global-set-key (kbd "C-c p") (function hydra-helm-projectile/body))
 #+END_SRC
* Activate
#+BEGIN_SRC emacs-lisp
  (helm-mode)
  (ivy-mode)
  (ido-mode 1)
 #+END_SRC
