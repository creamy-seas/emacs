#+TITLE: Ricing the is not required but is nice
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

To get a list of pretty symbols run =(all-the-icons-insert)=
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode t)
 #+END_SRC
* All-the-icons
#+BEGIN_SRC emacs-lisp
  ;; fix docker-compose.yml not being set
  (add-to-list 'all-the-icons-icon-alist
               '("^\\.?docker-compose.yml" all-the-icons-fileicon "dockerfile" :face all-the-icons-blue))
  (add-to-list 'all-the-icons-icon-alist
               '("^\\.?Dockerfile" all-the-icons-fileicon "dockerfile" :face all-the-icons-blue))
  (add-to-list 'all-the-icons-icon-alist
               '("^\\.?adventure.*" all-the-icons-faicon "tripadvisor" :face all-the-icons-silver))
  (add-to-list 'all-the-icons-icon-alist
               '(".*cfg$" all-the-icons-material "settings" :face all-the-icons-blue))
  (add-to-list 'all-the-icons-icon-alist
               '(".*conf$" all-the-icons-material "settings" :face all-the-icons-blue))
 #+END_SRC
* Application window
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format "ðŸ¦‘")
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
 #+END_SRC
* Autoclosing brackets
#+BEGIN_SRC emacs-lisp
   (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\" . ?\")
                              ))

  (add-hook 'org-mode-hook 'electric-pair-mode)
  (add-hook 'emacs-lisp-mode-hook 'electric-pair-mode)
 #+END_SRC

** Disable autoclosing for latex
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTex-mode-hook (lambda ()
                               (setq-local electric-pair-inhibit-predicate
                                           `(lambda (c)
                                              (if (char-equal c ?{) t (,electric-pair-inhibit-predicate c))))))
 #+END_SRC
* Backup files
#+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
 #+END_SRC
* PACKAGE Beacon
Fades the current line
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (my/add-to-package-list 'beacon)
    (beacon-mode 1))
 #+END_SRC
* Bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
 #+END_SRC
* Borders
Remove the verical borders by setting blank colour
#+BEGIN_SRC emacs-lisp
  (set-face-foreground 'vertical-border (face-background 'default))
 #+END_SRC
* Buffers
** Always kill the current buffer
For some reason this is not the default way of killing buffers
#+BEGIN_SRC emacs-lisp
  (defun my/kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'my/kill-curr-buffer)
#+END_SRC
** Buffer name style
#+BEGIN_SRC emacs-lisp
  (setq uniquify-buffer-name-style 'post-forward)
 #+END_SRC
* Buffer navigation
** Moving in subwords
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** Moving with marks
#+BEGIN_SRC emacs-lisp
  (defun my/pop-local-mark-ring ()
    (interactive)
    (set-mark-command t))

  (defun my/unpop-to-mark-command ()
    "Unpop off mark ring. Does nothing if mark ring is empty."
    (interactive)
        (when mark-ring
          (setq mark-ring (cons (copy-marker (mark-marker)) mark-ring))
          (set-marker (mark-marker) (car (last mark-ring)) (current-buffer))
          (when (null (mark t)) (ding))
          (setq mark-ring (nbutlast mark-ring))
          (goto-char (marker-position (car (last mark-ring))))))

  (global-set-key (kbd "s-,") 'my/pop-local-mark-ring)
  (global-set-key (kbd "s-.") 'my/unpop-to-mark-command)
 #+END_SRC
** Close window - reopen windows with =C-x 1=
#+BEGIN_SRC emacs-lisp
  (use-package zygospore
    :ensure t
    :init (my/add-to-package-list 'zygospore))

  (global-set-key (kbd "C-x 1") 'zygospore-toggle-delete-other-windows)
 #+END_SRC
* Clock
#+BEGIN_SRC emacs-lisp
  ;; (display-time-mode 1)
#+END_SRC
* Column Fill
Set it to 78, so that on an 80-character interface there are 2 whitespaces
#+BEGIN_SRC emacs-lisp
  (setq fill-column 78)
 #+END_SRC
* Cursor
#+BEGIN_SRC emacs-lisp
  (set-default 'cursor-type 'hollow)
  (set-cursor-color "#ffd700")
 #+END_SRC
* PACKAGE Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :init (my/add-to-package-list 'dashboard)
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-navigator t)
    (setq dashboard-startup-banner (my/config-file-path-evaluate "my-files/dashboard/unaboomer.png"))
    (setq dashboard-banner-length 100)
    (setq dashboard-center-content t)
    (setq dashboard-banner-logo-title "ÐŸÑ€Ð¸Ð²ÐµÑ‚ Ð¾Ñ‚ Ð›ÐµÐ¾Ð½Ñ‚Ð°!"))

  (setq dashboard-items '((agenda . 8)
                          (recents  . 8)
                          (projects . 5)
                          (registers . 2)
                          (bookmarks . 5)))
 #+END_SRC
** PACKAGE Page-Break-Lines (for dashboard)
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :ensure t
    :init (my/add-to-package-list 'page-break-lines))
 #+END_SRC
* Emacs info
#+BEGIN_SRC emacs-lisp
  (define-key my/keymap (kbd "I") (function info-emacs-manual))
 #+END_SRC
* DOWN Emojify
People normally get (((triggered by it))) so it might be usefil to turn off the global hook
#+BEGIN_SRC emacs-lisp
  ;; (use-package emojify
  ;;   :ensure t
  ;;   :init (my/add-to-package-list 'emojify))

  ;; (add-hook 'after-init-hook #'global-emojify-mode)
 #+END_SRC
* PACKAGE Eyebrowse
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :ensure t
    :init (my/add-to-package-list 'eyebrowse)
    :config
    (eyebrowse-mode))

  (global-set-key (kbd "s-a") (function eyebrowse-switch-to-window-config-1))
  (global-set-key (kbd "s-s") (function eyebrowse-switch-to-window-config-2))
  (global-set-key (kbd "s-d") (function eyebrowse-switch-to-window-config-3))
  (global-set-key (kbd "s-f") (function eyebrowse-switch-to-window-config-4))
  (global-set-key (kbd "s-g") (function eyebrowse-switch-to-window-config-5))
 #+END_SRC

* MANUAL-PACKAGE Fonts and ligatures
Just read [[https://github.com/tonsky/FiraCode][this]] - one paragraph sums up:
/Your eye spends a non-zero amount of energy to scan, parse and join multiple characters into a single logical one/
** MANUAL-PACKAGE External setup
1. Run the following script (or =make install_fira=)
#+BEGIN_SRC text :tangle no
  git clone https://github.com/johnw42/fira-code-emacs
  cd fira-code-emacs
  make
  cp -f {fira-code-data.el,fira-code.el,ligature-font.el} ~/.emacs.d/manual_el/fira-code
 #+END_SRC
2. [@2] Then install the fonts from the =modified= directory to your system
** Select font
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(default ((t (:family "JetBrains Mono" :height 170))))
   ;; '(default ((t (:family "Fira Code" :height 170))))
   ;; '(default ((t (:family "Fira Emacs" :height 170))))
   ;; '(default ((t (:family "Inconsolata" :height 177))))
   )
 #+END_SRC
** Load ligatures
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat my/config-folder-location "manual_el/fira-code"))
  (condition-case nil
      (progn
        (require 'fira-code)
        (add-hook 'python-mode-hook (function fira-code-mode))
        (add-hook 'emacs-lisp-mode-hook (function fira-code-mode))
        (add-hook 'text-mode-hook (function fira-code-mode))
        (add-hook 'org-mode-hook (function fira-code-mode)))
    (error
     (warn ">>>>>>>>>> Install fira-code manually -> see '~/.emacs.d/ricing.org' or run 'make install_fira' <<<<<<<<<<")))
 #+END_SRC
* Generating test projects
#+BEGIN_SRC emacs-lisp
  (defvar my/templates
    (sort `("î¤¬ rust"
            "î¤¨ python"
            "î˜€ latex"
            ) 'string<))

  (defun my/generate-template ()
    "generate a blank template for the chosen language"
    (interactive)
    (let ((chosen-file (ido-completing-read "Language to generate: " my/templates))
          ;; (chosen-project-name (concat (format-time-string "%Y-%m-%d_") (read-string "Name of the test project: "))))
          (chosen-project-name (read-string "Name of the test project: ")))
      (message chosen-project-name)
      (cond (
             (string= chosen-file "î¤¬ rust")
             (let ((temp-dir (concat "~/temp-and-test/rust/" chosen-project-name)))
               (shell-command (concat "mkdir -p " temp-dir " && cd " temp-dir "&& cargo init"))
               (find-file (concat temp-dir "/src/main.rs"))))

            ((string= chosen-file "î¤¨ python")
             (let ((temp-dir (concat "~/temp-and-test/python/" chosen-project-name)))
               (shell-command (concat "mkdir -p " temp-dir " && touch " temp-dir "/main.py"))
               (find-file (concat temp-dir "/main.py"))))

            ((string= chosen-file "î˜€ latex")
             (let* ((temp-dir (concat "~/temp-and-test/latex/" chosen-project-name))
                    (main-tex-file (concat temp-dir "/" chosen-project-name ".tex")))
               (shell-command (format "mkdir -p %s && cp -r %s %s && mv %s %s"
                                      temp-dir
                                      (my/config-file-path-evaluate "my-files/latex/*")
                                      temp-dir
                                      (concat temp-dir "/template.tex")
                                      main-tex-file))

               ;; Open file -> go to line 5 -> run compilation
               (find-file main-tex-file)
               (forward-line 5)
               (end-of-visual-line)
               (my/latex/compile))))))

  (define-key my/keymap (kbd "g") (function my/generate-template))
 #+END_SRC
* PACKAGE Golden Ratio
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :ensure t
    :init (my/add-to-package-list 'golden-ratio)
    ;; (golden-ratio-mode 1)
    )

  (add-to-list 'golden-ratio-exclude-modes 'treemacs-mode)
  (add-to-list 'golden-ratio-exclude-buffer-names "Treemacs")
  (add-to-list 'golden-ratio-exclude-buffer-regexp "Treemacs")
 #+END_SRC
* GPG prompt
Make emacs prompt for password in the minibuffer
#+BEGIN_SRC emacs-lisp
  (setq epa-pinentry-mode 'loopback)
 #+END_SRC
* PACKAGE Highlight brackets
#+BEGIN_SRC emacs-lisp
  (show-paren-mode)

  (use-package rainbow-delimiters
    :ensure t
    :init (my/add-to-package-list 'rainbow-delimiters)
    (rainbow-delimiters-mode 1)
    (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'org-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
 #+END_SRC
* Highlight undos
#+BEGIN_SRC emacs-lisp
  (use-package volatile-highlights
    :ensure t
    :init (my/add-to-package-list "volatile-highlights")
    (volatile-highlights-mode t))

  (vhl/define-extension 'undo-tree 'undo-tree-yank 'undo-tree-move)
  (vhl/install-extension 'undo-tree)
 #+END_SRC
* PACKAGE Key suggestion
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init (my/add-to-package-list 'which-key)
    (which-key-mode))
 #+END_SRC
* DOWN Ligatures
#+BEGIN_SRC emacs-lisp
  ;; (defun fira-code-mode--make-alist (list)
  ;;   "Generate prettify-symbols alist from LIST."
  ;;   (let ((idx -1))
  ;;     (mapcar
  ;;      (lambda (s)
  ;;        (setq idx (1+ idx))
  ;;        (let* ((code (+ #Xe100 idx))
  ;;               (width (string-width s))
  ;;               (prefix ())
  ;;               (suffix '(?\s (Br . Br)))
  ;;               (n 1))
  ;;          (while (< n width)
  ;;            (setq prefix (append prefix '(?\s (Br . Bl))))
  ;;            (setq n (1+ n)))
  ;;          (cons s (append prefix suffix (list (decode-char 'ucs code))))))
  ;;      list)))

  ;; (defconst fira-code-mode--ligatures
  ;;   '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
  ;;     "{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
  ;;     "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
  ;;     "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
  ;;     ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
  ;;     "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
  ;;     "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
  ;;     "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
  ;;     ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
  ;;     "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
  ;;     "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
  ;;     "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
  ;;     "x" ":" "+" "+" "*"))

  ;; (defvar fira-code-mode--old-prettify-alist)

  ;; (defun fira-code-mode--enable ()
  ;;   "Enable Fira Code ligatures in current buffer."
  ;;   (setq-local fira-code-mode--old-prettify-alist prettify-symbols-alist)
  ;;   (setq-local prettify-symbols-alist (append (fira-code-mode--make-alist fira-code-mode--ligatures) fira-code-mode--old-prettify-alist))
  ;;   (prettify-symbols-mode t))

  ;; (defun fira-code-mode--disable ()
  ;;   "Disable Fira Code ligatures in current buffer."
  ;;   (setq-local prettify-symbols-alist fira-code-mode--old-prettify-alist)
  ;;   (prettify-symbols-mode -1))

  ;; (define-minor-mode fira-code-mode
  ;;   "Fira Code ligatures minor mode"
  ;;   :lighter " Fira Code"
  ;;   (setq-local prettify-symbols-unprettify-at-point 'right-edge)
  ;;   (if fira-code-mode
  ;;       (fira-code-mode--enable)
  ;;     (fira-code-mode--disable)))

  ;; (defun fira-code-mode--setup ()
  ;;   "Setup Fira Code Symbols"
  ;;   (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol"))

  ;; (provide 'fira-code-mode)
  ;; (add-hook 'prog-mode-hook (function fira-code-mode))
 #+END_SRC
* Line highlight
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC
* Prettify-symbols
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode 1)
  (setq prettify-symbols-unprettify-at-point t)
#+END_SRC
* Menus, Popups
** About Emacs  =C-h C-a=
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-about-emacs ()
    "
  About Emacs                                                        [_q_] quit
  ^^---------------------------------------------------------------------------
           PID:    %s(emacs-pid)
        Uptime:    %s(emacs-uptime)
     Init time:    %s(emacs-init-time)
     Directory:    %s(identity user-emacs-directory)
  Invoked from:    %s(concat invocation-directory invocation-name)
       Version:    %s(identity emacs-version)

  User Info
  ^^---------------------------------------------------------------------------
     User name:    %s(user-full-name)
  Login (real):    %s(user-login-name) (%s(user-real-login-name))
    UID (real):    %s(user-uid) (%s(user-real-uid))
    GID (real):    %s(group-gid) (%s(group-real-gid))
  Mail address:    %s(identity user-mail-address)
  "
    ("q" nil nil))

  (global-set-key (kbd "C-h C-a") #'hydra-about-emacs/body)
 #+END_SRC
** System Info                                                  :NotWorking:
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-system-info ()
    "
  System Info                                                        [_q_] quit
  ^^---------------------------------------------------------------------------
      System name:    %s(system-name)
      System type:    %s(identity system-type)
    System config:    %s(identity system-configuration)

  Memory
  ^^---------------------------------------------------------------------------
             Used:    %s(format \"%0.0f percent\"
                                (* 100 (- 1 (/ (cl-second (memory-info))
                                               (float (cl-first (memory-info)))))))
         Free RAM:    %s(format \"%0.1f GB (of %0.1f GB)\"
                                (/ (float (cl-second (memory-info))) 1048576)
                                (/ (float (cl-first (memory-info))) 1048576))
        Free swap:    %s(format \"%0.1f GB (of %0.1f GB)\"
                                (/ (float (cl-fourth (memory-info))) 1048576)
                                (/ (float (cl-third (memory-info))) 1048576))
      Pure memory:    %s(format \"%0.1f GB\" (/ (float pure-bytes-used) 1048576))

  Garbage Collection
  ^^---------------------------------------------------------------------------
         GCs done:    %`gcs-done
      GCs elapsed:    %s(format-seconds \"%M, %S\" gc-elapsed)
   Cons threshold:    %`gc-cons-threshold
  Cons percentage:    %`gc-cons-percentage
  "
    ("q" nil nil))

  (global-set-key (kbd "C-h C-s") #'hydra-system-info/body)
 #+END_SRC
* PACKAGE Modeline
** Doom modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (my/add-to-package-list 'doom-modeline))
  (doom-modeline-mode)

  ;; If the actual char height is larger, it respects the actual height.
  (setq doom-modeline-height 14)

  ;; How wide the mode-line bar should be. It's only respected in GUI.
  (setq doom-modeline-bar-width 3)

  ;; How to detect the project root.
  ;; The default priority of detection is `ffip' > `projectile' > `project'.
  ;; nil means to use `default-directory'.
  ;; The project management packages have some issues on detecting project root.
  ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
  ;; to hanle sub-projects.
  ;; You can specify one if you encounter the issue.
  ;; (setq doom-modeline-project-detection 'project)

  ;; Determines the style used by `doom-modeline-buffer-file-name'.
  ;;
  ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
  ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
  ;;   truncate-with-project => emacs/l/comint.el
  ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
  ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
  ;;   truncate-all => ~/P/F/e/l/comint.el
  ;;   relative-from-project => emacs/lisp/comint.el
  ;;   relative-to-project => lisp/comint.el
  ;;   file-name => comint.el
  ;;   buffer-name => comint.el<2> (uniquify buffer name)
  ;;
  ;; If you are expereicing the laggy issue, especially while editing remote files
  ;; with tramp, please try `file-name' style.
  ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
  (setq doom-modeline-buffer-file-name-style 'truncate-all)

  ;; Whether display icons in mode-line or not.
  (setq doom-modeline-icon (display-graphic-p))

  ;; Whether display the icon for major mode. It respects `doom-modeline-icon'.
  (setq doom-modeline-major-mode-icon t)

  ;; Whether display color icons for `major-mode'. It respects
  ;; `doom-modeline-icon' and `all-the-icons-color-icons'.
  (setq doom-modeline-major-mode-color-icon t)

  ;; Whether display icons for buffer states. It respects `doom-modeline-icon'.
  (setq doom-modeline-buffer-state-icon t)

  ;; Whether display buffer modification icon. It respects `doom-modeline-icon'
  ;; and `doom-modeline-buffer-state-icon'.
  (setq doom-modeline-buffer-modification-icon t)

  ;; Whether display minor modes in mode-line or not.
  (setq doom-modeline-minor-modes (featurep 'minions))

  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count nil)

  ;; Whether display buffer encoding.
  (setq doom-modeline-buffer-encoding nil)

  ;; Whether display indentation information.
  (setq doom-modeline-indent-info nil)

  ;; If non-nil, only display one number for checker information if applicable.
  (setq doom-modeline-checker-simple-format t)

  ;; The maximum displayed length of the branch name of version control.
  (setq doom-modeline-vcs-max-length 12)

  ;; Whether display perspective name or not. Non-nil to display in mode-line.
  (setq doom-modeline-persp-name t)

  ;; Whether display icon for persp name. Nil to display a # sign. It respects `doom-modeline-icon'
  (setq doom-modeline-persp-name-icon nil)

  ;; Whether display `lsp' state or not. Non-nil to display in mode-line.
  (setq doom-modeline-lsp t)

  ;; Whether display GitHub notifications or not. Requires `ghub` package.
  (setq doom-modeline-github t)

  ;; The interval of checking GitHub.
  (setq doom-modeline-github-interval (* 30 60))

  ;; Whether display mu4e notifications or not. Requires `mu4e-alert' package.
  (setq doom-modeline-mu4e t)

  ;; Whether display irc notifications or not. Requires `circe' package.
  (setq doom-modeline-irc t)

  ;; Function to stylize the irc buffer names.
  (setq doom-modeline-irc-stylize 'identity)

  ;; Whether display environment version or not
  (setq doom-modeline-env-verion nil)
  ;; Or for individual languages
  (setq doom-modeline-env-enable-python nil)
  (setq doom-modeline-env-enable-ruby t)
  (setq doom-modeline-env-enable-perl t)
  (setq doom-modeline-env-enable-go t)
  (setq doom-modeline-env-enable-elixir t)
  (setq doom-modeline-env-enable-rust t)

  ;; Change the executables to use for the language version string
  (setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
  (setq doom-modeline-env-ruby-executable "ruby")
  (setq doom-modeline-env-perl-executable "perl")
  (setq doom-modeline-env-go-executable "go")
  (setq doom-modeline-env-elixir-executable "iex")
  (setq doom-modeline-env-rust-executable "rustc")

  ;; What to dispaly as the version while a new one is being loaded
  (setq doom-modeline-env-load-string "...")

  ;; Hooks that run before/after the modeline version string is updated
  (setq doom-modeline-before-update-env-hook nil)
  (setq doom-modeline-after-update-env-hook nil)
 #+END_SRC
** DOWN Powerline
#+BEGIN_SRC emacs-lisp
  ;; (use-package powerline
  ;;   :ensure t
  ;;   :init
  ;;   (powerline-default-theme)
  ;;   (setq ns-use-srgb-colorspace nil))

  ;; (setq powerline-default-separator 'box)
 #+END_SRC
** DOWN Spaceline
#+BEGIN_SRC emacs-lisp
  ;; (use-package spaceline
  ;;   :ensure t
  ;;   :config
  ;;   (require 'spaceline-config)
  ;;   (setq powerline-default-separator (quote arrow))
  ;;   (setq ns-use-srgb-colorspace nil)
  ;;   (spaceline-spacemacs-theme))
#+END_SRC
** DOWN Smart modeline
smart mode line allows infinite customization
*** main setup
#+BEGIN_SRC emacs-lisp
  ;; (use-package smart-mode-line
  ;;   :ensure t
  ;;   :init
  ;;   (use-package smart-mode-line-powerline-theme
  ;;     :ensure t)
  ;;   (setq size-indication-mode t)
  ;;   (setq sml/shorten-directory t)
  ;;   (setq sml/no-confirm-load-theme t)
  ;;   (setq sml/shorten-modes t)
  ;;   (sml/setup))
 #+END_SRC
*** naming
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'sml/replacer-regexp-list '("^.*config.*$" ":ED:") t)
  ;; (add-to-list 'sml/replacer-regexp-list '("^.*config\\.org$" ":ED:") t)
  ;; (custom-set-variables
  ;;  '(sml/col-number-format "")
  ;;  '(sml/extra-filler -2)
  ;;  '(sml/line-number-format "")
  ;;  '(sml/mule-info "")
  ;;  '(sml/modified-char "â˜¦ï¸Ž")
  ;;  '(sml/name-width (quote (20 . 40)))
  ;;  '(sml/read-only-char "â˜§")
  ;;  '(sml/pos-minor-modes-separator " á›‹á›‹")
  ;;  '(sml/pre-minor-modes-separator "á›‹á›‹")
  ;;  )
 #+END_SRC
*** coloring
#+BEGIN_SRC emacs-lisp
  ;; (custom-set-faces
  ;;  '(sml/filename ((t (:inherit mode-line-buffer-id :foreground "#eab700" :weight bold)))) ;file name
  ;;  '(sml/prefix ((t (:foreground "#eab700")))) ;shortennings
  ;;  '(sml/folder ((t (:foreground "#505040" :weight normal)))) ;folder
  ;;  '(sml/global ((t (:foreground "white")))) ;most things on line
  ;;  '(sml/position-percentage ((t (:foreground "white")))) ;percentageof buffer
  ;;  '(sml/remote ((t (:foreground "red")))) ;local or remote load
  ;;  '(sml/git ((t (:foreground "white"))))	;github
  ;;  '(sml/vc-edited ((t (:foreground "white")))) ;github
  ;;  '(sml/modes ((t (:foreground "#1eafe1" :weight bold :box (:line-width 1 :color "#2d379a" :style pressed-button))))) ;major mode
  ;;  '(sml/minor-modes ((t (:foreground "#1eafe1")))) ;major mode
  ;;  '(sml/process ((t (:foreground "red")))) ;github
  ;;  '(mode-line ((t (:background "#2d379a" :foreground "#1eafe1" :box nil))))
  ;;  '(mode-line-inactive ((t (:foreground "#1eafe1" :background "#1d679a" :box nil))))
  ;;  )

  ;;    '(sml/charging ((t (:inherit s
  ;;                                ml/global :foreground "ForestGreen" :underline t))))
  ;;  '(sml/client ((t (:inherit sml/prefix :underline t))))
  ;;  '(sml/col-number ((t (:inherit sml/global :underline t))))
  ;;  '(sml/discharging ((t (:inherit sml/global :foreground "Red" :underline t))))
 #+END_SRC
** PACKAGE Battery
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat my/config-folder-location "manual_el/fancy-battery-0.2"))
  (use-package fancy-battery
    :diminish
    :init (my/add-to-package-list 'fancy-battery)
    :config
    (setq battery-update-interval 15)
    (display-battery-mode))
 #+END_SRC
** Colour
#+BEGIN_SRC emacs-lisp
  ;; (custom-set-faces
  ;;  '(mode-line ((t
  ;;                (:background "selectedControlColor"
  ;;                 :foreground "DeepSkyBlue1")))))
 #+END_SRC
* Packages Menu
[[file:essential-config.org::*=my/package-upgrade=][Depends on the function =my/package-upgrade=]]

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-package (:color blue)
    "
  Packages                                                           [_q_] quit
  ^^---------------------------------------------------------------------------
  [_d_] describe
  [_i_] install
  [_l_] list
  [_L_] list (no fetch)
  [_U_] upgrade all
  "
  ("d" describe-package nil)
  ("i" package-install nil)
  ("l" package-list-packages nil)
  ("L" package-list-packages-no-fetch nil)
  ("U" my/package-upgrade nil)
  ("q" nil nil))

  (define-key my/keymap (kbd "P") (function hydra-package/body))
 #+END_SRC
* MANUAL-PACKAGE Rainbow mode
Colourize codes such as #AF3313
** Init
#+BEGIN_SRC emacs-lisp
  (my/add-to-package-list 'rainbow-mode)
  (add-to-list 'load-path (my/config-file-path-evaluate "manual_el/rainbow-mode-1.0.1"))
  (require 'rainbow-mode)
  (rainbow-mode)
 #+END_SRC
** Global Rainbow mode
#+BEGIN_SRC emacs-lisp
  ;; (define-globalized-minor-mode my-global-rainbow-mode rainbow-mode
  ;;   (lambda () (rainbow-mode 1)))

  ;; (my-global-rainbow-mode 1)
 #+END_SRC
* PACKAGE Scratch buffer
** Default load
#+BEGIN_SRC emacs-lisp
  ;; (setq initial-major-mode 'org-mode)
  (setq initial-scratch-message (concat
                                 "#+Title: Persistent Scratch Buffer"))
 #+END_SRC
** Reopen closed scratch
#+BEGIN_SRC emacs-lisp
  (defun my/scratch ()
    "create a scratch buffer"
    (interactive)
    (switch-to-buffer-other-window (get-buffer-create "*scratch*"))
    (insert initial-scratch-message)
    (emacs-lisp-mode))

(define-key my/keymap (kbd "S") (function my/scratch))
 #+END_SRC
** PACKAGE Save scratch when emacs closes
#+BEGIN_SRC emacs-lisp
  (use-package persistent-scratch
    :ensure t
    :init (my/add-to-package-list 'persistent-scratch)
    :config
    (persistent-scratch-setup-default))
 #+END_SRC
* MANUAL-PACKAGE Theme
** PACKAGE Authemer
#+BEGIN_SRC emacs-lisp
  (use-package autothemer
    :ensure t
    :init (my/add-to-package-list 'autothemer))
 #+END_SRC
** =my/add-to-theme-hashmap=
#+BEGIN_SRC emacs-lisp
  (defvar my/theme-hashmap (make-hash-table :test 'equal))

  (defun my/add-to-theme-hashmap (theme-with-quote &optional load-path-from-base-dir)
    "Adds theme to my-theme-hashmap so that is available for selection"
    (puthash (format "%s" theme-with-quote) theme-with-quote my/theme-hashmap)
    (if (equal load-path-from-base-dir nil)
        ()
      (add-to-list 'custom-theme-load-path (my/config-file-path-evaluate load-path-from-base-dir))
      (add-to-list 'load-path (my/config-file-path-evaluate load-path-from-base-dir))))
 #+END_SRC
** Add the themes
   #+BEGIN_SRC emacs-lisp
     (my/add-to-theme-hashmap 'rippedcasts "my-themes/rippedcasts")
     (my/add-to-theme-hashmap 'gruvbox-dark-hard "my-themes/gruvbox-theme-20200622.58")
     (my/add-to-theme-hashmap 'gruvbox-dark-medium)
     (my/add-to-theme-hashmap 'gruvbox-dark-soft)
     (my/add-to-theme-hashmap 'gruvbox-light-hard)
     (my/add-to-theme-hashmap 'gruvbox-light-medium)
     (my/add-to-theme-hashmap 'gruvbox-light-soft)
     (my/add-to-theme-hashmap 'gruvbox)
     (my/add-to-theme-hashmap 'alect-light "my-themes/alect-themes")
     (my/add-to-theme-hashmap 'alect-light-alt)
     (my/add-to-theme-hashmap 'alect-dark-alt)
     (my/add-to-theme-hashmap 'alect-black-alt)
     (my/add-to-theme-hashmap 'sanityinc-tomorrow-blue "my-themes/color-theme-sanityinc-tomorrow")
     (my/add-to-theme-hashmap 'sanityinc-tomorrow-night)
     (my/add-to-theme-hashmap 'sanityinc-tomorrow-day)
     (my/add-to-theme-hashmap 'sanityinc-tomorrow-bright)
     (my/add-to-theme-hashmap 'brutalist "my-themes/brutalist-theme-20181023.1222")
     (my/add-to-theme-hashmap 'doom-vibrant "my-themes/doom-themes-20200325.1249")
     (my/add-to-theme-hashmap 'dracula "my-themes/dracula-theme-1.7.0")
     (my/add-to-theme-hashmap 'leuven "my-themes/leuven-theme-20200122.1934")
     (my/add-to-theme-hashmap 'clues "my-themes/clues-theme-1.0.1")
     (my/add-to-theme-hashmap 'leuven-dark)
     (my/add-to-theme-hashmap 'deeper-blue)
     (my/add-to-theme-hashmap 'zenburn "my-themes/zenburn-theme-2.6")
     (my/add-to-theme-hashmap 'material "my-themes/material-theme-1.2")
     (my/add-to-theme-hashmap 'material-light)
   #+END_SRC
** =my/theme-disable-all=
#+BEGIN_SRC emacs-lisp
  (defun my/theme-disable-all ()
    "Disabled all active themes"
    (interactive)
    (let ((iter-themes custom-enabled-themes))
      (while iter-themes
        (message (format "Disabling %s" (car iter-themes)))
        (disable-theme (car iter-themes))
        (setq iter-themes (cdr iter-themes)))))
 #+END_SRC
** =my/theme-select=
#+BEGIN_SRC emacs-lisp
  (defun my/theme-select ()
    "Quickly set a desired theme"
    (interactive)

    (let ((chosen-theme (ido-completing-read "ï‡¼ Theme to set: " (hash-table-keys my/theme-hashmap))))

      ;; 1 - disable active theme to avoid clashes
      (my/theme-disable-all)

      ;; 2 - set chosen theme
      (message (format "ï‡¼ Setting '%s' theme" chosen-theme))
      (load-theme (gethash chosen-theme my/theme-hashmap) t)

      ;; 3 - save in file
      (with-temp-file (my/config-file-path-evaluate "support_files/persistent/theme.txt")
        (insert chosen-theme))))

  (define-key my/keymap (kbd "T") (function my/theme-select))
#+END_SRC
** Hook to change the theme if in org mode
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'post-command-hook (lambda ()
  ;;                                (if (eq major-mode 'org-mode)
  ;;                                    (progn
  ;;                                      (message "î¤— Changing to leuven")
  ;;                                      (my/theme-disable-all)
  ;;                                      (load-theme 'leuven t)))))
 #+END_SRC
** =my/theme-load=
   #+BEGIN_SRC emacs-lisp
     (defun my/theme-load ()
       "Load up the theme in the persistent theme file (saved session to session)"
       (my/theme-disable-all)
       (let ((chosen-theme (my/read-string-from-file (my/config-file-path-evaluate "support_files/persistent/theme.txt"))))
         (message (format "ï‡¼ Setting '%s' theme" chosen-theme))
         (load-theme (gethash chosen-theme my/theme-hashmap) t)))

     (my/theme-load)
   #+END_SRC
* PACKAGE Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :init (my/add-to-package-list 'treemacs)
    :config
                                          ; a bit too wide
    (setq treemacs-width 30)
    (define-key my/keymap (kbd "D") (function treemacs-add-and-display-current-project))
    (define-key treemacs-mode-map (kbd "j") (function treemacs-next-line))
    (define-key treemacs-mode-map (kbd "k") (function treemacs-previous-line)))


 #+END_SRC
* Toggling modes
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-toggle (:color amaranth)
    "
  Appearance                                                         [_q_] quit
  ^^---------------------------------------------------------------------------
  [_r_] rainbow-mode:               %s(if (boundp 'rainbow-mode) rainbow-mode 'nil)
  [_w_] whitespace-mode:            %s(if (boundp 'whitespace-mode) whitespace-mode 'nil)
  [_g_] golden-ratio-mode     %s(if (boundp 'golden-ratio-mode) golden-ratio-mode 'nil)

  Debug
  ^^---------------------------------------------------------------------------
  [_d_] debug-on-error:             %`debug-on-error

  Editing
  ^---------------------------------------------------------------------------
  [_%_] read-only-mode:             %`buffer-read-only
  [_f_] auto-fill-mode:             %`auto-fill-function
  [_s_] smartparens-mode:           %`smartparens-mode
  [_S_] smartparens-strict-mode:    %`smartparens-strict-mode
  [_t_] toggle-truncate-lines:      %`truncate-lines
  [_v_] visual-line-mode:           %`visual-line-mode

  Expansion
  ^^---------------------------------------------------------------------------
  [_y_] yas-global-mode:            %`yas-global-mode

  Spelling and Syntax
  ^^---------------------------------------------------------------------------
  [_c_] flycheck-mode:              %s(if (boundp 'flycheck-mode) flycheck-mode 'nil)
  [_p_] flyspell-mode:              %s(if (boundp 'flyspell-mode) flyspell-mode 'nil)
  [_P_] flyspell-prog-mode:         %s(if (boundp 'flyspell-prog-mode) flyspell-prog-mode 'nil)
  "
    ("%" read-only-mode nil)
    ("c" flycheck-mode nil)
    ("g" golden-ratio-mode nil)
    ("d" toggle-debug-on-error nil)
    ("f" auto-fill-mode nil)
    ("p" flyspell-mode nil)
    ("P" flyspell-prog-mode nil)
    ("r" rainbow-mode nil)
    ("s" smartparens-mode nil)
    ("S" smartparens-strict-mode nil)
    ("t" toggle-truncate-lines nil)
    ("v" visual-line-mode nil)
    ("w" whitespace-mode nil)
    ("q" nil nil :color blue)
    ("y" yas-global-mode nil))

  (define-key my/keymap "t" #'hydra-toggle/body)
 #+END_SRC
* MANUAL-PACKAGE Unicode
#+BEGIN_SRC emacs-lisp
  (my/add-dependency "Symbola")
  (when (member "Symbola" (font-family-list))
    (set-fontset-font t 'unicode "Symbola" nil 'prepend)
    (message "Using Symbola!"))
 #+END_SRC
* PACKAGE Windows
** PACKAGE Switch Window
When the there are more than two windows =C-x o= will give each window a letter that can be jumped to
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :init (my/add-to-package-list 'switch-window)
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 8)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-multiple-frames t)
    (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "g" "h" "j"))
    :bind
    ([remap other-window] . switch-window))

  (global-set-key (kbd "s-o") 'switch-window)

  ;; Ensures that it works with golden ratio
  ;; (defadvice golden-ration-after-switch-window (after switch-window activate)
  ;; (golden-ratio))
  (add-hook 'switch-window-finish-hook (function golden-ratio))



#+END_SRC

** Move cursor to newly generated window
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Splitting
#+BEGIN_SRC emacs-lisp
  (setq split-height-threshold 80)
  (setq split-width-threshold 160)
 #+END_SRC
** Scrolling other window
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-M-p") #'scroll-other-window-down)
  (global-set-key (kbd "C-M-n") #'scroll-other-window)
 #+END_SRC
* Wrapping lines
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode t)
 #+END_SRC
* Yes-No Alias
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
 #+END_SRC
