#+TITLE: Ricing the is not required but is nice
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

* Application window                                                 :Ricing:
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format "nsdap")
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
 #+END_SRC
* Autoclosing brackets                                               :Ricing:
#+BEGIN_SRC emacs-lisp
   (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\" . ?\")
                              ))

  (add-hook 'org-mode-hook 'electric-pair-mode)
  (add-hook 'emacs-lisp-mode-hook 'electric-pair-mode)
 #+END_SRC

** Disable autoclosing for latex
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTex-mode-hook (lambda ()
                               (setq-local electric-pair-inhibit-predicate
                                           `(lambda (c)
                                              (if (char-equal c ?{) t (,electric-pair-inhibit-predicate c))))))
 #+END_SRC
* Backup files
#+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
 #+END_SRC
* Bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
 #+END_SRC
* Borders
Remove the verical borders by setting blank colour
#+BEGIN_SRC emacs-lisp
  (set-face-foreground 'vertical-border (face-background 'default))
 #+END_SRC
* Buffers
** Always kill the current buffer
For some reason this is not the default way of killing buffers
#+BEGIN_SRC emacs-lisp
  (defun my/kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'my/kill-curr-buffer)
#+END_SRC
** Buffer name style
#+BEGIN_SRC emacs-lisp
  (setq uniquify-buffer-name-style 'post-forward)
 #+END_SRC
* Buffer navigation
** Moving in subwords
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** Moving with marks
#+BEGIN_SRC emacs-lisp
  (defun my/pop-local-mark-ring ()
    (interactive)
    (set-mark-command t))

  (defun my/unpop-to-mark-command ()
    "Unpop off mark ring. Does nothing if mark ring is empty."
    (interactive)
        (when mark-ring
          (setq mark-ring (cons (copy-marker (mark-marker)) mark-ring))
          (set-marker (mark-marker) (car (last mark-ring)) (current-buffer))
          (when (null (mark t)) (ding))
          (setq mark-ring (nbutlast mark-ring))
          (goto-char (marker-position (car (last mark-ring))))))

  (global-set-key (kbd "s-,") 'my/pop-local-mark-ring)
  (global-set-key (kbd "s-.") 'my/unpop-to-mark-command)
 #+END_SRC
* Buffer suggestion
buffer suggestion is given as a list in the terminal command (after C-x b)
*** enable ido mode
 #+BEGIN_SRC emacs-lisp
   (setq ido-enable-flex-matching nil)
   (setq ido-create-new-bffer 'always)
   (setq ido-everywhere t)
   (ido-mode 1)
 #+END_SRC
*** enable vertical mode for buffer suggestion
 #+BEGIN_SRC emacs-lisp
   (use-package ido-vertical-mode
     :ensure t
     :init (my/add-to-package-list 'ido-vertical-mode)
     :config
     (setq ido-vertical-define-keys 'C-n-and-C-p-only)
     (ido-vertical-mode 1))

 #+END_SRC
*** remap "C-x C-b" buffer switching to ido-switch-buffer
 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
 #+END_SRC
* Clock
#+BEGIN_SRC emacs-lisp
  ;; (display-time-mode 1)
#+END_SRC
* Column Fill
Set it to 78, so that on an 80-character interface there are 2 whitespaces
#+BEGIN_SRC emacs-lisp
  (setq fill-column 78)
 #+END_SRC
* Cursor
#+BEGIN_SRC emacs-lisp
  (set-default 'cursor-type 'hollow)
  (set-cursor-color "#ffd700")
 #+END_SRC
* Dashboard                                                         :Package:
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :init (my/add-to-package-list 'dashboard)
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 40)))
    (setq dashboard-startup-banner (my/config-file-path-evaluate "assets/unaboomer.png"))
    (setq dashboard-banner-length 300)
    (setq dashboard-banner-logo-title "Привет от Леонта!"))
 #+END_SRC
* Fonts
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(default ((t (:family "JetBrains Mono" :height 170))))
   (custom-set-faces '(eldoc-highlight-function-argument ((t (:inherit font-lock-variable-name-face)))))
   '(default ((t (:family "Inconsolata" :height 170))))
   '(default ((t (:family "Fira Code" :height 170))))
   ;; `(popup-scroll-bar-background-face ((t (:background "#189a1e1224a2"))))
   ;; `(popup-scroll-bar-foreground-face ((t (:background "#41bf505b61e3"))))
   ;; `(popup-face ((t (:background "#41bf505b61e3" :foreground "white"))))
   ;; selection on autocomplete
   ;; `(popup-menu-selection-face ((t (:background "orange2" :foreground "#3a3a6e" :weight semibold))))
   ;; rest of autocomplete
   ;; `(popup-menu-face ((t (:inherit default :background "#41bf505b61e3"))))
   ;; `(popup-menu-summary-face ((t (:inherit default :background "#41bf505b61e3"))))
   )

 #+END_SRC
* Fullscreen
#+BEGIN_SRC emacs-lisp
  (toggle-frame-fullscreen)
 #+END_SRC
* GPG prompt
Make emacs prompt for password in the minibuffer
#+BEGIN_SRC emacs-lisp
  (setq epa-pinentry-mode 'loopback)
 #+END_SRC
* Keeping system up to date
#+BEGIN_SRC emacs-lisp
  (defun my/stay-up-to-date ()
    "Ensure that OS and Emacs pacakges are up to date.
     Takes ~5 secons when everything is up to date."

    (if (string-equal system-type "darwin")
        (async-shell-command "/usr/local/bin/brew update && /usr/local/bin/brew upgrade"))

    (other-window 1)
    (rename-buffer "Keeping-system-up-to-date")

    (package-refresh-contents)
    (insert "Emacs packages have been updated.")

    (other-window 1))

  (add-hook 'after-init-hook 'my/stay-up-to-date)

  ;; For now, doing this since I'm also calling my/stay-up-to-date with
  ;; after-init-hook which hides the startup message.
  (add-hook 'after-init-hook 'display-startup-echo-area-message)
 #+END_SRC
* PACKAGE Highlight brackets
#+BEGIN_SRC emacs-lisp
  (show-paren-mode)

  (use-package rainbow-delimiters
    :ensure t
    :init (my/add-to-package-list 'rainbow-delimiters)
    (rainbow-delimiters-mode 1)
    (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'org-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
 #+END_SRC

* iBuffer
New buffer is opened in the window that the command was called from
** Init
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 (" Magit" (or
                             (name . "^.*gitignore$")
                             (name . "^magit.*$")))
                 (" Rust" (or
                             (mode . rust-mode)))
                 (" Jupyter" (or
                               (mode . "ein:notebooklist-mode")
                               (name . "\\*ein:.*")
                               ))
                 ("ᛥ Dired" (mode . dired-mode))
                 (" Python" (or
                              (mode . python-mode)
                              (mode . inferior-python-mode)
                              (name . "^\\*Python Doc\\*$")
                              (name . "^matplotlibrc$")
                              (name . "^.*mplstyle$")
                              (name . "^\\*Flycheck error messages\\*$")))
                 (" Latex" (or
                              (name . "^.*tex$")
                              (name . "^.*bib$")
                              (name . "^.*log$")
                              (name . "\\*RefTeX Select\\*")
                              (name . "^\\*toc\\*$")
                              (mode . comint-mode)))
                 (" Docker" (name . ".*[Dd]ock.*"))
                 (" Org" (name . "\\.org"))
                 (" eLisp" (name . "\\.el"))
                 (" Shell" (name . "\\.sh"))
                 (" PDF" (name . "\\.pdf"))
                 ("卍 Config" (name . "^\\..*$"))
                 (" Elfeed" (or
                              (name . "\\*elfeed.*\\*")
                              (name . "^ef.*$")))))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")
              (add-to-list `ibuffer-never-show-predicates "*Completions*")
              (add-to-list `ibuffer-never-show-predicates "*Help*")))

  ;; (" Emacs" (or
  ;;               (name . "^\\*scratch\\*$")
  ;;               (name . "^\\*Messages\\*$")
  ;;               (name . "^\\*Backtrace\\*$")))
  ;; ("卍 Horter" (or
  ;;               (name . "^\\*dashboard\\*$")
  ;;               (mode . emacs-lisp-mode)))
  ;;(add-to-list `ibuffer-never-show-predicates "*Completions*")
  ;;  (add-to-list `ibuffer-never-show-predicates "*Help*")
  ;; (add-to-list `ibuffer-never-show-predicates "*elfeed-log*")
#+END_SRC
** Column lengths
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-formats
        '((mark
           modified
           "   "
           (mode 20 30 :left)
           "   "
           ;; (size 9 -1 :right)
           (name 10 70 :left);; :elide)
           "   "
           )
                ;; " "
                ;; (mode 50 50 :left :elide)
                ;; " " filename-and-process)
          ;; (mark " "
                ;; (name 16 -1)
                ;; " " filename)
        ))
#+END_SRC
** Collapse by Default
#+BEGIN_SRC emacs-lisp
  (setq mp/ibuffer-collapsed-groups (list "Default" "*Internal*" "ᛓ Elfeed"))
  ;; (setq mp/ibuffer-collapsed-groups (list "*Internal*"))

  (defadvice ibuffer (after collapse-helm)
    (dolist (group mp/ibuffer-collapsed-groups)
            (progn
              (goto-char 1)
              (when (search-forward (concat "[ " group " ]") (point-max) t)
                (progn
                  (move-beginning-of-line nil)
                  (ibuffer-toggle-filter-group)
                  )
                )
              )
            )
      (goto-char 1)
      (search-forward "[ " (point-max) t)
    )
 #+END_SRC

* PACKAGE Key suggestion
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init (my/add-to-package-list 'which-key)
    (which-key-mode))
 #+END_SRC
* Line highlight
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
  (set-face-background 'hl-line "#3e4446")
  (set-cursor-color "yellow")
#+END_SRC
* Menus, Popups
** About Emacs
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-about-emacs ()
    "
  About Emacs                                                        [_q_] quit
  ^^---------------------------------------------------------------------------
           PID:    %s(emacs-pid)
        Uptime:    %s(emacs-uptime)
     Init time:    %s(emacs-init-time)
     Directory:    %s(identity user-emacs-directory)
  Invoked from:    %s(concat invocation-directory invocation-name)
       Version:    %s(identity emacs-version)

  User Info
  ^^---------------------------------------------------------------------------
     User name:    %s(user-full-name)
  Login (real):    %s(user-login-name) (%s(user-real-login-name))
    UID (real):    %s(user-uid) (%s(user-real-uid))
    GID (real):    %s(group-gid) (%s(group-real-gid))
  Mail address:    %s(identity user-mail-address)
  "
    ("q" nil nil))

  (global-set-key (kbd "C-h C-a") #'hydra-about-emacs/body)
 #+END_SRC
** System Info                                                  :NotWorking:
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-system-info ()
    "
  System Info                                                        [_q_] quit
  ^^---------------------------------------------------------------------------
      System name:    %s(system-name)
      System type:    %s(identity system-type)
    System config:    %s(identity system-configuration)

  Memory
  ^^---------------------------------------------------------------------------
             Used:    %s(format \"%0.0f percent\"
                                (* 100 (- 1 (/ (cl-second (memory-info))
                                               (float (cl-first (memory-info)))))))
         Free RAM:    %s(format \"%0.1f GB (of %0.1f GB)\"
                                (/ (float (cl-second (memory-info))) 1048576)
                                (/ (float (cl-first (memory-info))) 1048576))
        Free swap:    %s(format \"%0.1f GB (of %0.1f GB)\"
                                (/ (float (cl-fourth (memory-info))) 1048576)
                                (/ (float (cl-third (memory-info))) 1048576))
      Pure memory:    %s(format \"%0.1f GB\" (/ (float pure-bytes-used) 1048576))

  Garbage Collection
  ^^---------------------------------------------------------------------------
         GCs done:    %`gcs-done
      GCs elapsed:    %s(format-seconds \"%M, %S\" gc-elapsed)
   Cons threshold:    %`gc-cons-threshold
  Cons percentage:    %`gc-cons-percentage
  "
    ("q" nil nil))

  (global-set-key (kbd "C-h C-s") #'hydra-system-info/body)
 #+END_SRC
* PACKAGE Modeline
run (all-the-icons-install-fonts) to install the fonts for the modeline
** Doom modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (my/add-to-package-list 'doom-modeline))
  (doom-modeline-mode)

  ;; If the actual char height is larger, it respects the actual height.
  (setq doom-modeline-height 14)

  ;; How wide the mode-line bar should be. It's only respected in GUI.
  (setq doom-modeline-bar-width 3)

  ;; How to detect the project root.
  ;; The default priority of detection is `ffip' > `projectile' > `project'.
  ;; nil means to use `default-directory'.
  ;; The project management packages have some issues on detecting project root.
  ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
  ;; to hanle sub-projects.
  ;; You can specify one if you encounter the issue.
  ;; (setq doom-modeline-project-detection 'project)

  ;; Determines the style used by `doom-modeline-buffer-file-name'.
  ;;
  ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
  ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
  ;;   truncate-with-project => emacs/l/comint.el
  ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
  ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
  ;;   truncate-all => ~/P/F/e/l/comint.el
  ;;   relative-from-project => emacs/lisp/comint.el
  ;;   relative-to-project => lisp/comint.el
  ;;   file-name => comint.el
  ;;   buffer-name => comint.el<2> (uniquify buffer name)
  ;;
  ;; If you are expereicing the laggy issue, especially while editing remote files
  ;; with tramp, please try `file-name' style.
  ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
  (setq doom-modeline-buffer-file-name-style 'truncate-all)

  ;; Whether display icons in mode-line or not.
  (setq doom-modeline-icon (display-graphic-p))

  ;; Whether display the icon for major mode. It respects `doom-modeline-icon'.
  (setq doom-modeline-major-mode-icon t)

  ;; Whether display color icons for `major-mode'. It respects
  ;; `doom-modeline-icon' and `all-the-icons-color-icons'.
  (setq doom-modeline-major-mode-color-icon t)

  ;; Whether display icons for buffer states. It respects `doom-modeline-icon'.
  (setq doom-modeline-buffer-state-icon t)

  ;; Whether display buffer modification icon. It respects `doom-modeline-icon'
  ;; and `doom-modeline-buffer-state-icon'.
  (setq doom-modeline-buffer-modification-icon t)

  ;; Whether display minor modes in mode-line or not.
  (setq doom-modeline-minor-modes (featurep 'minions))

  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count nil)

  ;; Whether display buffer encoding.
  (setq doom-modeline-buffer-encoding nil)

  ;; Whether display indentation information.
  (setq doom-modeline-indent-info nil)

  ;; If non-nil, only display one number for checker information if applicable.
  (setq doom-modeline-checker-simple-format t)

  ;; The maximum displayed length of the branch name of version control.
  (setq doom-modeline-vcs-max-length 12)

  ;; Whether display perspective name or not. Non-nil to display in mode-line.
  (setq doom-modeline-persp-name t)

  ;; Whether display icon for persp name. Nil to display a # sign. It respects `doom-modeline-icon'
  (setq doom-modeline-persp-name-icon nil)

  ;; Whether display `lsp' state or not. Non-nil to display in mode-line.
  (setq doom-modeline-lsp t)

  ;; Whether display GitHub notifications or not. Requires `ghub` package.
  (setq doom-modeline-github t)

  ;; The interval of checking GitHub.
  (setq doom-modeline-github-interval (* 30 60))

  ;; Whether display mu4e notifications or not. Requires `mu4e-alert' package.
  (setq doom-modeline-mu4e t)

  ;; Whether display irc notifications or not. Requires `circe' package.
  (setq doom-modeline-irc t)

  ;; Function to stylize the irc buffer names.
  (setq doom-modeline-irc-stylize 'identity)

  ;; Whether display environment version or not
  (setq doom-modeline-env-verion nil)
  ;; Or for individual languages
  (setq doom-modeline-env-enable-python nil)
  (setq doom-modeline-env-enable-ruby t)
  (setq doom-modeline-env-enable-perl t)
  (setq doom-modeline-env-enable-go t)
  (setq doom-modeline-env-enable-elixir t)
  (setq doom-modeline-env-enable-rust t)

  ;; Change the executables to use for the language version string
  (setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
  (setq doom-modeline-env-ruby-executable "ruby")
  (setq doom-modeline-env-perl-executable "perl")
  (setq doom-modeline-env-go-executable "go")
  (setq doom-modeline-env-elixir-executable "iex")
  (setq doom-modeline-env-rust-executable "rustc")

  ;; What to dispaly as the version while a new one is being loaded
  (setq doom-modeline-env-load-string "...")

  ;; Hooks that run before/after the modeline version string is updated
  (setq doom-modeline-before-update-env-hook nil)
  (setq doom-modeline-after-update-env-hook nil)
 #+END_SRC
** DOWN Powerline
#+BEGIN_SRC emacs-lisp
  ;; (use-package powerline
  ;;   :ensure t
  ;;   :init
  ;;   (powerline-default-theme)
  ;;   (setq ns-use-srgb-colorspace nil))

  ;; (setq powerline-default-separator 'box)
 #+END_SRC
** DOWN Spaceline
#+BEGIN_SRC emacs-lisp
  ;; (use-package spaceline
  ;;   :ensure t
  ;;   :config
  ;;   (require 'spaceline-config)
  ;;   (setq powerline-default-separator (quote arrow))
  ;;   (setq ns-use-srgb-colorspace nil)
  ;;   (spaceline-spacemacs-theme))
#+END_SRC
** DOWN Smart modeline
smart mode line allows infinite customization
*** main setup
#+BEGIN_SRC emacs-lisp
  ;; (use-package smart-mode-line
  ;;   :ensure t
  ;;   :init
  ;;   (use-package smart-mode-line-powerline-theme
  ;;     :ensure t)
  ;;   (setq size-indication-mode t)
  ;;   (setq sml/shorten-directory t)
  ;;   (setq sml/no-confirm-load-theme t)
  ;;   (setq sml/shorten-modes t)
  ;;   (sml/setup))
 #+END_SRC
*** naming
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'sml/replacer-regexp-list '("^.*config.*$" ":ED:") t)
  ;; (add-to-list 'sml/replacer-regexp-list '("^.*config\\.org$" ":ED:") t)
  ;; (custom-set-variables
  ;;  '(sml/col-number-format "")
  ;;  '(sml/extra-filler -2)
  ;;  '(sml/line-number-format "")
  ;;  '(sml/mule-info "")
  ;;  '(sml/modified-char "☦︎")
  ;;  '(sml/name-width (quote (20 . 40)))
  ;;  '(sml/read-only-char "☧")
  ;;  '(sml/pos-minor-modes-separator " ᛋᛋ")
  ;;  '(sml/pre-minor-modes-separator "ᛋᛋ")
  ;;  )
 #+END_SRC
*** coloring
#+BEGIN_SRC emacs-lisp
  ;; (custom-set-faces
  ;;  '(sml/filename ((t (:inherit mode-line-buffer-id :foreground "#eab700" :weight bold)))) ;file name
  ;;  '(sml/prefix ((t (:foreground "#eab700")))) ;shortennings
  ;;  '(sml/folder ((t (:foreground "#505040" :weight normal)))) ;folder
  ;;  '(sml/global ((t (:foreground "white")))) ;most things on line
  ;;  '(sml/position-percentage ((t (:foreground "white")))) ;percentageof buffer
  ;;  '(sml/remote ((t (:foreground "red")))) ;local or remote load
  ;;  '(sml/git ((t (:foreground "white"))))	;github
  ;;  '(sml/vc-edited ((t (:foreground "white")))) ;github
  ;;  '(sml/modes ((t (:foreground "#1eafe1" :weight bold :box (:line-width 1 :color "#2d379a" :style pressed-button))))) ;major mode
  ;;  '(sml/minor-modes ((t (:foreground "#1eafe1")))) ;major mode
  ;;  '(sml/process ((t (:foreground "red")))) ;github
  ;;  '(mode-line ((t (:background "#2d379a" :foreground "#1eafe1" :box nil))))
  ;;  '(mode-line-inactive ((t (:foreground "#1eafe1" :background "#1d679a" :box nil))))
  ;;  )

  ;;    '(sml/charging ((t (:inherit s
  ;;                                ml/global :foreground "ForestGreen" :underline t))))
  ;;  '(sml/client ((t (:inherit sml/prefix :underline t))))
  ;;  '(sml/col-number ((t (:inherit sml/global :underline t))))
  ;;  '(sml/discharging ((t (:inherit sml/global :foreground "Red" :underline t))))
 #+END_SRC
** PACKAGE Battery
#+BEGIN_SRC emacs-lisp
  (use-package fancy-battery
    :diminish
    :init (my/add-to-package-list 'fancy-battery)
    :config
    (setq battery-update-interval 15)
    (display-battery-mode))
 #+END_SRC
** Colour
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(mode-line ((t
                 (:background "selectedControlColor"
                  :foreground "DeepSkyBlue1")))))
 #+END_SRC
* DOMINATED Packages Menu                                              :Menu:
** Install missing packages
#+BEGIN_SRC emacs-lisp
  (defun *-package-upgrade ()
    "Refresh, upgrade and delete obsolete packages synchronously."
    (interactive)
    (save-window-excursion
      (let (package-menu-async)
        (package-list-packages)))
    (with-current-buffer "*Packages*"
      (package-menu-mark-upgrades)
      (package-menu-mark-obsolete-for-deletion)
      (condition-case err
          (package-menu-execute t)
        ;; Don't barf if there is nothing to do
        (user-error (message "Nothing to do"))
        ;; But allow other errors through
        (error (signal (car err) (cdr err))))))
 #+END_SRC
** Package hydra
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-package (:color blue)
    "
  Packages                                                           [_q_] quit
  ^^---------------------------------------------------------------------------
  [_d_] describe
  [_i_] install
  [_l_] list
  [_L_] list (no fetch)
  [_U_] upgrade all
  "
  ("d" describe-package nil)
  ("i" package-install nil)
  ("l" package-list-packages nil)
  ("L" package-list-packages-no-fetch nil)
  ("U" *-package-upgrade nil)
  ("q" nil nil))

  (define-key my/keymap (kbd "p") (function hydra-package/body))
 #+END_SRC
* DOMINATED Startup
** Do not show startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC
** Maximise to full screen
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
* PACKAGE Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'deeper-blue)
  ;; (load-theme 'doom-vibrant)
 #+END_SRC
** PACKAGE Extra themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :init (my/add-to-package-list 'doom-themes))
 #+END_SRC
* DOMINATED Toggling modes
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-toggle (:color amaranth)
    "
  Appearance                                                         [_q_] quit
  ^^---------------------------------------------------------------------------
  [_r_] rainbow-mode:               %s(if (boundp 'rainbow-mode) rainbow-mode 'nil)
  [_w_] whitespace-mode:            %s(if (boundp 'whitespace-mode) whitespace-mode 'nil)

  Debug
  ^^---------------------------------------------------------------------------
  [_d_] debug-on-error:             %`debug-on-error

  Editing
  ^---------------------------------------------------------------------------
  [_%_] read-only-mode:             %`buffer-read-only
  [_f_] auto-fill-mode:             %`auto-fill-function
  [_s_] smartparens-mode:           %`smartparens-mode
  [_S_] smartparens-strict-mode:    %`smartparens-strict-mode
  [_t_] toggle-truncate-lines:      %`truncate-lines
  [_v_] visual-line-mode:           %`visual-line-mode

  Expansion
  ^^---------------------------------------------------------------------------
  [_y_] yas-global-mode:            %`yas-global-mode

  Spelling and Syntax
  ^^---------------------------------------------------------------------------
  [_c_] flycheck-mode:              %s(if (boundp 'flycheck-mode) flycheck-mode 'nil)
  [_p_] flyspell-mode:              %s(if (boundp 'flyspell-mode) flyspell-mode 'nil)
  [_P_] flyspell-prog-mode:         %s(if (boundp 'flyspell-prog-mode) flyspell-prog-mode 'nil)
  "
    ("%" read-only-mode nil)
    ("c" flycheck-mode nil)
    ("d" toggle-debug-on-error nil)
    ("f" auto-fill-mode nil)
    ("p" flyspell-mode nil)
    ("P" flyspell-prog-mode nil)
    ("r" rainbow-mode nil)
    ("s" smartparens-mode nil)
    ("S" smartparens-strict-mode nil)
    ("t" toggle-truncate-lines nil)
    ("v" visual-line-mode nil)
    ("w" whitespace-mode nil)
    ("q" nil nil :color blue)
    ("y" yas-global-mode nil))

  (define-key my/keymap "t" #'hydra-toggle/body)
 #+END_SRC
* PACKAGE Windows
** PACKAGE Golden Ratio
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :ensure t
    :init (my/add-to-package-list 'golden-ratio)
    (golden-ratio-mode 1))
 #+END_SRC
** PACKAGE Switch Window
When the there are more than two windows =C-x o= will give each window a letter that can be jumped to
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :init (my/add-to-package-list 'switch-window)
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 8)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-multiple-frames t)
    (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "g" "h" "j"))
    :bind
    ([remap other-window] . switch-window))

  (global-set-key (kbd "s-o") 'switch-window)

  ;; Ensures that it works with golden ratio
  ;; (defadvice golden-ration-after-switch-window (after switch-window activate)
  ;; (golden-ratio))
  (add-hook 'switch-window-finish-hook (function golden-ratio))



#+END_SRC

** Move cursor to newly generated window
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Splitting
#+BEGIN_SRC emacs-lisp
  (setq split-height-threshold 80)
  (setq split-width-threshold 160)
 #+END_SRC
** Scrolling other window
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-M-p") #'scroll-other-window-down)
  (global-set-key (kbd "C-M-n") #'scroll-other-window)
 #+END_SRC
* DOMINATED Wrapping lines
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode t)
 #+END_SRC
* DOMINATED Yes-No Alias
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
 #+END_SRC
