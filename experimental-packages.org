#+TITLE: Experimental packages that do not fully work as expected
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

* Arsist mode
To dooble in a file
#+BEGIN_SRC emacs-lisp
  (add-hook 'artist-mode-hook
            (lambda ()
              (local-set-key (kbd "<f1>") 'org-mode)
              (local-set-key (kbd "<f2>") 'artist-select-op-pen-line) ; f2 = pen mode
              (local-set-key (kbd "<f3>") 'artist-select-op-line)     ; f3 = line
              (local-set-key (kbd "<f4>") 'artist-select-op-square)   ; f4 = rectangle
              (local-set-key (kbd "<f5>") 'artist-select-op-ellipse)  ; f5 = ellipse
  ))
 #+END_SRC
* DOWN Dumb Jump
Have either a =.git= or =.dumbjump= file in the main project directory
#+BEGIN_SRC emacs-lisp
  ;; (use-package dumb-jump
  ;;   :ensure t
  ;;   :bind (("M-g o" . dumb-jump-go-other-window)
  ;;          ("M-g j" . dumb-jump-go)
  ;;          ("M-g i" . dumb-jump-go-prompt)
  ;;          ("M-g x" . dumb-jump-go-prefer-external)
  ;;          ("M-g p" . dumb-jump-back)
  ;;          ("M-g z" . dumb-jump-go-prefer-external-other-window))
  ;;   :init (my/add-to-package-list 'dumb-jump)
  ;;   :config (setq dumb-jump-selector 'ivy))
 #+END_SRC

* PACKAGE Doc pop-up
#+BEGIN_SRC emacs-lisp
  (use-package quick-peek
    :ensure t
    :init (my/add-to-package-list 'quick-peek))

  (set-face-attribute 'quick-peek-border-face nil :height 50)

  (defmacro *-make-doc-command (doc-fun sym-fun)
    "Return an command that uses `quick-peek' to preview docs.

  DOC-FUN is a unary function that takes a loop-up string and
  returns the doc string.

  SYM-FUN is a nullary function that gets the symbol at point as a
  string."
    `(lambda ()
       (interactive)
       (let ((doc (funcall ,doc-fun (funcall ,sym-fun))))
         (if (string-empty-p doc)
             (message "Unknown symbol, or no documentation available.")
           (let ((map (make-sparse-keymap)))
             (set-transient-map map
                                (lambda ()
                                  (eq #'mwheel-scroll this-command))
                                (lambda ()
                                  (quick-peek-hide)
                                  (setq this-command #'ignore))))
           (let ((pos (save-excursion
                        (beginning-of-line)
                        (point))))
             (quick-peek-show doc pos nil (frame-height)))))))
 #+END_SRC

* DOWN Linum
Relative line numbering
#+BEGIN_SRC emacs-lisp
  ;; (use-package linum-relative
  ;;   :ensure t
  ;;   :hook
  ;;   (python-mode . linum-relative-mode-hook)
  ;;   (LaTeX-mode . linum-relative-mode-hook)
  ;;   :init (my/add-to-package-list 'linum-relative)
  ;;   (setq linum-relative-backend 'display-line-numbers-mode))
#+END_SRC
* DOWN Langtool
Grammar and style checker.
- Will need to download from https://languagetool.org/
#+BEGIN_SRC emacs-lisp
  ;; (setq my/langtool-location "/Applications/LanguageTool-4.8/languagetool-commandline.jar")
 #+END_SRC
** Init
#+BEGIN_SRC emacs-lisp
  ;; (use-package langtool
  ;;   :ensure t
  ;;   :init (my/add-to-package-list 'langtool)
  ;;   :config
  ;;   (setq langtool-language-tool-jar my/langtool-location))
 #+END_SRC
** Keybinding
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'langtool-error-exists-hook
  ;;           (lambda ()
  ;;             (langtool-correct-buffer)
  ;;             (langtool-check-done)))
  ;; (global-set-key "\M-^" 'langtool-check)
 #+END_SRC
* DOWN Ox-reveal
Presentations can be hosted from github - look at video no 50
#+BEGIN_SRC emacs-lisp
  ;; (use-package ox-reveal
  ;;   :ensure t
  ;;   :init (my/add-to-package-list 'ox-reveal)
  ;;   :config
  ;;   (require 'ox-reveal)
  ;;   (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  ;;   (setq org-reveal-mathjax t))
 #+END_SRC
* DOWN Pretty-mode
#+BEGIN_SRC emacs-lisp
  ;; (use-package pretty-mode
  ;;   :ensure t
  ;;   :init (my/add-to-package-list 'pretty-mode)
  ;;   :config
  ;;   (pretty-activate-groups
  ;;    '(:sub-and-superscripts :greek :arithmetic-nary)))
 #+END_SRC
* DOWN Smart-tabs
- Tabs are only used at the beginning of lines. Everything else, like ASCII art and tables, should be formatted with spaces.
- Tabs are only used for expressing the indentation level. One tab per “block” – any remaining whitespace is spaces only.
#+BEGIN_SRC emacs-lisp
  ;; (use-package smart-tabs-mode
  ;;   :ensure t
  ;;   :init (my/add-to-package-list 'smart-tabs-mode))
 #+END_SRC
* DOWN Highlight multiple
Highlight matching text
#+BEGIN_SRC emacs-lisp
  ;; (use-package mark-multiple
  ;;   :ensure t
  ;;   :bind ("C-c q" . mark-next-like-this)
  ;;   :init (my/add-to-package-list 'mark-multiple))
#+END_SRC
* DOWN Multiple Cursors
#+BEGIN_SRC emacs-lisp
  ;; (global-set-key (kbd "C-(") 'mc/mark-next-lines)
  ;; (global-set-key (kbd "C-)") 'mc/mark-previous-lines)
#+END_SRC
* DOWN Smex
Command line autocompletion
#+BEGIN_SRC emacs-lisp
  ;; (use-package smex
  ;; :ensure t
  ;; :init (my/add-to-package-list 'smex)
  ;; (smex-initialize))

  ;; (global-set-key (kbd "M-x") (function smex))
 #+END_SRC
* PACKAGE Sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :init (my/add-to-package-list 'sudo-edit)
    :bind ("s-e" . sudo-edit))
 #+END_SRC
* PACKAGE Wgrep
Allow editing of grep buffers after say =counsel-ag=
#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :ensure t
    :init (my/add-to-package-list 'wgrep))
 #+END_SRC
