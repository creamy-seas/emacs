#+TITLE: Personal config of orgmode

* Agenda view
#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands '(("c" "Simple agenda view"
                                    ((agenda ""
                                             ((org-agenda-skip-function '(org-agenda-skip-entry-if 'regexp ":drill:"))
                                              (org-agenda-prefix-format "%-12t% s")))))

                                   ("i" "My summary" (
                                                      (todo "MONEY" (
                                                                     (org-agenda-overriding-header "Money")
                                                                     (org-agenda-span 'fortnight)
                                                                     (org-agenda-prefix-format "%-12t%s")))
                                                      (todo "PHYS" (
                                                                    (org-agenda-sorting-strategy '(deadline-up))
                                                                    (org-agenda-span 'fortnight)
                                                                    (org-agenda-overriding-header "Quantum Physics!")
                                                                    (org-agenda-prefix-format "%-12t% s")))
                                                      (todo "TODO" (
                                                                    (org-agenda-span 20)
                                                                    (org-agenda-overriding-header "My goals")
                                                                    (org-agenda-prefix-format "%-12t% s")))
                                                      (todo "ANNUAL" (
                                                                      (org-agenda-span 'fortnight)
                                                                      (org-agenda-overriding-header "Incoming deadlines")
                                                                      (org-agenda-prefix-format "%-12t% s"))))
                                    nil nil)))
(defun my/open-my-summary ()
  (org-agenda "i"))

(after! org
  (global-set-key (kbd "C-c n i") 'my/open-my-summary))
#+END_SRC
* Org files to monitor

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files
      (
       list
       "~/creamy_seas/antlers.org"
       "~/creamy_seas/monday_starts_on_saturday/adventure_brief.org"
       "~/creamy_seas/monday_starts_on_saturday/power-meter/adventure_brief.org"
       "~/creamy_seas/drill.org"
       "~/creamy_seas/projects/mlperformance/adventure_brief.org"
       "~/creamy_seas/projects/arbitrage-hero/adventure_brief.org"
       ))
#+END_SRC
* Timestamp
#+BEGIN_SRC emacs-lisp
  (setq org-time-stamp-custom-formats '("<%d %b %Y>" . "<%d %b %Y %a %H:%M>"))
 #+END_SRC
* Capturing templates
Emacs/orgmode has an intense feature where you can quickly call upon templates to insert into your org files.

*The structure of the template is the following*:
- keymapping
- description
- file/org-id of where to insert the template. If using ids, you must include the file in [[*General Parameters][General Parameters]]
- template to insert

#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-capture-templates
      '(("b" "Bloat"
         entry
         (id "antlers-bloat")
         "** TODO %^{stuff-to-be-done}\nSCHEDULED: %^T")

        ("F" "Faculty Task"
         entry
         (id "faculty-tasks")
         "** TODO %^{stuff-to-be-done}\nSCHEDULED: %^T"
         :empty-lines-after 1)

        ("c" "Copy Pasta"
         entry
         (id "copy-pasta")
         "** %^{Pasta Title} %t\n%?")

        ("d" "Draft"
         plain
         (file "~/Desktop/.temp.org")
         "%?")

        ("x" "People")
        ("xe" "Ernest"
         entry
         (id "ernest")
         "** SKYPE Ernest: Catchup:\nDEADLINE: %^T"
         :empty-lines-after 1)

        ("xb" "Benjamin"
         entry
         (id "benjamin")
         "** SKYPE Benjamin: Catchup:\nDEADLINE: %^T"
         :empty-lines-after 1)

        ("xf" "Fred"
         entry
         (id "fred")
         "** SKYPE Fred: Catchup:\nDEADLINE: %^T"
         :empty-lines-after 1)

        ("xv" "Vlad"
         entry
         (id "vlad")
         "** SKYPE Vlad: Catchup:\nDEADLINE: %^T"
         :empty-lines-after 1)

        ("xm" "Milan"
         entry
         (id "milan")
         "** SKYPE Milan: Catchup:\nDEADLINE: %^T"
         :empty-lines-after 1)

        ("xs" "Sam"
         entry
         (id "sam")
         "** SKYPE Sam: Catchup:\nDEADLINE: %^T"
         :empty-lines-after 1)

        ("xa" "Alan"
         entry
         (id "alan")
         "** SKYPE Alan: Catchup:\nDEADLINE: %^T"
         :empty-lines-after 1)

        ("xi" "Vivian"
         entry
         (id "vivian")
         "** SKYPE Vivian: Catchup:\nDEADLINE: %^T"
         :empty-lines-after 1)

        ("xh" "Heili"
         entry
         (id "heili")
         "** SKYPE Heili: Catchup:\nDEADLINE: %^T"
         :empty-lines-after 1)


        ("l" "Boomer Entry"
         item
         (file+headline "~/creamy_seas/1488.org.gpg" "Becoming a boomer")
         "%^{What did Luke say} %^G\n%?"
         (file "~/creamy_seas/1488.org.gpg")
         "%?")

        ("p" "PhD Tasks")

        ("pp" "Photon"
         entry
         (id "phd-photon")
         "*** PHYS %^{stuff-to-be-done} [/] :PHOTON:\nDEADLINE: %^T\n- [ ] %?")

        ("pl" "Laboratory"
         entry
         (file "~/creamy_seas/monday_starts_on_saturday/lab-results/log_file.org")
         "*** PHYS %^{stuff-to-be-done} [/] :MEASUREMENT:\nDEADLINE: %^T\n- [ ] %?")

        ("pq" "CQPS"
         entry
         (id "phd-cqps")
         "*** PHYS %^{stuff-to-be-done} [/] :CQPS:\nDEADLINE: %^T\n- [ ] %?")

        ("pg" "General"
         entry
         (id "phd-general")
         "*** PHYS %^{stuff-to-be-done} [/] :GENERAL:\nDEADLINE: %^T\n- [ ] %?")

        ("u" "Save URL"
         entry
         (file+headline "~/creamy_seas/1488.org.gpg" "URL too good to throw away")
         "** %^L %? %^G"
         :kill-buffer t)

        ("s" "Stories"
         entry (id "stories")
         "** %^{Title} %t\n%?"
         :empty-lines-after 1))))
#+END_SRC
** Drills
#+begin_src emacs-lisp
(after! org
  (my/org/add-to-capture '("A" "Democracy: The God that Failed"
                           entry
                           (id "drill-dem")
                           "** %^{Title} :drill:
    :PROPERTIES:
    :END:
 Added: %U
,*** Definition
%?
"
                           ))
  (my/org/add-to-capture '("M" "Myth"
                           entry
                           (id "drill-myth")
                           "** %^{Title} :drill:
    :PROPERTIES:
    :END:
 Added: %U
,*** Definition
%?
"
                           ))
  (my/org/add-to-capture '("L" "Lord of the Rings"
                           entry
                           (id "drill-lotr")
                           "** %^{Title} :drill:
    :PROPERTIES::
    :END:
 Added: %U
,*** Definition
%?
"
                           ))
  (my/org/add-to-capture '("D" "Dune"
                           entry
                           (id "drill-dune")
                           "** %^{Title} :drill:
    :PROPERTIES::
    :END:
Added: %U
,*** Definition
%?
"
                           ))
  (my/org/add-to-capture '("C" "Church"
                           entry
                           (id "drill-church")
                           "** %^{Title} :drill:
    :PROPERTIES::
    :END:
Added: %U
,*** Definition
%?
"
                           ))
  (my/org/add-to-capture '("S" "Stoicism"
                           entry
                           (id "drill-stoic")
                           "** %^{Title} :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
Added: %U
,*** Definition
%?"
                           ))
  )
#+end_src

#+RESULTS:
| S | Stoicism | entry | (id drill-stoic) | ** %^{Title} :drill: |

* Org keywords =C-c C-t=
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-todo-keywords '((sequence "TODO(t)"
                                    "BLOAT(B)"
                                    ;; "BRYAN(z)"
                                    "PHD(q)"
                                    "PHYS(p)"
                                    "APPLICATION(a)"
                                    "ANNUAL(h)"
                                    ;; "SA36(3)"
                                    ;;"HOUSE(h)"
                                    ;; "SCHOOLS"
                                    ;;"DOWN(D)"
                                    ;; "TUTORING(l)"
                                    ;; "CURRENT(c)"
                                    ;; "SKYPE(s)"
                                    ;;"SINO"
                                    ;;"REACH"
                                    "MONEY(m)"
                                    "|"
                                    "DONE(d)"
                                    ;;"DOMINATED(x)"
                                    "PACKAGE"
                                    ;; "MANUAL-PACKAGE"
                                    "CONFIG"
                                    ;;"BUREUCRACY(b)"
                                    )))
  (setq org-todo-keyword-faces (quote (
                                     ("STARTED" . "yellow")
                                     ("CURRENT" . (:foreground "#ffff0a" :background "#754ec1" :weight bold))
                                     ("DREAMS-AI" . (:foreground "#68c3c1" :background "#fdc989" :weight bold))
                                     ("APPLICATION" . (:foreground "#68c3c1" :background "#fdc989" :weight bold))
                                     ;; ("SA36" . (:background "#01168a" :foreground "#fdc989" :weight bold))
                                     ("MONEY" . (:background "#000000" :foreground "#ffd700" :weight bold))
                                     ;; ("SKYPE" . (:background "#00AFF0" :foreground "#ffffff" :weight bold))
                                     ;;("SINO" . (:background "#ffe7ba" :foreground "#3d3d3d" :weight bold))
                                     ("ANNUAL" . (:background "#68c3c1" :foreground "#fdc989" :weight bold))
                                     ;;("REACH" . (:background "#68c3c1" :foreground "#fdc989" :weight bold))
                                     ;;("HOUSE" . (:background "#68c3c1" :foreground "#fdc989" :weight bold))
                                     ("PHD" . (:foreground "yellow" :background "#FF3333"))
                                     ("PHYS" . (:foreground "yellow" :background "#FF3333"))
                                     ;;("DOWN" . (:foreground "yellow" :background "#FF3333"))
                                     ;;("DONE" . (:foreground "yellow" :background "#FF3333"))
                                     ;; ("SCHOOLS" . (:foreground "#090C42" :background "#9DFE9D"))
                                     ;;("Dominated" . (:foreground "#9DFE9D" :weight bold))
                                     ("BLOAT" . (:foreground "#000001" :background "#ffffff"))
                                     ;; ("TUTORING" . (:foreground "#090C42" :background "#FFD700": weight bold))
                                     ;; ("BRYAN" . (:foreground "#090C42" :background "#33ccff" :weight bold))
                                     ("PACKAGE" . (:background "#00AFF0" :foreground "#ffffff" :weight bold))
                                     ("CONFIG" . (:background "#00AFF0" :foreground "#090C42" :weight bold))
                                     ;;("BUREUCRACY" . (:background "#ab82ff" :foreground "#8b6969" :weight bold))
                                     )))
  (setq org-agenda-span 15)
  )
#+END_SRC
