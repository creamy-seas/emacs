#+TITLE: Python configuration
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

For a nice pyplot experience, copy over the [[./my-files/python/my_pyplot.mplstyle]] file into your python folder and include
#+BEGIN_SRC python :tangle no
  from matplotlib import pyplot as plt
  plt.style.use('./my_pyplot.mplstyle')
#+END_SRC

Or, use one of the system styles
#+BEGIN_SRC python :tangle no
  from matplotlib import pyplot as plt
  print(plt.style.available)
  plt.style.use('chosen-style-as-string')
 #+END_SRC

* CONFIG Personal Configuration
#+BEGIN_SRC emacs-lisp
  (defvar my/python/venv-folder "~/.config/python_vi" "Location of folder with the venv (I hope you have just one)")
  (setq pyvenv-default-virtual-env-name "/Users/CCCP/.config/python_vi")
  ;; (defvar my/python/pylintrc "~/.pylintrc" "Location of the pyling configuration file")
 #+END_SRC
* External setup

|------------+-----------------------------------------------------------+---------------------|
| =pylint=   | code checking and suggestion according to [[https://www.python.org/dev/peps/pep-0008/][PEP8]] guidelines |                     |
| =jedi=     | documentation                                             |                     |
| =flake8=   | code checking and formatting                              | worse than =pylint= |
| =black=    | code formatting                                           |                     |
|------------+-----------------------------------------------------------+---------------------|
| =ipython3= | kernel                                                    | buggy               |
| =yapf=     | code formatiing                                           | bloat               |
| =rope=     | refactoring library                                       | bloat               |
|------------+-----------------------------------------------------------+---------------------|
** Best way for venv
#+BEGIN_SRC shell :tangle no
  pip install virtualenv
  pip install virtualenvwrapper
 #+END_SRC

Set these in =.profile= or =.zsh=
#+BEGIN_SRC text :tangle no
  export WORKON_HOME=$HOME/.config/python_vi
  export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3.7
  export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv
  # export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'
  source /usr/local/bin/virtualenvwrapper.sh
#+END_SRC
where =WORKON_HOME= is the default location of venv

Then create venv
#+BEGIN_SRC shell :tangle no
 mkvirtualenv --python=python3.7 test
 #+END_SRC
* General Parameters
#+BEGIN_SRC emacs-lisp
  (setq python-indent-offset 4)
 #+END_SRC
* Code formatting
Activate one or the other. Never both.
** DOWN Autopep8 (=flake8=)
#+BEGIN_SRC emacs-lisp
  ;; (use-package py-autopep8
  ;;   :ensure t
  ;;   :hook (elpy-mode . py-autopep8-enable-on-save)
  ;;   :init (my/add-to-package-list 'py-autopep8))
 #+END_SRC
** PACKAGE Black (=black=)
#+BEGIN_SRC emacs-lisp
  (use-package blacken
    :ensure t
    :init (my/add-to-package-list 'blacken)
    (add-hook 'python-mode-hook (function blacken-mode)))
 #+END_SRC
* PACKAGE Elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init (my/add-to-package-list 'elpy)
    :config
    (elpy-enable)

    (setq elpy-shell-starting-directory 'project-root)
                                          ; remove a warming about native completion
    (setq python-shell-completion-native-enable nil)
                                          ; remove flymake checking -> flycheck is the new best friend
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)))
 #+END_SRC
* PACKAGE Flycheck/Pylint
[[https://www.flycheck.org/en/latest/languages.html#python][Flycheck manual]] gives some details about python
#+BEGIN_SRC emacs-lisp
  ;; (require 'flycheck)
  ;; (add-hook 'python-mode-hook (lambda ()
  ;;                               (flycheck-mode 1)
  ;;                               (setq flycheck-checker 'python-pylint
  ;;                                     flycheck-checker-error-threshold 900
  ;;                                     ;; flycheck-pylintrc my/python/pylintrc
  ;;                                     flycheck-pylint-use-symbolic-id nil)))
 #+END_SRC
* PACKAGE Hideshow-org  =C-c C-h=
** PACKAGE Init
Allows collapsing of columns
#+BEGIN_SRC emacs-lisp
  (use-package hideshow-org
    :ensure t
    :init (my/add-to-package-list 'hideshow-org)
    :config
    (add-hook 'elpy-mode-hook 'hs-minor-mode))
 #+END_SRC

** PACKAGE Hydra
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-python-hideshow
    (:color pink				;all colors pink by default
            :timeout 1488
            :hint nil
            :foreign-keys run		;when non hydra keys are pressed, keep it open
            :pre (progn(			;what to do when hydra is on
                        set-cursor-color "#40e0d0"))
            :post (progn			;hydro turned off
                    (set-cursor-color "#ffd700")
                    (message
                     "‚Ü™ 13 percent of the population accounts for 50 percent of the crime rate")))
    "
    ^Hide^                        ^Show^
    ^^^^^^^^------------------------------------
    _a_: all                      _A_: All
    _b_: block                    _B_: Block
    _l_: level

    "
    ("a" hs-hide-all)
    ("A" hs-show-all)
    ("l" hs-hide-level)
    ("b" hs-hide-block)
    ("B" hs-show-block)
    ;; ("[TAB]" hs-toggle-hiding "toggle hiding")
    ("t" hs-toggle-hiding "toggle hiding")
    ("q" nil "quit")
    )

  (define-key elpy-mode-map (kbd "C-c C-h") (function hydra-python-hideshow/body))
 #+END_SRC
* DOWN LSP
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'elpy-mode-hook #'lsp)
 #+END_SRC
* Prettify Symbols
Replaces letters in programming mode
#+BEGIN_SRC emacs-lisp
  (defvar my/prettify-symbol-list-python
    '(
      ("def" .      #x2131)
      ("in" .       #x2208)
      ("not in" .   #x2209)
      ("return" .   #x27fc)
      ("yield" .    #x27fb)
      ("for" .      #x2200)
      ;; Base Types
      ("int" .      #x2124)
      ("float" .    #x211d)
      ("str" .      #x1d54a)
      ("True" .     #x1d54b)
      ("False" .    #x1d53d)
      ;; Mypy
      ("Dict" .     #x1d507)
      ("List" .     #x2112)
      ("Tuple" .    #x2a02)
      ("Set" .      #x2126)
      ("Iterable" . #x1d50a)
      ("Union" .    #x22c3)
      ))

  (when window-system
    (global-prettify-symbols-mode t)
    (add-hook
     'python-mode-hook
     (lambda ()
       (dolist (pair my/prettify-symbol-list-python)
         (push pair prettify-symbols-alist)))))

 #+END_SRC
* Virtualenv
** Set venv folder
#+BEGIN_SRC emacs-lisp
  (setenv "WORKON_HOME" my/python/venv-folder)
 #+END_SRC
** =my/python/activate-venv=
#+BEGIN_SRC emacs-lisp
  (defun my/python/activate-venv (python-environment-path)
    "Activate a particular environment from a path"
    (interactive)
    (progn
      (pyvenv-activate python-environment-path)
      (setq elpy-rpc-python-command "python3.7")
      (setq python-shell-interpreter "python3.7"
            python-shell-interpreter-args "-i")
      (pyvenv-restart-python)))
 #+END_SRC
** DOWN Hydra
#+BEGIN_SRC emacs-lisp
  ;; (defhydra hydra-python-vi (:color teal
  ;;                             :hint nil)
  ;;   "
  ;;      PYTHON ENVIRONMENT SELECTION
  ;; ^^^^^------------------------------------------------------------------------------------------
  ;; _p_: phd-vi                _r_: restart
  ;; _n_: neural-network-vi     _d_: devel_vi
  ;; _o_: pro_vi
  ;; _s_: scraping_vi
  ;; ^^
  ;; ^^
  ;; "
  ;;   ("p"   (ilya-pyenv-activate "~/creamy_seas/sync_files/python_vi/phd_vi"))
  ;;   ("o"   (ilya-pyenv-activate "~/creamy_seas/sync_files/python_vi/pro_vi"))
  ;;   ("n"   (ilya-pyenv-activate "~/creamy_seas/sync_files/python_vi/nn_vi"))
  ;;   ("s"   (ilya-pyenv-activate "~/creamy_seas/sync_files/python_vi/scraping_vi"))
  ;;   ("d"   (ilya-pyenv-activate "~/creamy_seas/sync_files/python_vi/devel_vi"))
  ;;   ("r"   pyvenv-restart-python)
  ;;   ("q"   nil "cancel" :color blue))

  ;; (global-set-key (kbd "<f9>") (function hydra-python-vi/body))
 #+END_SRC
** DOWN Hide virtualenv in modeline
#+BEGIN_SRC emacs-lisp
  ;; (setq pyvenv-mode-line-indicator nil)
 #+END_SRC
* Autoinsert
#+BEGIN_SRC emacs-lisp
  (define-skeleton my-skeleton/python/unittest
    "Testing out a docker config. Fist prompt is nil or it asks for user input"
    nil
                                          ; initial top line
    "import unittest" \n
    "from unittest.mock import Mock" \n
    "from unittest.mock import patch" \n
    \n
    \n

    "class Test" (skeleton-read "Input the test class name:") "(unittest.TestCase):"\n
    \n

    >"def setUp(self):"\n
    >"pass" - \n
    \n

    >"def tearDown(self):"\n
    >"pass"\n
    \n

    >"def test(self):"\n
    >"pass"\n
    \n
    \n

    -4 "if __name__ == \"__main__\":"\n
    "unittest.main()"
    )
 #+END_SRC
** Bind to buffer names
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-insert-alist '(
                                    ("test_.*\\.py\\'" . "[üêç Unittest template]")
                                    . my-skeleton/python/unittest))
 #+END_SRC
* Functions
** =my/python/interrupt=
#+BEGIN_SRC emacs-lisp
  (defun my/python/interrupt ()
    "Send an interrupt signal to python process"
    (interactive)
    (let ((proc (ignore-errors
                  (python-shell-get-process-or-error))))
      (when proc
        (interrupt-process proc))))

  (define-key elpy-mode-map (kbd "C-c C-k") (function my/python/interrupt))
 #+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
  (define-key elpy-mode-map (kbd "C-c C-j") (function elpy-shell-kill-all))
  (define-key elpy-mode-map (kbd "C-c C-n") (function flycheck-next-error))
  (define-key elpy-mode-map (kbd "C-c C-p") (function flycheck-previous-error))
  (define-key my/keymap (kbd "v") 'pyvenv-workon)
 #+END_SRC
* Pinject functions
** Snake-case
#+BEGIN_SRC emacs-lisp
  (defun my/python/pinject-copy-as-snake-case (beg end)
    "Copies the current selection and turns it into snake-case
    e.g. InquiryExtractor -> inquiry_extractor"
                                          ; beg = mark, point = end,
    (interactive (list (mark) (point)))

    (kill-new (my/string/convert-to-snake-case (buffer-substring beg end)))

    ;; This use of called-interactively-p is correct because the code it
    ;; controls just gives the user visual feedback.
    (if (called-interactively-p 'interactive)
        (indicate-copied-region))
    (setq deactivate-mark t))

  (defun my/string/convert-to-snake-case (source-string)
    "CamelCase -> camel_case"

    (let ((case-fold-search nil) ; do not ignore string case
          (target-string nil))
      ;; 1. Perform search
      (while (string-match "\\([A-Z][a-z0-9]*\\)" source-string)
        ;; 2. Extract string, lowercase it and append to list
        (let ((converted-section (downcase (match-string 1 source-string))))
          (if target-string
              (setq target-string (concat
                                   target-string
                                   "_"
                                   converted-section
                                   ))
            (setq target-string converted-section)))
        ;; 3. Cut the processed string
        (setq source-string (substring source-string (match-end 1))))
      target-string))
 #+END_SRC
** CamelCase
#+BEGIN_SRC emacs-lisp
  (defun my/python/pinject-copy-as-camel-case (beg end)
    "Copies the current selection and turns it into snake-case
    e.g. inquiry_extractor -> InquiryExtractor"
                                          ; beg = mark, point = end,
    (interactive (list (mark) (point)))

    (kill-new (my/string/convert-to-camel-case (buffer-substring beg end)))

    ;; This use of called-interactively-p is correct because the code it
    ;; controls just gives the user visual feedback.
    (if (called-interactively-p 'interactive)
        (indicate-copied-region))
    (setq deactivate-mark t))

  (defun my/string/convert-to-camel-case (source-string)
    "source_string -> SourceString"

    (let ((case-fold-search nil) ; do not ignore string case
          (target-string nil))
      ;; 1. Perform search
      (while (string-match "\\([A-Za-z][A-Za-z0-9]+\\)" source-string)
        ;; 2. Extract string, uppercase first
        (let ((converted-section (capitalize (format "%s" (match-string 1 source-string)))))
          (if target-string
              (setq target-string (concat
                                   target-string
                                   converted-section
                                   ))
            (setq target-string converted-section)))
        ;; 3. Cut the processed string
        (setq source-string (substring source-string (match-end 1))))
      target-string))
 #+END_SRC
** Bindings
#+BEGIN_SRC emacs-lisp
  (define-key elpy-mode-map (kbd "C-x c") #'my/python/pinject-copy-as-camel-case)
  (define-key elpy-mode-map (kbd "C-x s") #'my/python/pinject-copy-as-snake-case)
 #+END_SRC
