#+TITLE: Python configuration
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

Do not use ipython as it is very buggy
|-------------------------------+-----------------------------------------------+--------------------|
| =pylint=                      | used by flycheck                              |                    |
| =jedi=                        | autocompletion python (suggest names)         |                    |
| =autopep8=                    | format the code (indent etc). uses =flake8=   |                    |
| =flake8=                      | format the code (checks typos, syntax errors) | =~/.config/flake8= |
| =importmagic=                 | automatic imports                             |                    |
| =python-language-server[all]= |                                               |                    |
|-------------------------------+-----------------------------------------------+--------------------|
| =ipython3=                    | kernel                                        |                    |
| =yapf=                        | code formatiing                               |                    |
| =rope=                        | 'refactoring' library                         |                    |
|-------------------------------+-----------------------------------------------+--------------------|

* External setup
:PROPERTIES:
:VISIBILITY: folded
:END:
** =virtualenvwrapper=
*** os-x
#+BEGIN_SRC shell
  pip3 install virtualenv
  pip3 install virtualenvwrapper
  pip3 install virtualfish
 #+END_SRC
*** Arch
#+BEGIN_SRC shell
  sudo pacman -S python-virtualenvwrapper
 #+END_SRC
*** Configuration files
**** Fish (=config.sh=)
=eval (python3 -m virtualfish)=

Then you can
=vf new mac_vi=
**** Bash
#+BEGIN_SRC sh
  source /usr/bin/virtualenvwrapper.sh
#+END_SRC
** Setting up virtual environment
make virtual end with =mkvirtualenv NAME=
|------------------------------------+----------------------------------------------|
| =source NAMELOCATION/bin/activate= | activate an environment                      |
| =deactivate=                       | deactivate an environement                   |
| =workon NAME=                      | swtich environment                           |
| =lssitepackages=                   | list everything that is installed            |
| =pip install PACKAGENAME=          | install a package to the virtual environemnt |
| =echo $VIRTUAL_ENV=                | the currently activate virtual environment   |
|------------------------------------+----------------------------------------------|
* Default Python
#+BEGIN_SRC emacs-lisp
  (setq python-indent-offset 4)
 #+END_SRC
* PACKAGE Elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init (my/add-to-package-list 'elpy)
    :config
    (elpy-enable)
    (setq elpy-shell-starting-directory 'project-root)
                                          ; remove a warming about native completion
    (setq python-shell-completion-native-enable nil)
                                          ; remove flymake checking
    ;; (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    )
 #+END_SRC
* PACKAGE Autopep8
Automatically fix syntax errors upon saving
#+BEGIN_SRC emacs-lisp
  (use-package py-autopep8
    :ensure t
    :hook (elpy-mode . py-autopep8-enable-on-save)
    :init (my/add-to-package-list 'py-autopep8))
 #+END_SRC
* Flycheck setup
#+BEGIN_SRC emacs-lisp
  ;; (require 'flycheck)
  ;; (flycheck-add-next-checker 'python-flake8)

 #+END_SRC
* DOWN LSP
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'elpy-mode-hook #'lsp)
 #+END_SRC
* DOWN Blacken
Altenartive to autopep8
#+BEGIN_SRC emacs-lisp
  ;; (use-package blacken
  ;;   :ensure t
  ;;   :init (my/add-to-package-list 'blacken))
 #+END_SRC
* DOWN Yasnippet function
#+BEGIN_SRC emacs-lisp
  ;; (defun python-args-to-docstring-numpy ()
  ;;  "return docstring format for the python arguments in yas-text"
  ;;  (let* ((args (python-split-args yas-text))
  ;;         (format-arg (lambda(arg)
  ;;                       (concat "    " (nth 0 arg) " : " (if (nth 1 arg) ", optional") "\n")))
  ;;         (formatted-params (mapconcat format-arg args "\n"))
  ;;         (formatted-ret (mapconcat format-arg (list (list "out")) "\n    ")))
  ;;    (unless (string= formatted-params "")
  ;;      (mapconcat 'identity
  ;;                 (list "\n    Parameters\n    ----------" formatted-params
  ;;                       "\n    Returns\n    -------" formatted-ret)
  ;;                 "\n"))))
 #+END_SRC
* PACKAGE Hideshow-org
Allows collapsing of columns
#+BEGIN_SRC emacs-lisp
  (use-package hideshow-org
    :ensure t
    :init (my/add-to-package-list 'hideshow-org)
    :config
    (add-hook 'elpy-mode-hook 'hs-minor-mode))
** hydra-python-hideshow
  (defhydra hydra-python-hideshow
    (:color pink				;all colors pink by default
            :timeout 1488
            :hint nil
            :foreign-keys run		;when non hydra keys are pressed, keep it open
            :pre (progn(			;what to do when hydra is on
                        set-cursor-color "#40e0d0"))
            :post (progn			;hydro turned off
                    (set-cursor-color "#ffd700")
                    (message
                     "â†ª 13 percent of the population accounts for 50 percent of the crime rate")))
    "
  ^Hide^                        ^Show^
  ^^^^^^^^------------------------------------
  _a_: all                      _A_: All
  _b_: block                    _B_: Block
  _l_: level

  "
    ("a" hs-hide-all)
    ("A" hs-show-all)
    ("l" hs-hide-level)
    ("b" hs-hide-block)
    ("B" hs-show-block)
    ;; ("[TAB]" hs-toggle-hiding "toggle hiding")
    ("t" hs-toggle-hiding "toggle hiding")
    ("q" nil "quit")
    )

  (define-key elpy-mode-map (kbd "C-c C-h") (function hydra-python-hideshow/body))
 #+END_SRC
* Functions
** =my/python/interrupt=
#+BEGIN_SRC emacs-lisp
  (defun my/python/interrupt ()
    "Send an interrupt signal to python process"
    (interactive)
    (let ((proc (ignore-errors
                  (python-shell-get-process-or-error))))
      (when proc
        (interrupt-process proc))))

  (define-key elpy-mode-map (kbd "C-c C-k") (function my/python/interrupt))
 #+END_SRC
** =my/python/activate-venv=
#+BEGIN_SRC emacs-lisp
  (defun my/python/activate-venv (python-environment-path)
    "Activate a particular environment from a path"
    (interactive)
    (progn
      (pyvenv-activate python-environment-path)
      (setq elpy-rpc-python-command "python3.7")
      (setq python-shell-interpreter "python3.7"
            python-shell-interpreter-args "-i")
      (pyvenv-restart-python)))
 #+END_SRC
*** hydra-python-vi
#+BEGIN_SRC emacs-lisp
  ;; (defhydra hydra-python-vi (:color teal
  ;;                             :hint nil)
  ;;   "
  ;;      PYTHON ENVIRONMENT SELECTION
  ;; ^^^^^------------------------------------------------------------------------------------------
  ;; _p_: phd-vi                _r_: restart
  ;; _n_: neural-network-vi     _d_: devel_vi
  ;; _o_: pro_vi
  ;; _s_: scraping_vi
  ;; ^^
  ;; ^^
  ;; "
  ;;   ("p"   (ilya-pyenv-activate "~/creamy_seas/sync_files/python_vi/phd_vi"))
  ;;   ("o"   (ilya-pyenv-activate "~/creamy_seas/sync_files/python_vi/pro_vi"))
  ;;   ("n"   (ilya-pyenv-activate "~/creamy_seas/sync_files/python_vi/nn_vi"))
  ;;   ("s"   (ilya-pyenv-activate "~/creamy_seas/sync_files/python_vi/scraping_vi"))
  ;;   ("d"   (ilya-pyenv-activate "~/creamy_seas/sync_files/python_vi/devel_vi"))
  ;;   ("r"   pyvenv-restart-python)
  ;;   ("q"   nil "cancel" :color blue))

  ;; (global-set-key (kbd "<f9>") (function hydra-python-vi/body))
 #+END_SRC
* Hide virtualenv in modeline
#+BEGIN_SRC emacs-lisp
  ;; (setq pyvenv-mode-line-indicator nil)
 #+END_SRC
* Prettify Symbols
Replaces letters in programming mode
#+BEGIN_SRC emacs-lisp
  (defvar my/prettify-symbol-list-python
    '(
      ("def" .      #x2131)
      ("in" .       #x2208)
      ("not in" .   #x2209)
      ("return" .   #x27fc)
      ("yield" .    #x27fb)
      ("for" .      #x2200)
      ;; Base Types
      ("int" .      #x2124)
      ("float" .    #x211d)
      ("str" .      #x1d54a)
      ("True" .     #x1d54b)
      ("False" .    #x1d53d)
      ;; Mypy
      ("Dict" .     #x1d507)
      ("List" .     #x2112)
      ("Tuple" .    #x2a02)
      ("Set" .      #x2126)
      ("Iterable" . #x1d50a)
      ("Union" .    #x22c3)
      ))

  (when window-system
    (global-prettify-symbols-mode t)
    (add-hook
     'python-mode-hook
     (lambda ()
       (dolist (pair my/prettify-symbol-list-python)
         (push pair prettify-symbols-alist)))))

 #+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
  (define-key elpy-mode-map (kbd "C-c C-j") (function elpy-shell-kill-all))
  (define-key elpy-mode-map (kbd "C-c C-n") (function flycheck-next-error))
  (define-key elpy-mode-map (kbd "C-c C-p") (function flycheck-previous-error))
  (define-key my/keymap (kbd "v") (function pyvenv-workon))
 #+END_SRC
* Init
#+BEGIN_SRC emacs-lisp
  (my/python/activate-venv "~/.config/python_vi/pro_vi")
 #+END_SRC
