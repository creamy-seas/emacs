#+TITLE: Python configuration
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

Do not use ipython as it is very buggy

* external setup
*** install =virtualenvwrapper=
**** mac
- install with pip3
=pip3 install virtualenv=
=pip3 install virtualenvwrapper=
=pip3 install virtualfish=

- load up to fish shell (put it in =config.fish= file)
=eval (python3 -m virtualfish)=

- craete env
=vf new mac_vi=
**** arch
=sudo pacman -S python-virtualenvwrapper=

add the following to =bashrc=
#+BEGIN_SRC sh
  export WORKON_HOME=~/creamy_seas/sync_files/python_vi
  source /usr/bin/virtualenvwrapper.sh
#+END_SRC
*** setup virtual-env
make virtual end with =mkvirtualenv NAME=
|------------------------------------+----------------------------------------------|
| =source NAMELOCATION/bin/activate= | activate an environment                      |
| =deactivate=                       | deactivate an environement                   |
| =workon NAME=                      | swtich environment                           |
| =lssitepackages=                   | list everything that is installed            |
| =pip install PACKAGENAME=          | install a package to the virtual environemnt |
| =echo $VIRTUAL_ENV=                | the currently activate virtual environment   |
|------------------------------------+----------------------------------------------|
*** pip install (second part not required)
|-------------------------------+---------------------------------------------+--------------------|
| =jedi=                        | autocompletion python (suggest names)       |                    |
| =autopep8=                    | format the code (indent etc). uses =flake8= |                    |
| =flake8=                      | linting (checks typos, syntax errors)       | =~/.config/flake8= |
| =importmagic=                 | automatic imports                           |                    |
| =python-language-server[all]= |                                             |                    |
|-------------------------------+---------------------------------------------+--------------------|
| =ipython3=                    | kernel                                      |                    |
| =yapf=                        | code formatiing                             |                    |
| =rope=                        | 'refactoring' library                       |                    |
|-------------------------------+---------------------------------------------+--------------------|

* elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :config
    (elpy-enable)
    (setq elpy-shell-starting-directory nil)
    (setq python-shell-completion-native-enable nil) ;remove a warming about native completion
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)))
 #+END_SRC
*** =autopep8= support
automatically fix syntax errors upon saving
#+BEGIN_SRC emacs-lisp
  (use-package py-autopep8
    :ensure t
    :init
    (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
 #+END_SRC
* python interrupt
#+BEGIN_SRC emacs-lisp
  (defun ilya-python-interrupt ()
    "Send an interrupt signal to python process"
    (interactive)
    (let ((proc (ignore-errors
                  (python-shell-get-process-or-error))))
      (when proc
        (interrupt-process proc))))
 #+END_SRC
* lsp
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'elpy-mode-hook #'lsp)
 #+END_SRC

* virtual environments
#+BEGIN_SRC emacs-lisp
  (defun ilya-pyenv-activate (python-environment-path)
    "Activate a particular environment"
    (interactive)
    (progn
      (pyvenv-activate python-environment-path)
      (setq elpy-rpc-python-command "python3.7")
      (setq python-shell-interpreter "python3.7"
            python-shell-interpreter-args "-i")
      (pyvenv-restart-python)))

  (ilya-pyenv-activate "~/.config/python_vi/pro_vi")
 #+END_SRC
*** hydra (loaded on default load)
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)

  ;; (defhydra hydra-python-vi (:color teal
  ;;                             :hint nil)
  ;;   "
  ;;      PYTHON ENVIRONMENT SELECTION
  ;; ^^^^^------------------------------------------------------------------------------------------
  ;; _p_: phd-vi                _r_: restart
  ;; _n_: neural-network-vi     _d_: devel_vi
  ;; _o_: pro_vi
  ;; _s_: scraping_vi
  ;; ^^
  ;; ^^
  ;; "
  ;;   ("p"   (ilya-pyenv-activate "~/creamy_seas/sync_files/python_vi/phd_vi"))
  ;;   ("o"   (ilya-pyenv-activate "~/creamy_seas/sync_files/python_vi/pro_vi"))
  ;;   ("n"   (ilya-pyenv-activate "~/creamy_seas/sync_files/python_vi/nn_vi"))
  ;;   ("s"   (ilya-pyenv-activate "~/creamy_seas/sync_files/python_vi/scraping_vi"))
  ;;   ("d"   (ilya-pyenv-activate "~/creamy_seas/sync_files/python_vi/devel_vi"))
  ;;   ("r"   pyvenv-restart-python)
  ;;   ("q"   nil "cancel" :color blue))

  ;; (global-set-key (kbd "<f9>") (function hydra-python-vi/body))
 #+END_SRC
* binding
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook (lambda ()
                                (local-unset-key (kbd "C-c C-j")) ;imenu
                                (local-unset-key (kbd "C-c C-f")) ;elpy-find-file
                                (define-key elpy-mode-map (kbd "C-c C-b") nil) ;select current indentation

                                (define-key elpy-mode-map (kbd "C-c C-k") (function ilya-python-interrupt))
                                (define-key elpy-mode-map (kbd "C-c C-j") (function elpy-shell-kill-all))
                                (define-key elpy-mode-map (kbd "C-c C-n") (function flycheck-next-error))
                                (define-key elpy-mode-map (kbd "C-c C-p") (function flycheck-previous-error))
                                (define-key elpy-mode-map (kbd "C-c C-f") (function elpy-nav-expand-to-indentation))
                                (define-key elpy-mode-map (kbd "C-c C-r") (function elpy-rpc-restart))
                                (define-key elpy-mode-map (kbd "C-c C-;") (function comment-line))))
 #+END_SRC

* Yas support
#+BEGIN_SRC emacs-lisp
 (defun python-args-to-docstring-numpy ()
  "return docstring format for the python arguments in yas-text"
  (let* ((args (python-split-args yas-text))
         (format-arg (lambda(arg)
                       (concat "    " (nth 0 arg) " : " (if (nth 1 arg) ", optional") "\n")))
         (formatted-params (mapconcat format-arg args "\n"))
         (formatted-ret (mapconcat format-arg (list (list "out")) "\n    ")))
    (unless (string= formatted-params "")
      (mapconcat 'identity
                 (list "\n    Parameters\n    ----------" formatted-params
                       "\n    Returns\n    -------" formatted-ret)
                 "\n"))))
 #+END_SRC
* Hydra
#+BEGIN_SRC emacs-lisp
  (use-package hideshow-org
      :ensure t
      :config
      (add-hook 'elpy-mode-hook 'hs-minor-mode))

  (defhydra hydra-python-collapse
    (:color pink				;all colors pink by default
            :timeout 1488
            :hint nil
            :foreign-keys run		;when non hydra keys are pressed, keep it open
            :pre (progn(			;what to do when hydra is on
                        set-cursor-color "#40e0d0"))
            :post (progn			;hydro turned off
                    (set-cursor-color "#ffd700")
                    (message
                     "â†ª 13 percent of the population accounts for 50 percent of the crime rate")))
    "
  ^Hide^                        ^Show^
  ^^^^^^^^------------------------------------
  _a_: all                      _A_: All
  _b_: block                    _B_: Block
  _l_: level

  "
    ("a" hs-hide-all)
    ("A" hs-show-all)
    ("l" hs-hide-level)
    ("b" hs-hide-block)
    ("B" hs-show-block)
    ;; ("[TAB]" hs-toggle-hiding "toggle hiding")
    ("t" hs-toggle-hiding "toggle hiding")
    ("q" nil "quit")
    )

  (define-key elpy-mode-map (kbd "C-c C-h") (function hydra-python-collapse/body))
 #+END_SRC
