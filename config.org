* hydra remapping
press a function key to enter new keybinding 
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t
    :init
    (defhydra hydra-zoom (global-map "<f9>")
      "zoom"
      ("g" text-scale-increase "in")
      ("l" text-scale-decrease "out")))
#+END_SRC
* rss feed
** environment setup
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :init     ;;run before the pacakge is loaded i.e. how we actually open the program
    (global-set-key (kbd "C-c f") 'elfeed)
    (setq-default elfeed-search-filter "@2-year-ago +unread")
    (setq elfeed-db-directory "~/creamy_seas/podrss/elfeeddb")

    :bind     ;;once the package is loaded, bing some commands
    (:map elfeed-search-mode-map
          ("*" . bjm/elfeed-star)
          ("8" . bjm/elfeed-unstar)
          ("q" . bjm/elfeed-save-db-and-bury)
          ("h" . make-hydra-elfeed)
          ("H" . make-hydra-elfeed))
    )

  (use-package elfeed-org
    :ensure t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/creamy_seas/podrss/elfeed.org")))
#+END_SRC
** macros
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-elfeed (global-map "<f5>")
    ""
    ("l" (elfeed-search-set-filter "@1-year-ago +boomer") "luke boomer")
    ("s" (elfeed-search-set-filter "@1-year-ago +strat") "stratechery")
    ("i" (elfeed-search-set-filter "@1-year-ago +starred") "shiny star")
    ("*" bjm/elfeed-star "star it" :color pink)
    ("8" bjm/elfeed-unstar "unstar it" :color pink)
    ("a" (elfeed-search-set-filter "@1-year-ago") "all")
    ("q" bjm/elfeed-save-db-and-bury "quit" :color blue)
    )

  ;;functiont that is associated with "H" keybinding in elfeed mode
  (defun make-hydra-elfeed ()
    ""
    (interactive)
    (hydra-elfeed/body))
#+END_SRC
** functions
#+BEGIN_SRC emacs-lisp
  (defun bjm/elfeed-star ()
    "Apply starred to all selected entries."
    (interactive)
    (let* ((entries (elfeed-search-selected))
           (tag (intern "starred")))

      (cl-loop for entry in entries do (elfeed-tag entry tag))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))

  (defun bjm/elfeed-unstar ()
    "Remove starred tag from all selected entries."
    (interactive)
    (let* ((entries (elfeed-search-selected))
           (tag (intern "starred")))

      (cl-loop for entry in entries do (elfeed-untag entry tag))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))

  ;;functions to support syncing .elfeed between machines
  ;;makes sure elfeed reads index from disk before launching
  (defun bjm/elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  ;;write to disk when quiting
  (defun bjm/elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))

  (defun bjm/elfeed-show-all ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-all"))
#+END_SRC
** aesthetics
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-goodies
    :ensure t
    :config
    (elfeed-goodies/setup))

  (custom-set-faces
   '(elfeed-search-date-face
     ((t :foreground "#11a"
         :weight bold
         ))))

  (custom-set-faces
   '(elfeed-search-feed-face
     ((t :foreground "#444"
         :weight bold
         ))))

  (custom-set-faces
   '(elfeed-search-title-face
     ((t :foreground "#3ef"
         :weight bold
         ))))

  (defface elfeed-search-starred-title-face
    '((t :foreground "#f77"
         :weight extra-bold
         :underline t))
    "marks a starred Elfeed entry")

  (push '(starred elfeed-search-starred-title-face) elfeed-search-face-alist)
#+END_SRC
** image chaseup
The problem is that the entry content only includes the tiny reddit-hosted thumbnail and Elfeed doesn't know to chase through the chain of links to get to the actual image that you care about. You could try assigning your own function to elfeed-show-refresh-function that treats reddit posts differently (and calling the default for everything else). You'd need to shr-insert an img element with the full size image as the src.
* autocomplete in document (company mode)                      :company:mode:
1) you need to first check that clang is on computer =clang --version=
2) then make sure that cmake is also installed =brew install cmake=
3) after filling out the code below, run =M-x irony-install-server=
4) this should prepare to run some long command like:
#+BEGIN_SRC sh
  cmake -DCMAKE_INSTALL_PREFIX\=/Users/CCCP/.emacs.d/irony/  /Users/CCCP/.emacs.d/elpa/irony-20181218.2241/server && cmake --build . --use-stderr --config Release --target install
#+END_SRC
5) *copy this into terminal and evalute. Then it chould be working*`'

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))


  (with-eval-after-load 'company;;remap navigation only if company mode is loaded
    ;;cancel some keys, and activate others
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    )

  ;;tie backend of autocompletion to company-irony
  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  ;;setup company-irony with c++ connection
  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  ;;finally ensure that c++-mode-hook is activated when company mode is on
  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode))
#+END_SRC
* yasnippet                                                        :yas_mode:
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))

  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
  (add-hook 'latex-mode 'yas-minor-mode)
#+END_SRC

* Common commands
** killing words
when the cursor is in the middle of a word, go to its start and kill it.
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC

** hungry delete                                         :hungry:delete:mode:
hungry delete deletes all white space between cursor and the next character
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
** copying whole line and save the cursor position
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion ;;save the cursor position
      (kill-new            ;;kill the following
       (buffer-substring ;;from begginin of line to end of line
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC
* Shortcuts
** symon mode (system memory etc showing at the bottom of the screen)
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("s-h" . symon-mode))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Terminal
** Setting default shell to Bash
to call it use =s-enter=
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

** Shortcut
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC

** sudo edit (root editing of files)
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+END_SRC
** dmenu (file browsing)                                              :fixup:
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("s-SPC" . 'dmenu))
#+END_SRC
* Passwords (MUST HAVE gpg installed)                       :require_install:
** enable the encrypting password package
#+BEGIN_SRC emacs-lisp
  ;;(use-package epa
  ;;     :ensure t
  ;;     :init
  ;;     (custom-set-variables '(epg-gpg-program "/usr/local/bin/gpg"))
  ;;     (epa-file-enable))
#+END_SRC
* ssh remote editing of files
** setting up trampXS
#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :ensure t
    :config
    (custom-set-variables
     '(tramp-default-method "ssh")
     '(tramp-default-user "antonov")
     '(tramp-default-host "192.168.0.5")))
  ;;  (add-to-list 'tramp-default-user-alist
  ;;               '("ssh" "192\\.168\\.0\\.5#6767" "antonov")))
    ;;  (custom-set-variables
    ;;  '(tramp-default-method "ssh")
  ;;  '(tramp-default-user "antonov")
     ;;  '(tramp-default-host "134.219.128.96")))
  ;;   (add-to-list 'tramp-default-proxies-alist
  ;;	       '("134\\.219\\.128\\.96" "root" ;;"/ssh:antonov@134.219.128.96:"))
  ;;when using /sudo:134.219.128.96 we first login to the proxy via my antonov@134.219.128.96 account, and then | as sudo to the root@134.219.128.96
  ;;([host] [username] [proxy])
#+END_SRC
*** to connect type =C-x C-f /-::/directiontofile=
*** to connect as sudo =C-x C-f /sudo:134.219.128.96:directiontofile=
   ;;(use-package auth-source
   ;;  :ensure t
   ;;  :config
   ;;  (customize-set-variable 'auth-sources "~/.authinfo"))
* Autocompletion and tips
** key suggestions                                           :which:key:mode:
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

** parantheses
*** highlight brackets
#+BEGIN_SRC emacs-lisp
  (show-paren-mode)
#+END_SRC
*** autoclosing parantheses
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '( ;;define the bracket pairs
			      (?\( . ?\))
			      (?\] . ?\])
			      (?\{ . ?\})
			      (?\". ?\")
			      (?\` . ?\')
			      (?\$ . ?\$)
			      ))
  (electric-pair-mode t)
#+END_SRC
*** colour coding brackets
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :init
      (rainbow-delimiters-mode 1))
  #+END_SRC

** command line autocompletion
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex ))
#+END_SRC
** greek letters
#+BEGIN_SRC emacs-lisp
  (when window-system (global-prettify-symbols-mode t))
#+END_SRC

* Org mode
** agenda files
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files
        (append
         (file-expand-wildcards "*.org")))
#+END_SRC

** load up the updates version
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC
** bullets
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'org-bullets)
    (package-refresh-contents)
    (package-install 'org-bullets))
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** open code editing in the same window (not side by side)
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** emacs-lisp automatic config generation (type <el [TAB])
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** shell mode configurations
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC"))
#+END_SRC
** indentation                                                 :indent_mode:
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
** export to nice html
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t
  )
#+END_SRC
* Default loading screens
** do not shot startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC
** maximise to full screen
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
** startup dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 20)))
    (setq dashboard-banner-logo-title "Привет от Леонта!"))
#+END_SRC
* Line copying and selecting
** select same element
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-line-this))
#+END_SRC
** copy within region
this will copy within the first brackets, then second, third, etc
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC
* Wrapping lines                                           :visual_line_mode:
Wraps the lines when they go off screen
#+BEGIN_SRC emacs-lisp
  ;;  (setq-default auto-fill-function 'do-auto-fill)
  (global-visual-line-mode t)
#+END_SRC
* Navigation
** Transfer using shift keys
#+BEGIN_SRC emacs-lisp
 (windmove-default-keybindings)
#+END_SRC
** switch window with number tags
when the there are more than two windows =C-x o= will give each window a letter that can be jumped to
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)   ;;only activates when there are more than 2 windows
    (setq switch-window-shortcut-style 'qwerty) ;;set the shortcuts that come up
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
  ;;(global-set-key (kbd "C-M-z") 'switch-window)
#+END_SRC
** move cursor to newly generated window
becuase initially emacs keeps it in the original window
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** jump using highlighted syntax
the superior search method
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-s") 'ace-jump-mode)
  ;;(use-package avy
  ;;  :ensure t
  ;;  :bind
  ;;  ("M-s" . 'avy-goto-char))
#+END_SRC

** searching
the superior search mode to the original
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :config
    (global-set-key (kbd "C-s") 'swiper))
#+END_SRC
** Multiple cursors
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-(") 'mc/mark-next-lines)
  (global-set-key (kbd "C-)") 'mc/mark-previous-lines)
#+END_SRC
** moving in subwords                                          :subword:mode:
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
* Kill ring
nice popup menu when pasting of the past history
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
* Reverting and deleting
** undo tree                                                 :undo:tree:mode:
spawns a tree of all the undos that you have ever made
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode 1))
  (global-set-key (kbd "M-/") 'undo-tree-visualize)
#+END_SRC
** backing up file
one can turn it off, or make the backups in a separate directory
#+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil)
#+END_SRC
* Buffers 
** kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list))) ;;mapc is a for loop, running 'function to the supplied (list)
  (global-set-key (kbd "C-x a b") 'kill-all-buffers)
#+END_SRC
** enable ibuffer
ibuffer will mean that new buffer is opened in the window that the command was called from
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
** IDO 
buffer with better representation.
*** enable ido mode
    buffer suggestion is given as a list in the terminal command (after C-x b)
 #+BEGIN_SRC emacs-lisp
   (setq ido-enable-flex-matching nil)
   (setq ido-create-new-biffer 'always)
   (setq ido-everywhere t)
   (ido-mode 1)
 #+END_SRC
*** enable vertical mode for buffer suggestion
 #+BEGIN_SRC emacs-lisp
   (use-package ido-vertical-mode
     :ensure t
     :init
     (ido-vertical-mode 1))
   (setq ido-vertical-define-keys 'C-n-and-C-p-only)
 #+END_SRC
*** remap "C-x C-b" buffer switching to ido-switch-buffer
 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
 #+END_SRC

** always kill the current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC
* Config edit/reload
** function to open up the config file for editing
#+BEGIN_SRC emacs-lisp
  (defun config-visit()                       ;;no arguments
    (interactive)                                 ;;function type
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit) ;;call the function defined above
#+END_SRC
** function to load the configuration into emacs
#+BEGIN_SRC emacs-lisp
  (defun reload-config()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'reload-config)
#+END_SRC
* Rainbow
**  setting hexadecimal to the correct colour                  :rainbow:mode:
hexadecimal in programming mode will show up in a coloured box
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
* Clocks 
#+BEGIN_SRC emacs-lisp
;;  (display-time-mode 1)
#+END_SRC
* Autocapitalize                                               :captain_mode:
#+BEGIN_SRC emacs-lisp
    (use-package captain
      :ensure t
      :init
  ;;    (global-captain-mode t)
  ;;    (add-hook 'org-mode-h captain-predicate 'captain-sentence-start-function)
      ;;only in capitalize in comments in programming mode
      (add-hook 'prog-mode-hook (lambda ()
				  (setq captain-predicate (lambda () nth 8 (syntax-ppss (point))))))
      ;;always capitalize in text mode
      (add-hook 'text-mode-hook
		(lambda ()
		  (setq captain-predicate (lambda () t))))
      (add-hook 'org-mode-hook
		(lambda ()
		  (setq captain-predicate (lambda () (not (org-in-src-block-p))))))
      )
#+END_SRC
dfsfdsa and that is that. come on. why doesnt it work? do i. dsfds. dsfdsdsaaaa. hheh. dsfdasflkjdsa. hrelo. tetst. dsfsa.  

* Aesthetics
** move mouse around
#+BEGIN_SRC emacs-lisp
  (setq mouse-avoidance-mode "cat-and-mouse")
#+END_SRC
** Title bars
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format "nsdap")
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** Cursor
#+BEGIN_SRC emacs-lisp
  (set-default 'cursor-type 'hbar)
#+END_SRC

** Line and column numbering
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
  (global-hl-line-mode 1)
#+END_SRC  
** relative line numbering
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :init
    (global-nlinum-relative-mode 1))
#+END_SRC
** Current line fade                                            :beacon:mode:
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
** fonts                                                    :require_install:
to access the inconsolata font you need to 
**** download the .ttf file and put into the font directory
**** run =M-x customize= go to =faces= then =defaults= and type =Inconsolata=
** Bottoms bar
*** out of two solutions
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :init
    (powerline-center-theme)
    (setq ns-use-srgb-colorspace nil))
  (setq powerline-default-separator 'wave)
  ;;(use-package spaceline
  ;;  :ensure t
  ;;  :config
  ;;  (require 'spaceline-config)
  ;;  (setq powerline-default-separator (quote arrow))
  ;;  (setq ns-use-srgb-colorspace nil)
  ;;  (spaceline-spacemacs-theme))
#+END_SRC
*** diminish (hide) minor mode information 1 by 1. Must be done after enabling the modes
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'beacon-mode)
    (diminish 'which-key-mode)
    (diminish 'undo-tree-mode)
    (diminish 'rainbow-mode)
    (diminish 'subword-mode)
    (diminish 'visual-line-mode)
    (diminish 'org-indent-mode))
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'misterioso)
#+END_SRC
** line highlight
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
  (set-face-background 'hl-line "#3e4446")
  (set-cursor-color "yellow")
#+END_SRC




