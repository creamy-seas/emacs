#+STARTUP: overview

* PDF Tools
#+BEGIN_SRC emacs-lisp 
  ;; (use-package pdf-tools
  ;;   :ensure t
  ;;   :config
  ;;   (pdf-tools-install))

  (use-package org-pdfview
    :ensure t)
 #+END_SRC
* Primary load
** load path
#+BEGIN_SRC emacs-lisp 
  (add-to-list 'load-path "~/creamy_seas/syncFiles/emacs_config/ilya_el_manual")
 #+END_SRC
** allowed commands
#+BEGIN_SRC emacs-lisp 
  (put 'dired-find-alternate-file 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
 #+END_SRC
* Emacs feel                                                         :darren:
** menus
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format "nsdap")
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** fonts                                                    :require_install:
to access the inconsolata font you need to 
**** download the .ttf file and put into the font directory
**** run =M-x customize= go to =faces= then =defaults= and type =Inconsolata=
** bottoms bar
#+BEGIN_SRC emacs-lisp
  ;; (if (file-exists-p "~/.macbook_localiser")
  ;;     (progn
  ;;       (use-package powerline			
  ;;         :ensure t
  ;;         :init
  ;;         (powerline-center-theme)
  ;;         (setq ns-use-srgb-colorspace nil)
  ;;         )
  ;;       (setq powerline-default-separator 'wave)
  ;;       )
  ;;   (progn
  ;;     (use-package spaceline
  ;;       :ensure t
  ;;       :config
  ;;       (require 'spaceline-config)
  ;;       (setq powerline-default-separator (quote arrow))
  ;;       (setq ns-use-srgb-colorspace nil)
  ;;       (spaceline-spacemacs-theme))))
#+END_SRC
** sml
#+BEGIN_SRC emacs-lisp 
  (use-package smart-mode-line
    :ensure t
    :init
    ;; (use-package smart-mode-line-powerline-theme
    ;;   :ensure t)
    (setq size-indication-mode t)
    (setq sml/shorten-directory t)
    (setq sml/no-confirm-load-theme t)
    (setq sml/shorten-modes t)
    (sml/setup))

  (add-to-list 'sml/replacer-regexp-list '("^.*config.*$" ":ED:") t)
  (add-to-list 'sml/replacer-regexp-list '("^.*config\\.org$" ":ED:") t)
  (custom-set-variables
   '(sml/col-number-format "")
   '(sml/extra-filler -2)
   '(sml/line-number-format "")
   '(sml/mule-info "")
   '(sml/modified-char "☦︎")
   '(sml/name-width (quote (20 . 40)))
   '(sml/read-only-char "☧")
   '(sml/pos-minor-modes-separator " ᛋᛋ")
   '(sml/pre-minor-modes-separator "ᛋᛋ")
   )

  (custom-set-faces
  ;;   '(sml/charging ((t (:inherit s
  ;;                               ml/global :foreground "ForestGreen" :underline t))))
  ;; '(sml/client ((t (:inherit sml/prefix :underline t))))
  ;; '(sml/col-number ((t (:inherit sml/global :underline t))))
  ;; '(sml/discharging ((t (:inherit sml/global :foreground "Red" :underline t))))
   '(sml/filename ((t (:inherit mode-line-buffer-id :foreground "#eab700" :weight bold)))) ;file name
   '(sml/prefix ((t (:foreground "#eab700")))) ;shortennings
  '(sml/folder ((t (:foreground "#505040" :weight normal)))) ;folder
  '(sml/global ((t (:foreground "white")))) ;most things on line
  '(sml/position-percentage ((t (:foreground "white")))) ;percentageof buffer
  '(sml/remote ((t (:foreground "red")))) ;local or remote load
  '(sml/git ((t (:foreground "white"))))	;github
  '(sml/vc-edited ((t (:foreground "white")))) ;github
  '(sml/modes ((t (:foreground "#1eafe1" :weight bold :box (:line-width 1 :color "#2d379a" :style pressed-button))))) ;major mode
  '(sml/minor-modes ((t (:foreground "#1eafe1")))) ;major mode
  '(sml/process ((t (:foreground "red")))) ;github
  ;; '(sml/global ((t (:inherit font-lock-preprocessor-face))))
  '(mode-line ((t (:background "#2d379a" :foreground "#1eafe1" :box nil))))
    '(mode-line-inactive ((t (:foreground "#1eafe1" :background "#1d679a" :box nil))))
   )
 #+END_SRC
** theme
#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "~/.macbook_localiser")
      (load-theme 'misterioso)
    (use-package spacemacs-theme
      :defer t
      :ensure t
      :config (load-theme 'spacemacs-dark)))
#+END_SRC
** window splitting
#+BEGIN_SRC emacs-lisp 
  (setq split-height-threshold nil)
  (setq split-width-threshold 120)
 #+END_SRC
** line highlight                                                   :darren:
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
  (set-face-background 'hl-line "#3e4446")
  (set-cursor-color "yellow")
#+END_SRC
** current line fade                                                :darren:
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
** setting hexadecimal to the correct colour
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode)
    (add-hook 'fundamental-mode-hook 'rainbow-mode)
    )
#+END_SRC
** colouring
#+BEGIN_SRC emacs-lisp 
  (custom-set-faces
   '(default ((t (:family "Inconsolata" :height 170 :background "#2d3743"))))
   `(popup-scroll-bar-background-face ((t (:background "#189a1e1224a2"))))
   `(popup-scroll-bar-foreground-face ((t (:background "#41bf505b61e3"))))
   `(popup-face ((t (:background "#41bf505b61e3" :foreground "white"))))
   ;; selection on autocomplete
   `(popup-menu-selection-face ((t (:background "orange2" :foreground "#3a3a6e" :weight semibold))))
   ;; rest of autocomplete
   `(popup-menu-face ((t (:inherit default :background "#41bf505b61e3"))))
   `(popup-menu-summary-face ((t (:inherit default :background "#41bf505b61e3")))))
  (set-default 'cursor-type 'hbar)
  (set-cursor-color "#ffd700")
 #+END_SRC
* Emacs Shortcuts                                                    :darren:
** function to open up the config file for editing
#+BEGIN_SRC emacs-lisp
  (defun config-visit()                       ;;no arguments
    (interactive)                                 ;;function type
    (find-file "~/creamy_seas/syncFiles/emacs_config/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit) ;;call the function defined above
#+END_SRC
** function to load the configuration into emacs
#+BEGIN_SRC emacs-lisp
  (defun reload-config()
    (interactive)
    (org-babel-load-file (expand-file-name "~/creamy_seas/syncFiles/emacs_config/config.org")))
  (global-set-key (kbd "C-c r") 'reload-config)
#+END_SRC
* Do not forget
- =export EMACS_HOME="pathToemacs.dDirectory" in =.profile= of the system
- =make sure ispell is installed=

- =rx= to build regular expressions
- global mode -> major mode -> minor mode in terms of key bindings
- modes have hooks associeted with them
- when rebinding keys, call  =define-key MAP (kbd "combo") (function NAME)=
MAP is the keybinding map for the major or minor mode e.g. LaTeX-mode-map
- to set major mode key =(local-set key (kbd "combo") (function NAME)=
- to set global key =(global-set-key (kbd "combo") (function NAME)=
* Passwords                                                             :gpg:
** enable the encrypting password package
#+BEGIN_SRC emacs-lisp
  ;;(use-package epa
  ;;     :ensure t
  ;;     :init
  ;;     (custom-set-variables '(epg-gpg-program "/usr/local/bin/gpg"))
  ;;     (epa-file-enable))
#+END_SRC
* Terminal and Bash
** import bash variables
#+BEGIN_SRC emacs-lisp 
  (use-package exec-path-from-shell
    :ensure t
    :init
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))
    )

  ;; (defun ilya_fire-up-from-emacs(relative-path)
  ;;   "Create a string that appends onto the systems .emacs.d directory. EMACS_HOME must be specified in .profile"
  ;;   (setq path (exec-path-from-shell-copy-env "EMACS_HOME"))
  ;;   (concat path "/" relative-path)
  ;;   )
 #+END_SRC
** do not ask for kill confirmation
#+BEGIN_SRC emacs-lisp 
  (setq kill-buffer-query-functions nil)
 #+END_SRC
** shell mode source in org mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC"))
#+END_SRC
** setting default shell to Bash
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

** shortcut
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC

** sudo edit (root editing of files)
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+END_SRC
** dmenu (file browsing)                                              :fixup:
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("s-SPC" . 'dmenu))
#+END_SRC
** execution path
#+BEGIN_SRC emacs-lisp 
   (defun set-exec-path-from-shell-PATH ()
    "Sets the exec-path to the same value used by the user shell"
    (let ((path-from-shell
           (replace-regexp-in-string
            "[[:space:]\n]*$" ""
            (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  ;; call function now
  (set-exec-path-from-shell-PATH)
 #+END_SRC
** emacs executable path
path for emacs executables to
#+BEGIN_SRC emacs-lisp 
  (setq exec-path (append exec-path '("/usr/local/bin")))
 #+END_SRC
* Very cool benis
** reload file on the go
any changes of a file, will be automatically reloaded
#+BEGIN_SRC emacs-lisp 
  (global-auto-revert-mode 1)
  ;; (setq auto-revert-mode nil)
 #+END_SRC
** multiple cursors
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-(") 'mc/mark-next-lines)
  (global-set-key (kbd "C-)") 'mc/mark-previous-lines)
#+END_SRC
** symon mode
(system memory etc showing at the bottom of the screen)
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("s-h" . symon-mode))
#+END_SRC

** greek letters
#+BEGIN_SRC emacs-lisp
  (when window-system (global-prettify-symbols-mode t))
#+END_SRC
** narrow and widen region
#+BEGIN_SRC emacs-lisp 
  (defun narrow-or-widen-dwim (p)
    "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
  Intelligently means: region, org-src-block, org-subtree, or defun,
  whichever applies first.
  Narrowing to org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer is already
  narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning) (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing command.
           ;; Remove this first conditional if you don't want it.
           (cond ((ignore-errors (org-edit-src-code))
                  (delete-other-windows))
                 ((org-at-block-p)
                  (org-narrow-to-block))
                 (t (org-narrow-to-subtree))))
          (t (narrow-to-defun))))

  (global-set-key (kbd "C-x n") (function narrow-or-widen-dwim))
 #+END_SRC
* AUCTex mode                                                        :ispell:
** latex commands                                           :listOfCommands:
I will most be using CDLaTeX to type in a command and then autocomplete it
Yasnippet to add stuff once I am there (like and an extra item) and create own tab commands
I will use C-c C-f for font changes
Indenting environment
|-----------------+------------------------------------------+----------------------------------|
| TABBING         | -----------------                        | ------------------               |
| =cdlatex=       | tabbing out common commands              | =cdlatex= help with =C-c ?=      |
| =yasnippet=     | tabbing out common and personal commands | =yasnippet= =yasnippet-snippets= |
| CREATE AND FILL | ------------------                       | -------------------              |
| =C-c C-f=       | change the font                          | =auctex=                         |
| =C-c C-e=       | create figure environemnt                | =auctex=                         |
| =C-c C-s=       | create section environment               | =auctex=                         |
| =`=             | math mode help                           | =LaTeX-math-mode=                |
| REFFERENCING    | ------------------                       | -------------------              |
| =C-c (= =C-c )= | create/use refference                    | =reftex=                         |
| =C-c [=         | refferences a citation                   | =reftex=                         |
| =C-c ==         | create content list to navigate          | =reftex=                         |
| AESTHETICS      | ------------                             | --------------                   |
| =C-c C-o=       | autohide sections                        | =TeX-fold-mode=                  |
| =C-c C-q C-e=   | indent environment or region             |                                  |
| COMMENTING      | ------------                             | --------------                   |
| =C-c '=         | comment paragraph                        |                                  |
| =C-c ;=         | comment region                           |                                  |
| COMPILING       | ------------                             | --------------                   |
| =C-c C-c=       | run next latex generations tep           |                                  |
| =C-c `=         | look through errors                      |                                  |
| =C-c C-v=       | Look at pdf                              |                                  |
|-----------------+------------------------------------------+----------------------------------|

** general setup
- install =.sty= packages in =/usr/local/texlive/2018/texmf-dist/tex/latex/base=
- run =sudo -s texhash= to load it up
- =flyspell= requires ispell to be installed on computer
#+BEGIN_SRC emacs-lisp
  (use-package latex
    :ensure auctex
    :init
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)  ;;access imported packages
    (setq TeX-save-query nil)  ;;don't prompt file save
    (setq-default TeX-show-compilation t)
    (setq TeX-interactive-mode t)
    (setq Tex-master nil)  ;;specify master file for each project
    :config
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    (add-hook 'LaTeX-mode-hook
              (lambda () (TeX-fold-mode 1)))
    (add-hook 'LaTeX-mode-hook
              (lambda () (set (make-variable-buffer-local 'TeX-electric-math)
                         (cons "$" "$"))))
    :hook
    (LaTeX-mode-hook . LaTeX-math-mode);; type ` to get suggestions
    (LaTeX-mode-hook . font-lock-mode);; font highlighting
    )

  (server-start)
 #+END_SRC
** tailored commands
*Some important AucTex commands and variables*
| =TeX-expand-list-builtin= | pair list tying command with a % expression e.g. =%s= -> master latex file |
| =TeX-expand-list=         | this variables contains the above =TeX-expand-list-builtin                 |
| =Tex-command-expand=      | "commandInStringForm" 'TeX-master-file TeX-expand-list                     |
*** generate file =C-c C-m=
1 - a process name is generated based off the name of the master file
2 - the actual command calls the =pdf_engine= script in the emacs.d directory
3 - expansion if performed to change =%s= to the master file name
#+BEGIN_SRC emacs-lisp 
  (defun ilya_gen-key ()
    "Command binded to C-c C-m will make the pdf with latexmk"
    (interactive)
    (minibuffer-message (concat "ᛋᛋ Generating \"" (TeX-master-file) "\" ᛋᛋ"))
    (let (
          ;; 1 - variable definition
          (command-script (ilya_expand-latex-command "~/creamy_seas/syncFiles/emacs_config/ilya_scripts/pdf_engine.sh %s")))

      ;; 2 - prepare for compilation buffer
      (ilya_latex-compilation-prepare "BuildPDF")

      ;; 3 - launch compilation
      (ignore-errors
        (TeX-run-TeX ilya_latex-compilation-process-id command-script (TeX-master-file)))
    
      ;; 4 - change number of running processes and colour in the modeline
      (setq ilya_LaTeX-running-compilations (+ ilya_LaTeX-running-compilations 1))
    
    (custom-set-faces
     '(mode-line ((t (:background "#2d379a" :foreground "#1eafe1" :box (:line-width 2 :color "red")))))))
    )

  (add-hook 'LaTeX-mode-hook (lambda ()
                               (define-key LaTeX-mode-map (kbd "C-c C-c") (function ilya_gen-key))))
 #+END_SRC
*** exterminate files =C-c C-j=
1 - kill any running processes on this master files
2 - delete the buffer that was running that process
3 - move files into output directory
4 - close this buffer as well

#+BEGIN_SRC emacs-lisp
  (defun ilya_jew-key()
    (interactive)

    (minibuffer-message (concat "===> 卍 Exterminating \"" (ilya_get-master-file-name) "\" 卍"))

    (let ((command-script (ilya_expand-latex-command "~/creamy_seas/syncFiles/emacs_config/ilya_scripts/jew_engine.sh %s")))

      ;; 1 - get the buffer names and variables of running process
      (ilya_latex-compilation-prepare "BuildPDF")

      ;; 2 - delete the "genPDF" process for the current master file
      ;; (ignore-errors
      (set-process-query-on-exit-flag (get-process ilya_latex-compilation-process-id) nil)
      (delete-process (get-process ilya_latex-compilation-process-id))
        ;; )

      ;; 3 - delete the buffer the process was in (reset the buffer name)
      ;; (ignore-errors (kill-buffer (TeX-active-buffer)))
      (ignore-errors (kill-buffer "*TeX Help*"))

      ;; 4 - prepare variables for the gassing
      (ilya_latex-compilation-prepare "jewGas")

      ;; 5 - the gassing itself
      (ignore-errors 
        (TeX-run-TeX "jew_process" command-script (TeX-master-file))
        )

      ;; 6 - change number of running processes and recolour bar if required
      (setq ilya_LaTeX-running-compilations (- ilya_LaTeX-running-compilations 1))

      (if (eq ilya_LaTeX-running-compilations 0)
          (custom-set-faces
           '(mode-line ((t (:background "#2d379a" :foreground "#1eafe1"))))))
      (sleep-for 2)

      ;; 5 - close this buffer window
      (kill-buffer (get-buffer "卍 Exterminating 卍"))
      (minibuffer-message "===> 卍 Extermination complete 卍 - heil!")))

  (add-hook 'LaTeX-mode-hook (lambda ()
                               (define-key LaTeX-mode-map (kbd "C-c C-j") (function ilya_jew-key))))
#+END_SRC
*** jump to pdf =C-c C-v=
- skim is run, reading the current line in the emacs buffer and highlighting it in the pdf
- =syntex.gz= file needs to be in the directory for this to occur, so it's copied
| unique to skim  |                                                      |
| =-b=            | inserts a reading bar into the pdf                   |
| =-g=            | tells it to load in background                       |
| unique to emacs | commands in TeX-expand-list-builtin in =tex.el= file |
| =%n=            | is the line number we are on                         |
| =%o=            | is the output file name                              |
| =%b=            | is the tex file name                                 |

#+BEGIN_SRC emacs-lisp
  (setq TeX-view-program-list
        '(("SkimViewer" "~/creamy_seas/syncFiles/emacs_config/ilya_scripts/search_engine.sh %s %n %o %b")))

  (setq TeX-view-program-selection '((output-pdf "SkimViewer")))
 #+END_SRC
*** supporting functions and varibles
#+BEGIN_SRC emacs-lisp
  (setq ilya_LaTeX-running-compilations 0)

  (defun ilya_LaTeX-compilation-buffer-size ()
    "Resize the latex compilation buffer when it launches because it is seriosuly bloat"

    (progn
      ;;1) pdf generation case
      (if (string-equal ilya_latex-compilation-process-type "BuildPDF")
          (progn
            (ignore-errors (rename-buffer ilya_latex-compilation-buffer-name))
            (setq compilation-window-name (get-buffer-window ilya_latex-compilation-buffer-name))
            (window-resize-no-error compilation-window-name (- 5 (window-height compilation-window-name "floor")))))
      ;;2) file clearing case
      (if (string-equal ilya_compilation-process "jewGas")
          (progn
            (ignore-errors (rename-buffer ilya_compilation-name))))))

  ;;  (add-hook 'comint-mode-hook (function ilya_LaTeX-compilation-buffer-size))

  (defun ilya_latex-compilation-prepare (process-type)
    "Set variables that the latex compilation buffer will use"
    ;; 1 - get the master file name
    (setq temp-master-file (ilya_get-master-file-name))

    ;; 2 - generate further variables
    (setq ilya_latex-compilation-process-id (concat process-type ":" temp-master-file))
    (setq ilya_latex-compilation-process-type process-type)
    (setq ilya_latex-compilation-master-file temp-master-file)

    ;; 3 - generate buffer name
    (if (string-equal process-type "BuildPDF")
        (setq ilya_latex-compilation-buffer-name (concat "ᛋᛋ Compiling [" temp-master-file "] ᛋᛋ")))
    (if (string-equal process-type "jewGas")
        (setq ilya_latex-compilation-buffer-name "卍 Exterminating 卍")))

  (defun ilya_get-master-file-name ()
    "Get the name of the master latex file in the current project"
    (interactive)
    (TeX-command-expand "%s" 'TeX-master-file TeX-expand-list))

  (defun ilya_expand-latex-command (command-script)
    (interactive)
    "Expands the latex command by evaluating the % variables in accordance with the system's master file"
    (TeX-command-expand command-script 'TeX-master-file TeX-expand-list))
 #+END_SRC

*** error checking =C-c C-w=
natively, auctex creates a list of errors once the compiling finishes.
here we make it do it explictly 
1 - get the current active compilation buffer.

#+BEGIN_SRC emacs-lisp 
  (defun ilya_latex-next-error (args)
    "Reads the compilation buffer and extracts errors to run through"
    (interactive "p")

    ;; 1 - search for active buffer (assign it to tempvar)
    (if-let ((tempvar (TeX-active-buffer)))

        ;; 2 - if open, go to that buffer and get all the errors
        (save-excursion
          (set-buffer (TeX-active-buffer))
          (TeX-parse-all-errors)

          ;; 3 - display error list
          (if TeX-error-list
              (minibuffer-message "ᛋᛋ Jew hunt finished ᛋᛋ"))

          ;; 4 - iterate through error list
          (call-interactively (function TeX-next-error))
          ;; clear region
          (delete-region (point-min) (point-max))
          (minibuffer-message "ᛋᛋ Make this totally aryan, free from scheckel mounds ᛋᛋ"))

      (minibuffer-message "ᛋᛋ But mein Führer - there's no-one running ᛋᛋ"))) 

  (add-hook 'LaTeX-mode-hook (lambda ()
                               (local-unset-key (kbd "C-c C-w"))
                               (local-set-key (kbd "C-c C-w") (function ilya_latex-next-error))))

  (defmacro my-save-excursion (&rest forms)
    (let ((old-point (gensym "old-point"))
          (old-buff (gensym "old-buff")))
      `(let ((,old-point (point))
             (,old-buff (current-buffer)))
         (prog1
             (progn ,@forms)
           (unless (eq (current-buffer) ,old-buff)
             (switch-to-buffer ,old-buff))
           (goto-char ,old-point)))))
 #+END_SRC
** minor modes
*** reftex
#+BEGIN_SRC emacs-lisp 
  (use-package reftex
    :ensure t
    :init
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-AUCTeX t)
    )
 #+END_SRC
*** cdlatex (autcompletion)
#+BEGIN_SRC emacs-lisp 
  (use-package cdlatex
    :ensure t
    :config
    (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex))
 #+END_SRC
** latex expand text
#+BEGIN_SRC emacs-lisp 
  (use-package fill-column-indicator
    :ensure t
    :config
    (add-hook 'LaTeX-mode-hook 'fci-mode)
    (setq fci-rule-color "#248")
    (setq fci-rule-width 1))

  (defun ilya_buffer-fill-column ()
    (interactive)

    ;; 1 - get the window width
    (setq windowWidth (window-width))
    (setq temp-fill-width (- windowWidth 10))

    ;; 2 - set the fill width to 94 max
    (if (> 94 temp-fill-width)
        (set-fill-column temp-fill-width)
      (set-fill-column 94)))


  (global-set-key (kbd "C-c l") (function ilya_buffer-fill-column))
 #+END_SRC
 
** cdlatex custom variables
#+BEGIN_SRC emacs-lisp 
  (setq cdlatex-math-symbol-alist
        `(
          (?F ("\\Phi"))))
 #+END_SRC
** key bindings
#+BEGIN_SRC emacs-lisp 
    (add-hook 'LaTeX-mode-hook (lambda ()
                                 (local-unset-key (kbd "C-c C-a"))
                                 (local-unset-key (kbd "C-c C-b"))
                                 (local-unset-key (kbd "C-c C-d"))
                                 (local-unset-key (kbd "C-c C-k"))
                                 (local-unset-key (kbd "C-c C-r"))
                                 (local-unset-key (kbd "C-c C-z"))
                                 (local-unset-key (kbd "C-c ESC"))
                                 (local-unset-key (kbd "C-c C-t"))
                                 (local-unset-key (kbd "C-c <")) ;;index and glossary
                                 (local-unset-key (kbd "C-c /")) ;;index
                                 (local-unset-key (kbd "C-c \\")) ;;index
                                 (local-unset-key (kbd "C-c >")) ;;index
                                 (local-unset-key (kbd "C-c _")) ;;set master file
                                 (local-unset-key (kbd "C-c C-n")) ;;normal mode (use C-c #)
                                 (local-unset-key (kbd "C-c ~")) ;;math mode
                                 (local-unset-key (kbd "C-c }")) ;;up list
                                 (local-unset-key (kbd "C-c `")) ;TeX-next-error
                                 (local-unset-key (kbd "C-c ^")) ;TeX-home-buffer
                                 (local-unset-key (kbd "C-x `")) ;next-error
                                 ))

    (defun ilya_latex-save-buffer ()
      "Save the current buffer and performs indent"
      (interactive)
      ;; 1 - fill colum
      (setq justify-width (ilya_buffer-fill-column))

      ;; 3 - perform fill
      (ignore-errors (LaTeX-fill-buffer justify-width))

      ;; 2 - save file
      (save-buffer))

    (defun ilya_latex-indent-buffer (args)
      "Indents the full buffer"
      (interactive "P")
      ;; 1 - fill the column
      (setq justify-width (ilya_buffer-fill-column))

      ;; 3 - perform fill
      (ignore-errors (LaTeX-fill-buffer justify-width))
      )

    (defun ilya_insert-underscore (args)
      "Inserts an underscore, because the jews put in dollars around it"
      (interactive "P")
      (insert "_"))

  (add-hook 'LaTeX-mode-hook (lambda ()
                               (define-key LaTeX-mode-map (kbd "C-c C-n") (function next-error))
                               (define-key LaTeX-mode-map (kbd "C-c C-;") (function comment-line))
                               (define-key LaTeX-mode-map (kbd "C-c C-u") (function ilya_insert-underscore))
                               (define-key LaTeX-mode-map (kbd "C-c C-q") (function ilya_latex-indent-buffer))
                               (define-key LaTeX-mode-map (kbd "C-c C-h") (function TeX-home-buffer))
                               (define-key LaTeX-mode-map (kbd "C-x C-s") (function ilya_latex-save-buffer))))
 #+END_SRC
** regexp colouring
*** theory
*Suppose we want to highlight certain constructs in a document*
The first thing that would happen, is latex searches for matching expressions - we need to create a rule for it to do so.

It would be a mumble jumble like
="\\(«\\(.+?\\|\n\\)\\)\\(+?\\)\\(»\\)"=

which can be created by running =(regexp-opt '("string1" "string2" etc) OPTION)= where =OPTIONG= can be (search Emacs Search)
|-----------+------------------------------------------|
| .         | matches any character                    |
| ^ or $    | start or end of line                     |
| ?         | repeat the previos match 0 or 1 time     |
| +         | repeat the previous match 1 or more time |
| *         | repeat previous match 0 or more times    |
| [^x]      | any symbol appart from x                 |
| [:ascii:] | match ascii characters                   |
|-----------+------------------------------------------|
*** define faces
#+BEGIN_SRC emacs-lisp 
  (defface ilya_face-latex-background
    '((t :background "#2d3743"
         :foreground "#3a3a6e"
         :weight bold
         ))
    "Face for red blocks")

  (defface ilya_face-latex-title
    '((t :foreground "firebrick1"
         :slant italic
         :overline t
         ))
    "Face for comments")

  (defface ilya_face-latex-red
    '((t :background "#964854"
         :weight bold
         ))
    "Face for red blocks")

  (defface ilya_face-latex-gold
    '((t :background "gold1"
         :weight bold
         ))
    "")

  (defface ilya_face-latex-blue
    '((t :background "#464896"
         :weight bold
         ))
    "Face for blue blocks")
 #+END_SRC
*** matching colour
#+BEGIN_SRC emacs-lisp 
  (font-lock-add-keywords 'latex-mode
                          '(("\\(\\\\red\{\\)\\(\\(.\\|\\Ca\\)*?\\)\\(\}\\\\ec\\)"
                             (1 'ilya_face-latex-red t)
                             (4 'ilya_face-latex-red t))))

  (font-lock-add-keywords 'latex-mode
                          '(("\\(\\\\blue\{\\)\\(\\(.\\|\\Ca\\)*?\\)\\(\}\\\\ec\\)"
                             (1 'ilya_face-latex-blue t)
                             (4 'ilya_face-latex-blue t))))

  (font-lock-add-keywords 'latex-mode
                          '(("\\(\\\\gold\{\\)\\(\\(.\\|\\Ca\\)*?\\)\\(\}\\\\ec\\)"
                             (1 'ilya_face-latex-gold t)
                             (4 'ilya_face-latex-gold t))))

  (font-lock-add-keywords 'latex-mode
                          '(("\\(%%\s.*\\)\\($\\)"
                             (1 'ilya_face-latex-title t))))
 #+END_SRC
** colouring
#+BEGIN_SRC emacs-lisp 
  (custom-set-faces
   '(font-latex-bold-face ((t (:inherit bold))))
   '(font-latex-italic-face ((t (:inherit italic))))
   '(font-latex-math-face ((t (:foreground "#99c616"))))
   '(font-latex-sedate-face ((t (:foreground "burlywood")))))
 #+END_SRC
* C++ mode
*** Preliminary instructions
1) you need to first check that clang is on computer =clang --version=
2) then make sure that cmake is also installed =brew install cmake=
3) after filling out the code below, run =M-x irony-install-server=
4) this should prepare to run some long command like:
#+BEGIN_SRC sh
  cmake -DCMAKE_INSTALL_PREFIX\=/Users/CCCP/.emacs.d/irony/  /Users/CCCP/.emacs.d/elpa/irony-20181218.2241/server && cmake --build . --use-stderr --config Release --target install
#+END_SRC
5) *copy this into terminal and evalute. Then it chould be working*
#+BEGIN_SRC emacs-lisp 
   ;;tie backend of autocompletion to company-irony
  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  ;;setup company-irony with c++ connection
  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  ;;finally ensure that c++-mode-hook is activated when company mode is on
  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode))
 #+END_SRC
* Dired
beautiful file browsing

#+BEGIN_SRC emacs-lisp 
  (require 'dired+)
  (global-set-key (kbd "C-x C-d") (function dired))
  (define-key dired-mode-map (kbd "C-c C-q") (function toggle-read-only))
  (define-key dired-mode-map (kbd "RET") (function dired-find-alternate-file))
  (define-key dired-mode-map (kbd "<right>") (function dired-find-file-other-window))
 #+END_SRC
** bindings
| a       | go to file or directory and close dired bufffer |
| v       | preview                                         |
| o       | open in new window                              |
| m/u     | mark/unmark                                     |
| +       | add directory                                   |
| r       | rename                                          |
| R       | move mass                                       |
| *       | regexp                                          |
| C-c C-q | rename then =C-c C-c=                           |
|         |                                                 |
* EIN mode
- jupyter notebook server in emacs
- *do not set* =(setq ein:use-smartrep t)= or it doesn't work
- =C-c C-f= for tooltip help
** setup
#+BEGIN_SRC emacs-lisp 
  (use-package ein
    :ensure t
    :init
    (setq ein:completion-backend 'ein:use-company-backend)
    (custom-set-variables
     '(ein:jupyter-default-notebook-directory
       "/Users/CCCP/creamy_seas/2am/python")))

  ;; 

  (defun ilya-no-relative-numbering ()
    "turn off relative numbering"
    (linum-relative-global-mode -1))

  (add-hook 'ein:notebook-mode-hook (function ilya-no-relative-numbering))
 #+END_SRC
** coloring
#+BEGIN_SRC emacs-lisp 
  (custom-set-faces
   '(ein:cell-output-area ((t (:foreground "cornsilk4" :background "#2d3743"))))
   '(ein:cell-input-prompt ((t (:foreground "azure4" :background "#2d3743"))))
   '(header-line ((t (:foreground "DeepPink1" :background "#2d3743"))))
   '(ein:notification-tab-normal ((t (:inhert header-line))))
    '(ein:notification-tab-selected ((t (:inhert header-line :weight bold :foreground "tan1"))))
   '(ein:cell-heading-1 ((t (:inherit ein:cell-heading-3 :foreground "cornflower blue" :weight bold :height 1.2))))
   '(ein:cell-heading-2 ((t (:inherit ein:cell-heading-3 :foreground "SteelBlue2" :weight bold :height 1.05))))
   '(ein:cell-heading-6 ((t (:inherit variable-pitch :foreground "MediumPurple3" :weight bold)))))

 #+END_SRC
** common commands
| =C-c C-a/b= | create cell above/below           |
| =C-c C-c=   | evalute cell                      |
| =C-c C-e=   | hide evaluation                   |
| =C-c C-h=   | get python documentation at point |
| =C-c C-TAB= | autocmplete                       |
| =C-c C-k=   | kill cell                         |
| =C-c C-m/s= | merge or split cell               |
| =C-c C-n/p= | next/previous cell                |
| =C-c C-o=   | open notebook                     |
| =C-c C-q=   | close ntebook                     |
| =C-c C-t=   | change cell format                |
| =C-c C-w/y= | copy/yank cell                    |
| =C-c C-z=   | interrupt kernel                  |
** html setup
- run command =jt= to set html variables*
- run =jt notebook password= to set a password
** custom
#+BEGIN_SRC emacs-lisp 
  ;; (defun ilya_ein-header (ws cell type &optional level focus)
  ;;   "Change the cell type of the current cell.
  ;; Prompt will appear in the minibuffer.

  ;; When used in as a Lisp function, TYPE (string) should be chose
  ;; from \"code\", \"hy-code\", \"markdown\", \"raw\" and \"heading\".  LEVEL is
  ;; an integer used only when the TYPE is \"heading\"."
  ;;   (interactive
  ;;    (let* ((ws (ein:worksheet--get-ws-or-error))
  ;; 	  (cell (ein:worksheet-get-current-cell))
  ;; 	  (choices (case (slot-value ws 'nbformat)
  ;; 		     (2 "cm")
  ;; 		     (3 "cmr123456")
  ;; 		     (4 "chmr123456")))
  ;; 	  (key (ein:ask-choice-char
  ;; 		(format "Cell type [%s]: " choices) choices))
  ;; 	  (type (case key
  ;; 		  (?c "code")
  ;; 		  (?h "hy-code")
  ;; 		  (?m "markdown")
  ;; 		  (?r "raw")
  ;; 		  (t "heading")))
  ;; 	  (level (when (equal type "heading")
  ;; 		   (string-to-number (char-to-string key)))))
  ;;      (list ws cell type level t)))

  ;;   (let ((new (ein:cell-convert-inplace cell type)))
  ;;     (when level
  ;;       (ein:cell-change-level new level))
  ;;     ))

  ;; (let ((new (ein:cell-convert-inplace cell type)))
  ;;   (when (ein:codecell-p new)
  ;;     (setf (slot-value new 'kernel) (slot-value ws 'kernel)))
  ;;   (when level
  ;;     (ein:cell-change-level new level))
  ;;   (ein:worksheet--unshift-undo-list cell)
  ;; (when focus (ein:cell-goto new relpos)))


  ;; (with-eval-after-load "ein-notebook"
  ;;  (define-key ein:notebook-mode-map (kbd "C-c C-u") (function ilya_ein-header)))
 #+END_SRC
** key bindings
#+BEGIN_SRC emacs-lisp 
  (with-eval-after-load "ein-notebook"
    (define-key ein:notebook-mode-map (kbd "C-c C-j") (function ein:notebook-kernel-interrupt-command))
    ;; (define-key ein:notebook-mode-map (kbd "C-c C-j") (function
    ;;                                                    (prog
    ;;                                                     (ein:notebook-kernel-interrupt-command)
    ;;                                                     (ein:worksheet-clear-all-output))))
    (define-key ein:notebook-mode-map (kbd "C-:") (function iedit-mode))
    (define-key ein:notebook-mode-map (kbd "C-c C-;") (function comment-line))
    (define-key ein:notebook-mode-map (kbd "C-c TAB") (function ein:completer-complete)))

 #+END_SRC
#+BEGIN_SRC emacs-lisp 
  ;; (add-hook 'ein-notebook-mode-hook (lambda()
                                      ;; (define-key ein:notebook-mode-map (kbd "C-c") )))

 #+END_SRC
* Elpy mode
** external setup of python
*** install =virtualenvwrapper=
**** mac
- install with pip3
=pip3 install virtualenv=
=pip3 install virtualenvwrapper=
=pip3 install virtualfish=

- load up to fish shell (put it in =config.fish= file)
=eval (python3 -m virtualfish)=

- craete env 
=vf new mac_vi=
**** arch
=sudo pacman -S python-virtualenvwrapper=

add the following to =bashrc=
#+BEGIN_SRC sh
  export WORKON_HOME=~/creamy_seas/syncFiles/python_vi
  source /usr/bin/virtualenvwrapper.sh
#+END_SRC
(** setup python virtual environment
make virtual end with =mkvirtualenv NAME=
|------------------------------------+----------------------------------------------|
| =source NAMELOCATION/bin/activate= | activate an environment                      |
| =deactivate=                       | deactivate an environement                   |
| =workon NAME=                      | swtich environment                           |
| =lssitepackages=                   | list everything that is installed            |
| =pip install PACKAGENAME=          | install a package to the virtual environemnt |
| =echo $VIRTUAL_ENV=                | the currently activate virtual environment   |
|------------------------------------+----------------------------------------------|

*** to install using pip (second part not required)
|---------------+---------------------------------------------|
| =jedi=        | autocompletion python (suggest names)       |
| =autopep8=    | format the code (indent etc). uses =flake8= |
| =flake8=      | linting (checks typos, syntax errors)       |
| =importmagic= | automatic imports                           |
| =matplotlib=  |                                             |
| =qutip=       | needs =numpy= =Cython= =scipy=              |
| =PyQt5=       | gui interface                               |
|---------------+---------------------------------------------|
| =ipython3=    | kernel                                      |
| =yapf=        | code formatiing                             |
| =rope=        | 'refactoring' library                       |
| =jupyter=     | notebook                                    |
|---------------+---------------------------------------------|
#+TBLFM: $1=PyQt5

*** configuration files
the flake8 (used for syntax checking) has configuration file =~/.config/flake8=
** activate elpy and choose interpreter
a check is run to see if the =macbook_localiser= file exists and the corresponding environment
is activated
*** elpy
#+BEGIN_SRC emacs-lisp 
    (use-package elpy
      :ensure t
      :config
      (elpy-enable)
      (setq elpy-shell-use-project-root nil)
      (setq python-shell-completion-native-enable nil) ;remove a warming about native completion
  )
 #+END_SRC
*** syntax checking =jedi, flycheck=
- deactivate flymake and use flycheck - syntax is checked ont the fly
- uses jedi
#+BEGIN_SRC emacs-lisp 
  (use-package flycheck
    :ensure t
    :init
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))  
 #+END_SRC
*** code formatting =autopep8=
- automatically fix syntax errors upon saving
#+BEGIN_SRC emacs-lisp 
  (use-package py-autopep8
    :ensure t
    :init
    (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))  
 #+END_SRC
*** different virtual environments
#+BEGIN_SRC emacs-lisp 
  (defun ilya-pyenv-nn ()
    "Activate the neural network environment"
    (interactive)
    (progn
      (pyvenv-activate "~/creamy_seas/syncFiles/python_vi/nn_vi")
      (setq elpy-rpc-python-command "python3.7")
      (setq python-shell-interpreter "python3.7"
            python-shell-interpreter-args "-i")
      (pyvenv-restart-python))
    )

  (defun ilya-pyenv-mac ()
    "Activate the phd environment"
    (interactive)
    (progn
      (pyvenv-activate "~/creamy_seas/syncFiles/python_vi/mac_vi")
      (setq elpy-rpc-python-command "python3.7")
      (setq python-shell-interpreter "python3.7"
            python-shell-interpreter-args "-i")
      (pyvenv-restart-python))
    )
 #+END_SRC
*** default startup
#+BEGIN_SRC emacs-lisp
  (use-package pyenv-mode
    :ensure t
    :config
    (if (file-exists-p "~/.macbook_localiser")
        (ilya-pyenv-mac)
      (pyvenv-activate "~/creamy_seas/syncFiles/python_vi/arch_vi")))
#+END_SRC

*** DONE python3 (the way to handle long scripts)
#+BEGIN_SRC emacs-lisp
  ;; (setq python-shell-interpreter "python3.7"
  ;;       python-shell-interpreter-args "-i")
#+END_SRC
*** DONE jupyter notebook
#+BEGIN_SRC emacs-lisp 
  ;;(setq python-shell-interpreter "jupyter"
  ;;      python-shell-interpreter-args "console --simple-prompt"
  ;;      python-shell-prompt-detect-failure-warning nil)
  ;;(add-to-list 'python-shell-completion-native-disabled-interpreters
  ;;             "jupyter")
 #+END_SRC
*** DONE ipython (do not use - buggy)
#+BEGIN_SRC emacs-lisp 
  ;;(setq python-shell-interpreter "ipython"
  ;;      python-shell-interpreter-args "-i --simple-prompt") 
 #+END_SRC
** hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)

  (defhydra hydra-python-vi (:color teal
                              :hint nil)
    "
       PYTHON ENVIRONMENT SELECTION
  ^^^^^------------------------------------------------------------------------------------------
  _m_: mac-vi                _r_: restart
  _n_: neural-network-vi
  ^^
  ^^
  "
    ("m"   ilya-pyenv-mac)
    ("n"   ilya-pyenv-nn)
    ("r"   pyvenv-restart-python)
    ("q"   nil "cancel" :color blue))

  (global-set-key (kbd "<f9>") (function hydra-python-vi/body))
 #+END_SRC

** matplotlib setup
- put the =matplotlibrc= files into either =.config/matplotlib= or =.matplotlib=
- check location with =matplotlib.matplotlib_fname()= or =matplotlib.get_configdir()=
*** setting the backend
to control where the plots are sent to, set the backend to =Qt5Agg=
*** creating styles
- to print the available styles =plt.style.available=
- to use styles =plt.style.use('ggplot')=
- create a style document =example.mplstyle= in the =matplolib/stylelib= folder
** custom commands
#+BEGIN_SRC emacs-lisp 
  (defun ilya_python-interrupt ()
    "Send an interrupt signal to python process"
    (interactive)
    (let ((proc (ignore-errors
                  (python-shell-get-process-or-error))))
      (when proc
        (interrupt-process proc))))

  (defun ilya_python-kill-all (args)
    "Kill all without warning"
    )

 #+END_SRC
** key rebinding
#+BEGIN_SRC emacs-lisp 
  (add-hook 'python-mode-hook (lambda ()
                                (local-unset-key (kbd "C-c C-j")) ;imenu
                                (local-unset-key (kbd "C-c C-f")) ;elpy-find-file
                                (define-key elpy-mode-map (kbd "C-c C-b") nil) ;select current indentation

                                (define-key elpy-mode-map (kbd "C-c C-k") (function ilya_python-interrupt))
                                (define-key elpy-mode-map (kbd "C-c C-j") (function elpy-shell-kill-all))
                                (define-key elpy-mode-map (kbd "C-c C-n") (function flycheck-next-error))
                                (define-key elpy-mode-map (kbd "C-c C-p") (function flycheck-previous-error))
                                (define-key elpy-mode-map (kbd "C-c C-f") (function elpy-nav-expand-to-indentation))
                                (define-key elpy-mode-map (kbd "C-c C-r") (function elpy-rpc-restart))
                                (define-key elpy-mode-map (kbd "C-c C-;") (function comment-line))))
 #+END_SRC
* Markdown mode
#+BEGIN_SRC emacs-lisp 
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
 #+END_SRC
* Magit mode                                                         :darren:
#+BEGIN_SRC emacs-lisp 
  (use-package magit
    :ensure t)  

  (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))
 #+END_SRC
** Time machine
#+BEGIN_SRC emacs-lisp 
  (use-package git-timemachine
    :ensure t)

 #+END_SRC
** Hydra
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                                        :hint nil)
    "
    Git gutter:
      _j_: next hunk        _s_tage hunk     _q_uit
      _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
      ^ ^                   _p_opup hunk
      _h_: first hunk
      _l_: last hunk        set start _R_evision
    "
    ("j" git-gutter:next-hunk)
    ("k" git-gutter:previous-hunk)
    ("h" (progn (goto-char (point-min))
                (git-gutter:next-hunk 1)))
    ("l" (progn (goto-char (point-min))
                (git-gutter:previous-hunk 1)))
    ("s" git-gutter:stage-hunk)
    ("r" git-gutter:revert-hunk)
    ("p" git-gutter:popup-hunk)
    ("R" git-gutter:set-start-revision)
    ("q" nil :color blue)
    ("Q" (progn (git-gutter-mode -1)
                ;; git-gutter-fringe doesn't seem to
                ;; clear the markup right away
                (sit-for 0.1)
                (git-gutter:clear))
     :color blue))

  (global-set-key (kbd "M-g M-g") (function hydra-git-gutter/body))
 #+END_SRC
* Org mode                                                           :darren:
** autocomplete in org mode (when typing #+)
#+BEGIN_SRC emacs-lisp  
  ;; (use-package org-ac
  ;;   :ensure t
  ;;   :init
  ;;   (require 'org-ac)
  ;;   (org-ac/config-default)
  ;;   (setq org-ac/ac-trigger-command-keys (quote ("\\" ":" "[" "+"))) ;keys that trigger autocomplete
  ;;   ;bing the usual scrolling keys
  ;;   (define-key ac-completing-map (kbd "C-n") (function ac-next))
  ;;   (define-key ac-completing-map (kbd "C-p") (function ac-previous))
  ;;   (define-key ac-completing-map (kbd "C-v") (function ac-quick-help-scroll-down))
  ;;   (define-key ac-completing-map (kbd "M-v") (function ac-quick-help-scroll-up)))

 #+END_SRC
** get rid of anoying 'ding in table'
C-u C-c C-x !
** todo lists
#+BEGIN_SRC emacs-lisp 
  (setq org-todo-keywords '((sequence "TODO(t)" "BLOAT(B)" "BRYAN(b)" "PHD(p)" "SCHOOLS(s)" "TUTORING(l)" "|" "DOMINATED(d)")))

  (setq org-todo-keyword-faces (quote (
                                       ("STARTED" . "yellow")
                                       ("PHD" . (:foreground "yellow" :background "#FF3333"))
                                       ("SCHOOLS" . (:foreground "#090C42" :background "#9DFE9D"))
                                       ("Dominated" . (:foreground "#9DFE9D" :weight bold))
                                       ("BLOAT" . (:foreground "#000001" :background "#ffffff"))
                                       ("TUTORING" . (:foreground "#090C42" :background "#FFD700": weight bold))
                                       ("BRYAN" . (:foreground "#090C42" :background "#33ccff" :weight bold)))))

  (setq org-agenda-span 10)
 #+END_SRC

** agenda files
*** keybinding
#+BEGIN_SRC emacs-lisp 
  (global-set-key (kbd "C-c c") (function org-capture))
  (global-set-key (kbd "C-c a") (function org-agenda))
 #+END_SRC
*** agenda file location
#+BEGIN_SRC emacs-lisp 
  (setq org-agenda-files (list "~/creamy_seas/antlers.org"))
  ;;                              "~/creamy_seas/1488.org"))
 #+END_SRC
*** agenda layout prompt
#+BEGIN_SRC emacs-lisp 
  (setq org-agenda-custom-commands
        (quote (("c" "Simple agenda view"
           ((agenda ""))))))
 #+END_SRC
*** org-capture-templates
#+BEGIN_SRC emacs-lisp 
  (setq org-capture-templates
        '(
          ;; random tasks and reminders
          ("b" "Bloat" entry (id "antlers-bloat")
           "** BLOAT %^{stuff-to-be-done}\nSHEDULED: %^T")
          ;; temporary org file on desktop
          ("d" "Draft" plain (file "~/creamy_seas/Desktop/.temp.org")
           "%?")
          ;; tasks for neural network future
          ("e" "East-India Data Company")
          ("e2" "2am goals" entry (id "bryan-plan")
           "** BRYAN %^{project|Bot|Neural Network|Database|Bloat}: %^{stuff-to-be-done}\nDEADLINE: %^T")
          ("et" "Time log" table-line (id "bryan-done")
           "| %^u | %^{Project}: %^{task-summary} | %^{hours-worked} hours | |"
           :table-line-pos "@<-1")
          ;; lukes quotes
          ("l" "Boomer Entry" item (file+headline "~/creamy_seas/1488.org" "Becoming a boomer") "%^{What did Luke say} %^G\n%?"
           (file "~/creamy_seas/1488.org") "%?")
          ("p" "PhD Tasks")
          ("pp" "Photon Counting" entry (id "phd-photon")
           "*** PHD Photn Counting [/]: %^{stuff-to-be-done}\nDEADLINE: %^T\n- [ ] %?")
          ("pt" "Twin Qubit" entry (id "phd-twin")
           "*** PHD Twin Qubit [/]: %^{stuff-to-be-done}\nDEADLINE: %^T\n- [ ] %?")
          ("px" "xMon" entry (id "phd-xmon")
           "*** PHD xMon [/]: %^{stuff-to-be-done}\nDEADLINE: %^T\n- [ ] %?")
          ;; save a really good url
          ("u" "Save URL" entry (file+headline "~/creamy_seas/1488.org" "URL too good to throw away")
           "** %^L %? %^G"
           :kill-buffer t)
          ;; random stories to save
          ("s" "Stories" entry (id "stories") "** %^{Title} %t\n%?")
          ;; tutoring
          ("t" "Tutoring lessons")
          ("tw" "Nikhil Lesson (Winchester)" table-line (id "tutoring-nikhil-invoice")
           "| # | %^u | %^{lesson summary} | 120%? | |"
           :table-line-pos "III-1")
          ("tn" "Nathan Lesson" table-line (id "tutoring-nathan-invoice")
           "| # | %^u | %^{lesson summary} | 45%? | |"
           :table-line-pos "III-1")
          ("td" "Darrens Programming" table-line (id "tutoring-darren-invoice")
           "| # | %^u | %^{lesson summary} | 50%? | |"
           :table-line-pos "III-1")
          ("f" "Future Lesson")
          ("fw" "Nikhil Lesson (Winchester)" entry (id "tutoring-nikhil-lesson")
           "*** TUTORING Lesson %^{location|at Home|on Skype} covering: %^{topic-to-cover}\n%^T")
          ("fn" "Nathan Lesson" entry (id "tutoring-nathan-lesson")
           "*** TUTORING Lesson %^{location|at Home|on Skype} covering: %^{topic-to-cover}\n%^T")
          ))
 #+END_SRC
*** org capture frame
capture frame can be called from any application - just map it
#+BEGIN_SRC emacs-lisp 
  (defadvice org-capture-finalize 
      (after delete-capture-frame activate)  
    "Advise capture-finalize to close the frame"  
    (if (equal "capture" (frame-parameter nil 'name))  
        (delete-frame)))

  (defadvice org-capture-destroy 
      (after delete-capture-frame activate)  
    "Advise capture-destroy to close the frame"  
    (if (equal "capture" (frame-parameter nil 'name))  
        (delete-frame)))  

  (use-package noflet
    :ensure t )
  (defun make-capture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
      (org-capture)))
 #+END_SRC
*** org capture frame supplementary installed
- =brew install coreutils=
- Automator -> new shell script
#+BEGIN_SRC sh
  socketfile=$(lsof -c Emacs | grep server | tr -s " " | cut -d' ' -f 8); /usr/local/bin/emacsclient -ne "(make-capture-frame)" -s $socketfile
#+END_SRC

** bullets                                                          :darren:
the nice bullets instead of multiplication symbols
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'org-bullets)
    (package-refresh-contents)
    (package-install 'org-bullets))
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** open code editing in the same window (not side by side)          :darren:
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** begin_src generation 
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp \n ? \n #+END_SRC")
               '("py" "#+BEGIN_SRC python \n ? \n #+END_SRC"))
#+END_SRC
** indentation                                                      :darren:
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
** export to nice html
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t
  )
#+END_SRC
** export to presentation
#+BEGIN_SRC emacs-lisp
  ;;(use-package ox-reveal
  ;;  :ensure t)
  ;;(use-package htmlize
  ;;  :ensure t)
  ;;(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
#+END_SRC
** table formulas
#+BEGIN_SRC emacs-lisp 
  (defmath gradeBand(score)
    (if (< score 1)
        "DNS"
      (if (< score 40)
          "Working"
        (if (< score 50)
            "3rd"
          (if (< score 60)
              "2:2"
            (if (< score 70)
                "2:1"
              "1st"))))))
 #+END_SRC
** keybindings
#+BEGIN_SRC emacs-lisp 
  (define-key org-mode-map (kbd "C-x RET") (function org-insert-subheading))
  (define-key org-mode-map (kbd "C-c C-;") (function comment-line))
  (define-key emacs-lisp-mode-map (kbd "C-c C-;") (function comment-line))
 #+END_SRC
* RSS mode
- =elfeed-new-entry-hook= is called each time a new entry is added
** org configuration
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
    :ensure t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/creamy_seas/syncFiles/emacs_config/elfeed.org")))
#+END_SRC
** elfeed setip
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :init
    (global-set-key (kbd "C-c f") 'elfeed)
    (setq elfeed-db-directory "~/creamy_seas/syncFiles/emacs_config/elfeeddb")
    (setq-default elfeed-search-filter "+unread")
    :bind
    (:map elfeed-search-mode-map
          ("*" . bjm/elfeed-star)
          ("8" . bjm/elfeed-unstar)
          ("q" . bjm/elfeed-save-db-and-bury)
          ("h" . make-hydra-elfeed)
          ("H" . make-hydra-elfeed))
    )
#+END_SRC
** elfeed hydra
#+BEGIN_SRC emacs-lisp
  (require 'hydra)
  (defhydra hydra-elfeed (global-map "<f5>")
    ""
    ("p" (elfeed-search-set-filter "+prog") "programming")
    ("l" (elfeed-search-set-filter "+boomer") "luke boomer")
    ("s" (elfeed-search-set-filter "+strat") "stratechery")
    ("i" (elfeed-search-set-filter "+starred") "shiny star")
    ("*" bjm/elfeed-star "star it" :color pink)
    ("8" bjm/elfeed-unstar "unstar it" :color pink)
    ("a" (elfeed-search-set-filter "@5-year-ago") "all")
    ("u" (elfeed-search-set-filter "+unread") "unread")
    ("q" bjm/elfeed-save-db-and-bury "quit" :color blue)
    )

  ;;function that is associated with "H" keybinding in elfeed mode
  (defun make-hydra-elfeed ()
    ""
    (interactive)
    (hydra-elfeed/body))
#+END_SRC
** functions
#+BEGIN_SRC emacs-lisp
  (defun bjm/elfeed-star ()
    "Apply starred to all selected entries."
    (interactive)
    (let* ((entries (elfeed-search-selected))
           (tag (intern "starred")))

      (cl-loop for entry in entries do (elfeed-tag entry tag))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))

  (defun bjm/elfeed-unstar ()
    "Remove starred tag from all selected entries."
    (interactive)
    (let* ((entries (elfeed-search-selected))
           (tag (intern "starred")))

      (cl-loop for entry in entries do (elfeed-untag entry tag))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))

  ;;functions to support syncing .elfeed between machines
  ;;makes sure elfeed reads index from disk before launching
  (defun bjm/elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  ;;write to disk when quiting
  (defun bjm/elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))

  (defun bjm/elfeed-show-all ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-all"))
#+END_SRC
** colouring
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-goodies
    :ensure t
    :config
    (elfeed-goodies/setup))

  (custom-set-faces
   '(elfeed-search-date-face
     ((t :foreground "#11a"
         :weight bold))))
   '(elfeed-search-feed-face
     ((t :foreground "#444"
         :weight bold)))
   '(elfeed-search-title-face
     ((t :foreground "#3ef"
         :weight bold)))

  (defface elfeed-search-starred-title-face
    '((t :foreground "#f77"
         :weight extra-bold
         :underline t))
    "marks a starred Elfeed entry")

  (push '(starred elfeed-search-starred-title-face) elfeed-search-face-alist)
#+END_SRC
** adding tags to new entries
=M-x elfeed-apply-hooks-now= to apply this to all exisitng entries
#+BEGIN_SRC emacs-lisp 
  ;; (add-hook 'elfeed-new-entry-hook
  ;;          (elfeed-make-tagger :feed-url "stratechery.com/feed/"
  ;;                              :entry-title '("Exponent Podcast:.*")
  ;;                              :add 'podcast
  ;;                              :remove 'unread))
 #+END_SRC
** keybinding
b: open selected entries in your browser (browse-url)
y: copy selected entries URL to the clipboard
r: mark selected entries as read
u: mark selected entries as unread
+: add a specific tag to selected entries
-: remove a specific tag from selected entries
** image chaseup
The problem is that the entry content only includes the tiny reddit-hosted thumbnail and Elfeed doesn't know to chase through the chain of links to get to the actual image that you care about. You could try assigning your own function to elfeed-show-refresh-function that treats reddit posts differently (and calling the default for everything else). You'd need to shr-insert an img element with the full size image as the src.
* SSH mode
** setting up trampXS
#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :ensure t
    :config
    (custom-set-variables
     '(tramp-default-method "ssh")
     '(tramp-default-user "antonov")
     '(tramp-default-host "192.168.0.5")))
  ;;  (add-to-list 'tramp-default-user-alist
  ;;               '("ssh" "192\\.168\\.0\\.5#6767" "antonov")))
    ;;  (custom-set-variables
    ;;  '(tramp-default-method "ssh")
  ;;  '(tramp-default-user "antonov")
     ;;  '(tramp-default-host "134.219.128.96")))
  ;;   (add-to-list 'tramp-default-proxies-alist
  ;;	       '("134\\.219\\.128\\.96" "root" ;;"/ssh:antonov@134.219.128.96:"))
  ;;when using /sudo:134.219.128.96 we first login to the proxy via my antonov@134.219.128.96 account, and then | as sudo to the root@134.219.128.96
  ;;([host] [username] [proxy])
#+END_SRC
** to connect type =C-x C-f /-::/directiontofile=
** to connect as sudo =C-x C-f /sudo:134.219.128.96:directiontofile=
   ;;(use-package auth-source
   ;;  :ensure t
   ;;  :config
   ;;  (customize-set-variable 'auth-sources "~/.authinfo"))
* Shell mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook (lambda ()
                                (define-key sh-mode-map (kbd "C-c C-;") (function comment-line))))
 #+END_SRC
* Autocomplete Yasnippet
- Autocompletion by typing in first part of word and tabbing to insert a template
- yasnippet is the framework
- yasnippet-snippets is the official collection of snippets

*create a hard link between the =.emacs.d/snippets= files and the =.emacs/elpa/yasnippets-snippets/snippets/REQUIRED_MODE/= files*
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
    (add-hook 'LaTeX-mode-hook 'yas-minor-mode)
    (add-hook 'python-mode-hook 'yas-minor-mode)
    (add-hook 'org-mode-hook 'yas-minor-mode)

    ;; (add-hook 'ein:notebook-mode-hook 'function)
    ;; (global-set-key (kbd "C-c C-n") 'yas-new-snippet)

    :config
    (add-to-list 'yas-snippet-dirs "~/creamy_seas/syncFiles/emacs_config/snippets/snippet-mode")

    (use-package yasnippet-snippets
      :ensure t)

    (yas-reload-all))
#+END_SRC
* Autocomplete Company                                               :darren:
Autocomplete shoudl only run in certain environments
once autocomplete is triggered, =C-d= to get documentation at point
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (add-hook 'org-mode-hook 'company-mode)
    (add-hook 'emacs-lisp-mode-hook 'company-mode)
    (add-hook 'text-mode-hook 'company-mode)
    (add-hook 'inferior-python-mode-hook 'company-mode)
    (add-hook 'LaTeX-mode-hook 'company-mode)
    (setq company-idle-delay 0.2)
    (setq company-minimum-prefix-length 4))
#+END_SRC
** company colours
#+BEGIN_SRC emacs-lisp 
  (use-package company
    :ensure t
    :init
    (custom-set-faces
     ;; annotation (i.e. function or method)
     `(company-tooltip-annotation ((t (:foreground "#CFD0E3"))))
     `(company-tooltip-annotation-selection ((t (:foreground "#334676"))))
     ;; scrollbar showing position in list
     `(company-scrollbar-bg ((t (:background "#189a1e1224a2"))))
     `(company-scrollbar-fg ((t (:background "#41bf505b61e3"))))
     ;; text being expanded
     `(company-tooltip-common ((t (:foreground "#33ccff"))))
     `(company-tooltip-common-selection ((t (:foreground "#3a3a6e" :weight bold))))
     ;; autocompletion selection
     `(company-tooltip-selection ((t (:background "orange2" :foreground "#090C42" :weight bold))))
     ;; change background of the box
     `(company-tooltip ((t (:inherit default :background "#41bf505b61e3"))))
     ))
 #+END_SRC

** keybinding
#+BEGIN_SRC emacs-lisp 
  (with-eval-after-load 'company;;remap navigation only if company mode is loaded
    ;;cancel some keys, and activate others
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    )
 #+END_SRC
* Brackets
** autoclosing parantheses
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\" . ?\")
                              ))
  (add-hook
   'LaTex-mode-hook
   (lambda ()
     (setq-local electric-pair-inhibit-predicate
                 `(lambda (c)
                    (if (char-equal c ?{) t (,electric-pair-inhibit-predicate c))))))

  (add-hook 'org-mode-hook 'electric-pair-mode)
  (add-hook 'emacs-lisp-mode-hook 'electric-pair-mode)

#+END_SRC
** highlight brackets
#+BEGIN_SRC emacs-lisp
  (show-paren-mode)
#+END_SRC
** colour coding brackets                                           :darren:
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1)
    (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'org-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    )
#+END_SRC
* Buffers                                                            :darren:
** kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list))) ;;mapc is a for loop, running 'function to the supplied (list)
  (global-set-key (kbd "C-x a b") 'kill-all-buffers)
#+END_SRC
** ibuffer
ibuffer will mean that new buffer is opened in the window that the command was called from
*** config
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("⍫ Magit" (or
                             (name . "^.*gitignore$")
                             (name . "^magit.*$")))
                 ("ᛔ Jupyter" (or
                               (mode . "ein:notebooklist-mode")
                               (name . "\\*ein:.*")
                               ))
                 ("ᛥ Dired" (mode . dired-mode))
                 ("ᚧ Python" (or
                              (mode . python-mode)
                              (mode . inferior-python-mode)
                              (name . "^\\*Python Doc\\*$")
                              (name . "^matplotlibrc$")
                              (name . "^.*mplstyle$")
                              (name . "^\\*Flycheck error messages\\*$")))
                 ("ᛋᛋ Latex" (or
                              (name . "^.*tex$")
                              (name . "^.*bib$")
                              (name . "^.*log$")
                              (name . "\\*RefTeX Select\\*")
                              (mode . comint-mode)))
                 ("ᚸ Org" (name . "\\.org"))
                 ("⚓ Shell" (name . "\\.sh"))
                 ("෴ PDF" (name . "\\.pdf"))
                 ("卍 Config" (name . "^\\..*$"))
                 ("ᛓ Elfeed" (or
                              (name . "\\*elfeed.*\\*")
                              (name . "^ef.*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; (" Emacs" (or
  ;;               (name . "^\\*scratch\\*$")
  ;;               (name . "^\\*Messages\\*$")
  ;;               (name . "^\\*Backtrace\\*$")))
  ;; ("卍 Horter" (or
  ;;               (name . "^\\*dashboard\\*$")
  ;;               (mode . emacs-lisp-mode)))
  ;;(add-to-list `ibuffer-never-show-predicates "*Completions*")
  ;;  (add-to-list `ibuffer-never-show-predicates "*Help*")
  ;; (add-to-list `ibuffer-never-show-predicates "*elfeed-log*")
#+END_SRC
*** column lengths
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-formats 
        '((mark
           modified
           "   "
           (mode 20 30 :left)
           "   "
           ;; (size 9 -1 :right)
           (name 10 70 :left);; :elide)
           "   "
           )
                ;; " "
                ;; (mode 50 50 :left :elide)
                ;; " " filename-and-process)
          ;; (mark " "
                ;; (name 16 -1)
                ;; " " filename)
        ))
#+END_SRC
*** collapse by Default
#+BEGIN_SRC emacs-lisp 
  (setq mp/ibuffer-collapsed-groups (list "Default" "*Internal*" "ᛓ Elfeed"))
  ;; (setq mp/ibuffer-collapsed-groups (list "*Internal*"))

  (defadvice ibuffer (after collapse-helm)
    (dolist (group mp/ibuffer-collapsed-groups)
            (progn
              (goto-char 1)
              (when (search-forward (concat "[ " group " ]") (point-max) t)
                (progn
                  (move-beginning-of-line nil)
                  (ibuffer-toggle-filter-group)
                  )
                )
              )
            )
      (goto-char 1)
      (search-forward "[ " (point-max) t)
    )
 #+END_SRC

** IDO                                                              :darren:
buffer suggestion is given as a list in the terminal command (after C-x b)
*** enable ido mode
 #+BEGIN_SRC emacs-lisp
   (setq ido-enable-flex-matching nil)
   (setq ido-create-new-bffer 'always)
   (setq ido-everywhere t)
   (ido-mode 1)
 #+END_SRC
*** enable vertical mode for buffer suggestion
 #+BEGIN_SRC emacs-lisp
   (use-package ido-vertical-mode
     :ensure t
     :init
     (ido-vertical-mode 1))
   (setq ido-vertical-define-keys 'C-n-and-C-p-only)
 #+END_SRC
*** remap "C-x C-b" buffer switching to ido-switch-buffer
 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
 #+END_SRC

** always kill the current buffer                                   :darren:
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC
* Copying and killing                                                :darren:
** select same element
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-line-this))
#+END_SRC
** copy within region                                               :darren:
this will copy within the first brackets, then second, third, etc
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC

** killing words
when the cursor is in the middle of a word, go to its start and kill it.
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC

** hungry delete                                                    :darren:
hungry delete deletes all white space between cursor and the next character
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
** copying whole line and save the cursor position
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion ;;save the cursor position
      (kill-new            ;;kill the following
       (buffer-substring ;;from begginin of line to end of line
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC

** kill ring                                                        :darren:
nice popup menu when pasting of the past history
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
** iedit (multiple replacements)
mark and edit all copies of the marked region simultaniously. 
#+BEGIN_SRC emacs-lisp 
  (use-package iedit
    :ensure t
    :config
    (global-set-key (kbd "C-:") (function iedit-mode)))
 #+END_SRC
* Default loading screens                                            :darren:
** do not show startup screen                                       :darren:
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC
** maximise to full screen
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
** startup dashboard                                                :darren:
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 20)))
    (setq dashboard-startup-banner "~/creamy_seas/gallery_road/pepe/ree.png")
    (setq dashboard-banner-length 300)
    (setq dashboard-banner-logo-title "- Dinner is 2030. And dinner is first\n              - Respond with exact timings for commitments\n              - Understand that it is hard being pregnant"))
  ;; (setq dashboard-banner-logo-title "Привет от Леонта!"))



#+END_SRC
* Dumb jump (programming)
- Have either a =.git= or =.dumbjump= file in the main project directory
** activating and remapping
#+BEGIN_SRC emacs-lisp 
  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g i" . dumb-jump-go-prompt)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g p" . dumb-jump-back)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config (setq dumb-jump-selector 'ivy) ;;
    :ensure t)
 #+END_SRC
* Essential autism                                                   :darren:
This stuff should be there by default, but >muh autism prevents this from being so
** toggling fullscreen
#+BEGIN_SRC emacs-lisp 
  (add-hook 'prog-mode-hook (
                             lambda ()
                               (define-key prog-mode-map (kbd "M-m") 'toggle-frame-fullscreen)))

  (add-hook 'text-mode-hook (
                             lambda ()
                               (define-key prog-mode-map (kbd "M-m") 'toggle-frame-fullscreen)))
 #+END_SRC
** autocorrect
for this to work, you *must* install ispell
#+BEGIN_SRC emacs-lisp 
  (use-package flyspell
    :ensure t
    :bind(("<f12>" . flyspell-auto-correct-previous-word)))
 #+END_SRC
** wrapping lines
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode t)
#+END_SRC

** key suggestions                                                  :darren:
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
** command line autocompletion
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex ))
#+END_SRC
** yes and no alias                                                 :darren:
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Eyebrowse
change the view mode like a chad
=C-c C-w= to move to window configurations
#+BEGIN_SRC emacs-lisp 
  (use-package eyebrowse
    :ensure t)

  (eyebrowse-mode)3
 #+END_SRC
* Hydra
#+BEGIN_SRC emacs-lisp 
  (use-package hydra
    :ensure t)

  (use-package hideshow-org
      :ensure t
      :config
      (add-hook 'elpy-mode-hook 'hs-minor-mode))

  (defhydra hydra-python-collapse
    (:color pink				;all colors pink by default
            :timeout 1488
            :hint nil
            :foreign-keys run		;when non hydra keys are pressed, keep it open
            :pre (progn(			;what to do when hydra is on
                        set-cursor-color "#40e0d0"))
            :post (progn			;hydro turned off
                    (set-cursor-color "#ffd700")
                    (message
                     "↪ 13 percent of the population accounts for 50 percent of the crime rate")))
    "
  ^Hide^                        ^Show^         
  ^^^^^^^^------------------------------------ 
  _a_: all                      _A_: All
  _b_: block                    _B_: Block
  _l_: level                                   

  "
    ("a" hs-hide-all)
    ("A" hs-show-all)
    ("l" hs-hide-level)
    ("b" hs-hide-block)
    ("B" hs-show-block)
    ;; ("[TAB]" hs-toggle-hiding "toggle hiding")
    ("t" hs-toggle-hiding "toggle hiding")
    ("q" nil "quit")
    )

  (define-key elpy-mode-map (kbd "C-c C-h") (function hydra-python-collapse/body))
 #+END_SRC
* Navigation                                                         :darren:
** transfer using shift keys
#+BEGIN_SRC emacs-lisp
  ;;(windmove-default-keybindings)
#+END_SRC
** switch window with number tags
when the there are more than two windows =C-x o= will give each window a letter that can be jumped to
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 7)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty) 
    (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "g" "h" "i"))
    :bind
    ([remap other-window] . switch-window))
  ;;(global-set-key (kbd "C-M-z") 'switch-window)
#+END_SRC
** move cursor to newly generated window
becuase initially emacs keeps it in the original window
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** jump using highlighted syntax                                    :darren:
the superior search method
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :init
    (global-set-key (kbd "M-s") 'avy-goto-word-or-subword-1)
    (setq avy-background t))
  ;;(global-set-key (kbd "M-s") 'ace-jump-mode)
#+END_SRC

** searching                                                        :darren:
the superior search mode to the original
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :config
    (global-set-key (kbd "C-s") 'swiper))
#+END_SRC
** moving in subwords
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

* Non essential
** clocks 
#+BEGIN_SRC emacs-lisp
;;  (display-time-mode 1)
#+END_SRC

* Numbering                                                          :darren:
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :init
    (setq linum-relative-backend 'display-line-numbers-mode)
    (add-hook 'python-mode-hook 'linum-relative-mode)
    (add-hook 'LaTeX-mode-hook 'linum-relative-mode))
#+END_SRC

* Projectile
Navigation around a set of project files. There's tons of shortcuts to explore
#+BEGIN_SRC emacs-lisp 
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1))
    ;; (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    ;; (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
 #+END_SRC
** Hydra
#+BEGIN_SRC emacs-lisp 
  (defhydra hydra-projectile-other-window (:color teal)
    "projectile-other-window"
    ("f"  projectile-find-file-other-window        "file")
    ("g"  projectile-find-file-dwim-other-window   "file dwim")
    ("d"  projectile-find-dir-other-window         "dir")
    ("b"  projectile-switch-to-buffer-other-window "buffer")
    ("q"  nil                                      "cancel" :color blue))

  (defhydra hydra-projectile (:color teal
                              :hint nil)
    "
       PROJECTILE: %(projectile-project-root)

       Find File            Search/Tags          Buffers                Cache
  ------------------------------------------------------------------------------------------
  _s-f_: file            _a_: ag                _i_: Ibuffer           _c_: cache clear
   _ff_: file dwim       _g_: update gtags      _b_: switch to buffer  _x_: remove known project
   _fd_: file curr dir   _o_: multi-occur     _s-k_: Kill all buffers  _X_: cleanup non-existing
    _r_: recent file                                               ^^^^_z_: cache current
    _d_: dir

  "
    ("a"   projectile-ag)
    ("b"   projectile-switch-to-buffer)
    ("c"   projectile-invalidate-cache)
    ("d"   projectile-find-dir)
    ("s-f" projectile-find-file)
    ("ff"  projectile-find-file-dwim)
    ("fd"  projectile-find-file-in-directory)
    ("g"   ggtags-update-tags)
    ("s-g" ggtags-update-tags)
    ("i"   projectile-ibuffer)
    ("K"   projectile-kill-buffers)
    ("s-k" projectile-kill-buffers)
    ("m"   projectile-multi-occur)
    ("o"   projectile-multi-occur)
    ("s-p" projectile-switch-project "switch project")
    ("p"   projectile-switch-project)
    ("s"   projectile-switch-project)
    ("r"   projectile-recentf)
    ("x"   projectile-remove-known-project)
    ("X"   projectile-cleanup-known-projects)
    ("z"   projectile-cache-current-file)
    ("`"   hydra-projectile-other-window/body "other window")
    ("q"   nil "cancel" :color blue))

  (global-set-key (kbd "C-x p") (function hydra-projectile/body))
 #+END_SRC
* Treemacs                                                      :not_working:
#+BEGIN_SRC emacs-lisp 
  ;; (use-package treemacs
  ;;   :ensure t
  ;;   :defer t
  ;;   :config
  ;;   (progn
  ;;     (setq treemacs-follow-after-init          t
  ;;           treemacs-width                      35
  ;;           treemacs-indentation                2
  ;;           treemacs-git-integration            t
  ;;           treemacs-collapse-dirs              3
  ;;           treemacs-silent-refresh             nil
  ;;           treemacs-change-root-without-asking nil
  ;;           treemacs-sorting                    'alphabetic-desc
  ;;           treemacs-show-hidden-files          t
  ;;           treemacs-never-persist              nil
  ;;           treemacs-is-never-other-window      nil
  ;;           treemacs-goto-tag-strategy          'refetch-index)

  ;;     (treemacs-follow-mode t)
  ;;     (treemacs-filewatch-mode t))
  ;;   :bind
  ;;   (:map global-map
  ;;         ([f8]        . treemacs-toggle)
  ;;         ([f9]        . treemacs-projectile-toggle)
  ;;         ("<C-M-tab>" . treemacs-toggle)
  ;;         ("M-0"       . treemacs-select-window)
  ;;         ("C-c 1"     . treemacs-delete-other-windows)
  ;;   )
  ;; )

  ;; (use-package treemacs-projectile
  ;; ;
                                          ;   :defer t
  ;;   :ensure t
  ;;   :config
  ;;   (setq treemacs-header-function #'treemacs-projectile-create-header)
  ;;   )
 #+END_SRC
* Reverting                                                          :darren:
** undo tree                                                        :darren:
spawns a tree of all the undos that you have ever made
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode 1))
  (global-set-key (kbd "M-/") 'undo-tree-visualize)
#+END_SRC
** backing up file
one can turn it off, or make the backups in a separate directory
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC
* Renaming a currently opened file (C-c m)
#+BEGIN_SRC emacs-lisp 
  (defun rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))

  (global-set-key (kbd "<C-m>")  'rename-file-and-buffer)
 #+END_SRC:
* Hide minor modes                                             :must_be_last:
hides the minor modes that are trivial
#+BEGIN_SRC emacs-lisp
      (use-package diminish
        :ensure t
        :init
        (diminish 'hungry-delete-mode)
        (diminish 'beacon-mode)		
        (diminish 'which-key-mode)
        (diminish 'undo-tree-mode)
        (diminish 'rainbow-mode)
        (diminish 'subword-mode)
        (diminish 'visual-line-mode)
        (diminish 'org-indent-mode)
        (diminish 'prettify-symbols-mode)
  ;;      (diminish 'yas-minor-mode)
        (diminish 'hl-line-mode)
        (diminish 'column-number-mode)
        (diminish 'line-number-mode)
        (diminish 'linum-relative-mode)
    )
#+END_SRC
* Post load
** Global Unbindings
#+BEGIN_SRC emacs-lisp 
  (define-key key-translation-map (kbd "C-x 8 O") (kbd "Ω"))
  (define-key key-translation-map (kbd "C-x 8 #") (kbd "£"))
  (global-set-key (kbd "C-c C-;") (function comment-line))
  (global-set-key (kbd "C-x m")  'rename-file-and-buffer)
  (global-unset-key (kbd "C-c q"))
  (global-unset-key (kbd "C-x #"))
  (global-unset-key (kbd "C-o"))
  (global-unset-key (kbd "ESC ESC ESC"))
  (global-set-key (kbd "C-x C-i") (function server-edit))
  (global-set-key (kbd "C-x C-j") (function ein:run))
 #+END_SRC
** Function calls
#+BEGIN_SRC emacs-lisp 
  (hydra-python-vi/body)
 #+END_SRC
