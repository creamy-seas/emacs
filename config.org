* Do not forget
| =C-c C-h=          | list key bindings by mode     |
| =C-h b=            | list key bindings             |
| =C-h m=            | get major and minor mode info |
| =C-h v major-mode= | get major mode                |

- =export EMACS_HOME="pathToemacs.dDirectory" in =.profile= of the system
- =make sure ispell is installed=

- =rx= to build regular expressions
- global mode -> major mode -> minor mode in terms of key bindings
- modes have hooks associeted with them
- when rebinding keys, call  =define-key MAP (kbd "combo") (function NAME)=
MAP is the keybinding map for the major or minor mode e.g. LaTeX-mode-map
- to set major mode key =(local-set key (kbd "combo") (function NAME)=
- to set global key =(global-set-key (kbd "combo") (function NAME)=
* Passwords (MUST HAVE gpg installed)                           :nnot_working:
** enable the encrypting password package
#+BEGIN_SRC emacs-lisp
  ;;(use-package epa
  ;;     :ensure t
  ;;     :init
  ;;     (custom-set-variables '(epg-gpg-program "/usr/local/bin/gpg"))
  ;;     (epa-file-enable))
#+END_SRC
* Autocapitalize                                                :not_working:
#+BEGIN_SRC emacs-lisp
  ;;  (use-package captain
  ;;    :ensure t
  ;;    :init
  ;;    (global-captain-mode t)
  ;;    (add-hook 'org-mode-h captain-predicate 'captain-sentence-start-function)
  ;;
  ;;    (add-hook 'prog-mode-hook (lambda ()
  ;;				(setq captain-predicate (lambda () nth 8 (syntax-ppss (point))))))
  ;;
  ;;    (add-hook 'text-mode-hook
  ;;	      (lambda ()
  ;;		(setq captain-predicate (lambda () t))))
  ;;    (add-hook 'org-mode-hook
  ;;	      (lambda ()
  ;;		(setq captain-predicate (lambda () (not (org-in-src-block-p))))))
  ;;    )
#+END_SRC
dfsfdsa and that is that. come on. why doesnt it work? do i. dsfds. dsfdsdsaaaa. hheh. dsfdasflkjdsa. hrelo. tetst. dsfsa.
* Terminal and Bash
** import bash variables
#+BEGIN_SRC emacs-lisp 
  (use-package exec-path-from-shell
    :ensure t
    :init
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))
    )

  (defun ilya_fire-up-from-emacs(relative-path)
    "Create a string that appends onto the systems .emacs.d directory. EMACS_HOME must be specified in .profile"
    (setq path (exec-path-from-shell-copy-env "EMACS_HOME"))
    (concat path "/" relative-path)
    )
 #+END_SRC
** do not ask for kill confirmation
#+BEGIN_SRC emacs-lisp 
  (setq kill-buffer-query-functions nil)
 #+END_SRC
** shell mode source in org mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC"))
#+END_SRC
** setting default shell to Bash
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

** shortcut
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC

** sudo edit (root editing of files)
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+END_SRC
** dmenu (file browsing)                                              :fixup:
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("s-SPC" . 'dmenu))
#+END_SRC
** execution path
#+BEGIN_SRC emacs-lisp 
   (defun set-exec-path-from-shell-PATH ()
    "Sets the exec-path to the same value used by the user shell"
    (let ((path-from-shell
           (replace-regexp-in-string
            "[[:space:]\n]*$" ""
            (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  ;; call function now
  (set-exec-path-from-shell-PATH)
 #+END_SRC
** emacs executable path
path for emacs executables to
#+BEGIN_SRC emacs-lisp 
  (setq exec-path (append exec-path '("/usr/local/bin")))
 #+END_SRC
* Very cool benis
** reload file on the go
any changes of a file, will be automatically reloaded
#+BEGIN_SRC emacs-lisp 
  (global-auto-revert-mode 1)
  (setq auto-revert-mode nil)
 #+END_SRC
** multiple cursors
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-(") 'mc/mark-next-lines)
  (global-set-key (kbd "C-)") 'mc/mark-previous-lines)
#+END_SRC
** symon mode
(system memory etc showing at the bottom of the screen)
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("s-h" . symon-mode))
#+END_SRC

** greek letters
#+BEGIN_SRC emacs-lisp
  (when window-system (global-prettify-symbols-mode t))
#+END_SRC
* C++ mode
*** Preliminary instructions
1) you need to first check that clang is on computer =clang --version=
2) then make sure that cmake is also installed =brew install cmake=
3) after filling out the code below, run =M-x irony-install-server=
4) this should prepare to run some long command like:
#+BEGIN_SRC sh
  cmake -DCMAKE_INSTALL_PREFIX\=/Users/CCCP/.emacs.d/irony/  /Users/CCCP/.emacs.d/elpa/irony-20181218.2241/server && cmake --build . --use-stderr --config Release --target install
#+END_SRC
5) *copy this into terminal and evalute. Then it chould be working*
#+BEGIN_SRC emacs-lisp 
   ;;tie backend of autocompletion to company-irony
  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  ;;setup company-irony with c++ connection
  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  ;;finally ensure that c++-mode-hook is activated when company mode is on
  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode))
 #+END_SRC
* LaTeX mode (AUCTex LaTeX mode)                          :emacs_home:ispell:
** latex commands                                           :listOfCommands:
I will most be using CDLaTeX to type in a command and then autocomplete it
Yasnippet to add stuff once I am there (like and an extra item) and create own tab commands
I will use C-c C-f for font changes
Indenting environment
|-----------------+------------------------------------------+----------------------------------|
| TABBING         | -----------------                        | ------------------               |
| =cdlatex=       | tabbing out common commands              | =cdlatex= help with =C-c ?=      |
| =yasnippet=     | tabbing out common and personal commands | =yasnippet= =yasnippet-snippets= |
| CREATE AND FILL | ------------------                       | -------------------              |
| =C-c C-f=       | change the font                          | =auctex=                         |
| =C-c C-e=       | create figure environemnt                | =auctex=                         |
| =C-c C-s=       | create section environment               | =auctex=                         |
| =`=             | math mode help                           | =LaTeX-math-mode=                |
| REFFERENCING    | ------------------                       | -------------------              |
| =C-c (= =C-c )= | create/use refference                    | =reftex=                         |
| =C-c [=         | refferences a citation                   | =reftex=                         |
| =C-c ==         | create content list to navigate          | =reftex=                         |
| AESTHETICS      | ------------                             | --------------                   |
| =C-c C-o=       | autohide sections                        | =TeX-fold-mode=                  |
| =C-c C-q C-e=   | indent environment or region             |                                  |
| COMMENTING      | ------------                             | --------------                   |
| =C-c '=         | comment paragraph                        |                                  |
| =C-c ;=         | comment region                           |                                  |
| COMPILING       | ------------                             | --------------                   |
| =C-c C-c=       | run next latex generations tep           |                                  |
| =C-c `=         | look through errors                      |                                  |
| =C-c C-v=       | Look at pdf                              |                                  |
|-----------------+------------------------------------------+----------------------------------|

** general setup
- =flyspell= requires ispell to be installed on computer
#+BEGIN_SRC emacs-lisp
  (use-package latex
    :ensure auctex
    :init
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)  ;;access imported packages
    (setq TeX-save-query nil)  ;;don't prompt file save
    (setq-default TeX-show-compilation t)
    (setq TeX-interactive-mode t)
    (setq Tex-master nil)  ;;specify master file for each project
    :config
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    (add-hook 'LaTeX-mode-hook
              (lambda () (TeX-fold-mode 1)))
    (add-hook 'LaTeX-mode-hook
              (lambda () (set (make-variable-buffer-local 'TeX-electric-math)
                         (cons "$" "$"))))
    :hook
    (LaTeX-mode-hook . LaTeX-math-mode);; type ` to get suggestions
    (LaTeX-mode-hook . font-lock-mode);; font highlighting
    )
 #+END_SRC
** generation commands
*Some important AucTex commands and variables*
| =TeX-expand-list-builtin= | pair list tying command with a % expression e.g. =%s= -> master latex file |
| =TeX-expand-list=         | this variables contains the above =TeX-expand-list-builtin                 |
| =Tex-command-expand=      | "commandInStringForm" 'TeX-master-file TeX-expand-list                     |
*** generate file =C-c C-m=
1 - a process name is generated based off the name of the master file
2 - the actual command calls the =pdf_engine= script in the emacs.d directory
3 - expansion if performed to change =%s= to the master file name
#+BEGIN_SRC emacs-lisp 
  (defun ilya_gen-key ()
    "Command binded to C-c C-m will make the pdf with latexmk"
    (interactive)
    (minibuffer-message (concat "ᛋᛋ Generating \"" (TeX-master-file) "\" ᛋᛋ"))
    (let (
          ;; 1 - variable definition
          (command-script (ilya_expand-latex-command "~/creamy_seas/syncFiles/emacs_config/ilya_scripts/pdf_engine.sh %s")))

      ;; 2 - prepare for compilation buffer
      (ilya_latex-compilation-prepare "generate-zoomer-pdf")
    
      ;; 3 - launch compilation
      (ignore-errors
        (TeX-run-TeX ilya_latex-compilation-process-id command-script (TeX-master-file))))
    )

  (add-hook 'LaTeX-mode-hook (lambda ()
                               (local-set-key (kbd "C-c C-m") (function ilya_gen-key))))
 #+END_SRC
*** exterminate files =C-c C-j=
1 - kill any running processes on this master files
2 - delete the buffer that was running that process
3 - move files into output directory
4 - close this buffer as well

#+BEGIN_SRC emacs-lisp
  (defun ilya_jew-key()
    (interactive)
    (minibuffer-message (concat "卍 Exterminating \"" (ilya_get-master-file-name) "\" 卍"))
    (let ((command-script (ilya_expand-latex-command "~/creamy_seas/syncFiles/emacs_config/ilya_scripts/jew_engine.sh %s")))


      ;; 1 - get the buffer names and variables of running process
      (ilya_latex-compilation-prepare "generate-zoomer-pdf")

      ;; 2 - delete the "genPDF" process for the current master file
      (ignore-errors
        (set-process-query-on-exit-flag (get-process ilya_latex-compilation-process-id) nil)
        (delete-process (get-process ilya_latex-compilation-process-id)))

      ;; 3 - delete the buffer the process was in (reset the buffer name)
      (ignore-errors (kill-buffer (TeX-active-buffer)))
      (ignore-errors (kill-buffer "*TeX Help*"))

      ;; 4 - prepare variables for the gassing
      (ilya_latex-compilation-prepare "jewGas")

      (ignore-errors 
        (TeX-run-TeX "jew_process" command-script (TeX-master-file))
        )

      ;; 5 - close this buffer window
      (kill-buffer (get-buffer "卍 Exterminating 卍"))
      (minibuffer-message "===> 卍 Extermination complete 卍 - heil!")))

  (add-hook 'LaTeX-mode-hook (lambda ()
                               (define-key LaTeX-mode-map (kbd "C-c C-j") nil)
                               (local-set-key (kbd "C-c C-j") (function ilya_jew-key))))

  ;;actually, global is overkill, since local will take precendence. and define-key... should be replaced with local-set-key too
#+END_SRC
*** jump to pdf =C-c C-v=
- skim is run, reading the current line in the emacs buffer and highlighting it in the pdf
- =syntex.gz= file needs to be in the directory for this to occur, so it's copied
| unique to skim  |                                                      |
| =-b=            | inserts a reading bar into the pdf                   |
| =-g=            | tells it to load in background                       |
| unique to emacs | commands in TeX-expand-list-builtin in =tex.el= file |
| =%n=            | is the line number we are on                         |
| =%o=            | is the output file name                              |
| =%b=            | is the tex file name                                 |

#+BEGIN_SRC emacs-lisp
  (setq TeX-view-program-list
        '(("SkimViewer" "~/creamy_seas/syncFiles/emacs_config/ilya_scripts/search_engine.sh %s %n %o %b")))

  (setq TeX-view-program-selection '((output-pdf "SkimViewer")))
  (server-start)
 #+END_SRC
*** supporting functions
#+BEGIN_SRC emacs-lisp
  (defun ilya_LaTeX-compilation-buffer-size ()
    "Resize the latex compilation buffer when it launches because it is seriosuly bloat"

    (progn
      ;;1) pdf generation case
      (if (string-equal ilya_latex-compilation-process-type "generate-zoomer-pdf")
          (progn
            (ignore-errors (rename-buffer ilya_latex-compilation-buffer-name))
            (setq compilation-window-name (get-buffer-window ilya_latex-compilation-buffer-name))
            (window-resize-no-error compilation-window-name (- 5 (window-height compilation-window-name "floor")))))
      ;;2) file clearing case
      (if (string-equal ilya_compilation-process "jewGas")
          (progn
            (ignore-errors (rename-buffer ilya_compilation-name))))))

;;  (add-hook 'comint-mode-hook (function ilya_LaTeX-compilation-buffer-size))

  (defun ilya_latex-compilation-prepare (process-type)
    "Set variables that the latex compilation buffer will use"
    ;; 1 - get the master file name
    (setq temp-master-file (ilya_get-master-file-name))

    ;; 2 - generate further variables
    (setq ilya_latex-compilation-process-id (concat process-type "_" temp-master-file))
    (setq ilya_latex-compilation-process-type process-type)
    (setq ilya_latex-compilation-master-file temp-master-file)

    ;; 3 - generate buffer name
    (if (string-equal process-type "generate-zoomer-pdf")
        (setq ilya_latex-compilation-buffer-name (concat "ᛋᛋ Compiling [" temp-master-file "] ᛋᛋ")))
    (if (string-equal process-type "jewGas")
        (setq ilya_latex-compilation-buffer-name "卍 Exterminating 卍")))

  (defun ilya_get-master-file-name ()
    "Get the name of the master latex file in the current project"
    (interactive)
    (TeX-command-expand "%s" 'TeX-master-file TeX-expand-list))

  (defun ilya_expand-latex-command (command-script)
    (interactive)
    "Expands the latex command by evaluating the % variables in accordance with the system's master file"
    (TeX-command-expand command-script 'TeX-master-file TeX-expand-list))
 #+END_SRC

*** error checking =C-c C-w=
natively, auctex creates a list of errors once the compiling finishes.
here we make it do it explictly 
1 - get the current active compilation buffer.

#+BEGIN_SRC emacs-lisp 
  (defun ilya_latex-next-error (args)
    "Reads the compilation buffer and extracts errors to run through"
    (interactive "p")

    ;; 1 - search for active buffer (assign it to tempvar)
    (if-let ((tempvar (TeX-active-buffer)))

        ;; 2 - if open, go to that buffer and get all the errors
        (save-excursion
          (set-buffer (TeX-active-buffer))
          (TeX-parse-all-errors)

          ;; 3 - display error list
          (if TeX-error-list
              (minibuffer-message "ᛋᛋ Jew hunt finished ᛋᛋ"))

          ;; 4 - iterate through error list
          (call-interactively (function TeX-next-error))
          ;; clear region
          (delete-region (point-min) (point-max))
          (minibuffer-message "ᛋᛋ Make this totally aryan, free from scheckel mounds ᛋᛋ"))

      (minibuffer-message "ᛋᛋ But mein Führer - there's no-one running ᛋᛋ"))) 

  (add-hook 'LaTeX-mode-hook (lambda ()
                               (local-unset-key (kbd "C-c C-w"))
                               (local-set-key (kbd "C-c C-w") (function ilya_latex-next-error))))

  (defmacro my-save-excursion (&rest forms)
    (let ((old-point (gensym "old-point"))
          (old-buff (gensym "old-buff")))
      `(let ((,old-point (point))
             (,old-buff (current-buffer)))
         (prog1
             (progn ,@forms)
           (unless (eq (current-buffer) ,old-buff)
             (switch-to-buffer ,old-buff))
           (goto-char ,old-point)))))
 #+END_SRC
** minor modes
*** reftex
#+BEGIN_SRC emacs-lisp 
  (use-package reftex
    :ensure t
    :init
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-AUCTeX t)
    )
 #+END_SRC
*** cdlatex (autcompletion)
#+BEGIN_SRC emacs-lisp 
  (use-package cdlatex
    :ensure t
    :config
    (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex))
 #+END_SRC
** matching regular expressions
*Suppose we want to highlight certain constructs in a document*
The first thing that would happen, is latex searches for matching expressions - we need to create a rule for it to do so.

It would be a mumble jumble like
="\\(«\\(.+?\\|\n\\)\\)\\(+?\\)\\(»\\)"=

which can be created by running =(regexp-opt '("string1" "string2" etc) OPTION)=
where =OPTIONG= can be 
| 'words   | to go specify match in start/end of word  |
| 'symbols | to specifify match in start/end of symbol |
| t        | to specif                                 |
| .        | matches any character                     |
| ?        | repeat the previos match 0 or 1 time      |
| +        | repeat the previous match 1 or more time  |
| *        | repeat previous match 0 or more times     |

for more info go to https://www.emacswiki.org/emacs/RegularExpression

The string below matches anything in quotes «» (to access quotes, run ="C-x 8 "=
#+BEGIN_SRC emacs-lisp
  (font-lock-add-keywords 'latex-mode
                          (list
                           (list
                            "\\(«\\(.+?\\|\n\\)\\)\\(+?\\)\\(»\\)"
                            '(1 'font-latex-string-face t)
                            '(2 'font-latex-string-face t)
                            '(3 'font-latex-string-face t)))) 
 #+END_SRC
** latex fill settings
#+BEGIN_SRC emacs-lisp 
  (use-package fill-column-indicator
    :ensure t
    :config
    (add-hook 'LaTeX-mode-hook 'fci-mode)
    (setq fci-rule-color "#248")
    (setq fci-rule-width 1))

  (defun ilya_buffer-fill-column ()
    (interactive)

    ;; 1 - get the window width
    (setq windowWidth (window-width))
    (setq temp-fill-width (- windowWidth 10))

    ;; 2 - set the fill width to 94 max
    (if (> 94 temp-fill-width)
        (set-fill-column temp-fill-width)
      (set-fill-column 94)))


  (global-set-key (kbd "C-c l") (function ilya_buffer-fill-column))
 #+END_SRC
 
** remove bindings
#+BEGIN_SRC emacs-lisp 
  (add-hook 'LaTeX-mode-hook (lambda ()
                               (local-unset-key (kbd "C-c C-a"))
                               (local-unset-key (kbd "C-c C-b"))
                               (local-unset-key (kbd "C-c C-d"))
                               (local-unset-key (kbd "C-c C-k"))
                               (local-unset-key (kbd "C-c C-r"))
                               (local-unset-key (kbd "C-c C-z"))
                               (local-unset-key (kbd "C-c ESC"))
                               (local-unset-key (kbd "C-c C-t"))
                               (local-unset-key (kbd "C-c <")) ;;index and glossary
                               (local-unset-key (kbd "C-c /")) ;;index
                               (local-unset-key (kbd "C-c \\")) ;;index
                               (local-unset-key (kbd "C-c >")) ;;index
                               (local-unset-key (kbd "C-c _")) ;;set master file
                               (local-unset-key (kbd "C-c C-n")) ;;normal mode (use C-c #)
                               ))

  (global-unset-key (kbd "C-c q"))



  (defun ilya_insert-underscore (args)
    "Inserts an underscore, because the jews put in dollars around it"
    (interactive "P")
    (insert "_"))

  (add-hook 'LaTeX-mode-hook (lambda ()
                               (local-set-key (kbd "C-c C-u") (function ilya_insert-underscore))
                               (local-unset-key (kbd "C-c C-q"))
                               (local-set-key (kbd "C-c C-q") (function ilya_latex-indent-buffer))
                               ))

  (defun ilya_latex-indent-buffer (args)
    "Indents the full buffer"
    (interactive "P")
    ;; 1 - fill the column
    (setq justify-width (ilya_buffer-fill-column))

    ;; 3 - perform fill
    (LaTeX-fill-buffer justify-width)
    )


 #+END_SRC
* Org mode
**** get rid of anoying 'ding in table'
C-u C-c C-x !
** load up the updates version
#+BEGIN_SRC emacs-lisp
  ;;(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC
** agenda files
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files
        (append
         (file-expand-wildcards "*.org")))
#+END_SRC
** bullets
the nice bullets instead of multiplication symbols
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'org-bullets)
    (package-refresh-contents)
    (package-install 'org-bullets))
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** open code editing in the same window (not side by side)
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** emacs-lisp automatic config generation 
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp \n ? \n #+END_SRC"))
#+END_SRC
** indentation                                                 :indent_mode:
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
** export to nice html
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t
  )
#+END_SRC
** export to presentation
#+BEGIN_SRC emacs-lisp
  ;;(use-package ox-reveal
  ;;  :ensure t)
  ;;(use-package htmlize
  ;;  :ensure t)
  ;;(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
#+END_SRC
* Python mode
** commands
| =C-c C-e=   | edit all occurunces of this symbol in the file |
| =C-C C-r r= | refactor the code (needs rope)                 |
|             |                                                |
** external setup
*** install =virtualenvwrapper=
**** mac
=pip install virtualenvwrapper= 

add the following to the =~/.bashrc= file to tell where the environment will be located
#+BEGIN_SRC sh
  export WORKON_HOME=~/creamy_seas/syncFiles/python_vi
  source /usr/local/bin/virtualenvwrapper.sh
#+END_SRC

**** arch
=sudo pacman -S python-virtualenvwrapper=

add the following to =bashrc=
#+BEGIN_SRC sh
  export WORKON_HOME=~/creamy_seas/syncFiles/python_vi
  source /usr/bin/virtualenvwrapper.sh
#+END_SRC
(** setup python virtual environment
make virtual end with =mkvirtualenv NAME=
|------------------------------------+----------------------------------------------|
| =source NAMELOCATION/bin/activate= | activate an environment                      |
| =deactivate=                       | deactivate an environement                   |
| =workon NAME=                      | swtich environment                           |
| =lssitepackages=                   | list everything that is installed            |
| =pip install PACKAGENAME=          | install a package to the virtual environemnt |
| =echo $VIRTUAL_ENV=                | the currently activate virtual environment   |
|------------------------------------+----------------------------------------------|

*** to install using pip
|---------------+---------------------------------------------|
| =rope=        | 'refactoring' library                       |
| =jedi=        | autocompletion python (suggest names)       |
| =flake8=      | linting (checks typos, syntax errors)       |
| =autopep8=    | format the code (indent etc). uses =flake8= |
| =importmagic= | automatic imports                           |
| =yapf=        | code formatiing                             |
| =ipython3=    | kernel                                      |
| =jupyter=     | notebook                                    |
| =matplotlib=  |                                             |
| =qutip=       | needs =numpy= =Cython= =scipy=              |
| PyQt5         | gui interface                               |
|---------------+---------------------------------------------|
#+TBLFM: $1=PyQt5

*** tell emacs to use the specific virtual environment
#+BEGIN_SRC emacs-lisp
  (use-package pyenv-mode
    :ensure t
    :config
    (if (file-exists-p "~/macbook_localiser")
        (pyvenv-activate "~/creamy_seas/syncFiles/python_vi/mac_vi")
      (pyvenv-activate "~/creamy_seas/syncFiles/python_vi/arch_vi")))
#+END_SRC
** matplotlib setup
- put the =matplotlibrc= files into either =.config/matplotlib= or =.matplotlib=
- check location with =matplotlib.matplotlib_fname()= or =matplotlib.get_configdir()=

*** setting the backend
to control where the plots are sent to, set the backend to =Qt5Agg=
*** creating styles
- to print the available styles =plt.styles.available=
- to use styles =plt.style.use('ggplot')=
- create a style document =example.mplstyle= in the =matplolib/stylelib= folder
** activate elpy and choose interpreter
#+BEGIN_SRC emacs-lisp 
  (use-package elpy
    :ensure t
    :config
    (elpy-enable))
 #+END_SRC
*** jupyter notebook
#+BEGIN_SRC emacs-lisp 
  ;;(setq python-shell-interpreter "jupyter"
  ;;      python-shell-interpreter-args "console --simple-prompt"
  ;;      python-shell-prompt-detect-failure-warning nil)
  ;;(add-to-list 'python-shell-completion-native-disabled-interpreters
  ;;             "jupyter")
 #+END_SRC
*** ipython (do not use - buggy)
#+BEGIN_SRC emacs-lisp 
  ;;(setq python-shell-interpreter "ipython"
  ;;      python-shell-interpreter-args "-i --simple-prompt") 
 #+END_SRC
*** python3 (use in script mode)
#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "python3"
      python-shell-interpreter-args "-i")
#+END_SRC
** elpy settings
*** syntax checking =jedi, flycheck=
- deactivate flymake and use flycheck - syntax is checked ont the fly
- uses jedi
#+BEGIN_SRC emacs-lisp 
  (use-package flycheck
    :ensure t
    :init
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))  
 #+END_SRC
*** code formatting =autopep8=
- automatically fix syntax errors upon saving
#+BEGIN_SRC emacs-lisp 
  (use-package py-autopep8
    :ensure t
    :init
    (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))  
 #+END_SRC
** ein (jupyter notebook server in emacs)
#+BEGIN_SRC emacs-lisp 
;;  (use-package ein
;;   :ensure t) 
 #+END_SRC
** window splitting
#+BEGIN_SRC emacs-lisp 
  (defadvice elpy-shell-send-region-or-buffer (after ilya-resize-python-buffer activate)
    (window-resize-no-error (get-buffer-window "*Python*") (- 10 (window-height (get-buffer-window "*Python*") "floor"))))
 #+END_SRC
** minor modes
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'highlight-indentation-mode)
    )
#+END_SRC
* RSS mode
** location of configuration file
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
    :ensure t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/creamy_seas/syncFiles/emacs_config/elfeed.org")))
#+END_SRC
** environment setup
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :init
    (global-set-key (kbd "C-c f") 'elfeed)
    (setq-default elfeed-search-filter "@2-year-ago +unread")
    (setq elfeed-db-directory "~/creamy_seas/syncFiles/emacs_config/elfeeddb")
    :bind     ;;once the package is loaded, bing some commands
    (:map elfeed-search-mode-map
          ("*" . bjm/elfeed-star)
          ("8" . bjm/elfeed-unstar)
          ("q" . bjm/elfeed-save-db-and-bury)
          ("h" . make-hydra-elfeed)
          ("H" . make-hydra-elfeed))
    )
#+END_SRC
** setting up hydra macros
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)

  (defhydra hydra-elfeed (global-map "<f5>")
    ""
    ("l" (elfeed-search-set-filter "@1-year-ago +boomer") "luke boomer")
    ("s" (elfeed-search-set-filter "@1-year-ago +strat") "stratechery")
    ("i" (elfeed-search-set-filter "@1-year-ago +starred") "shiny star")
    ("*" bjm/elfeed-star "star it" :color pink)
    ("8" bjm/elfeed-unstar "unstar it" :color pink)
    ("a" (elfeed-search-set-filter "@1-year-ago") "all")
    ("q" bjm/elfeed-save-db-and-bury "quit" :color blue)
    )

  ;;functiont that is associated with "H" keybinding in elfeed mode
  (defun make-hydra-elfeed ()
    ""
    (interactive)
    (hydra-elfeed/body))
#+END_SRC
** functions
#+BEGIN_SRC emacs-lisp
  (defun bjm/elfeed-star ()
    "Apply starred to all selected entries."
    (interactive)
    (let* ((entries (elfeed-search-selected))
           (tag (intern "starred")))

      (cl-loop for entry in entries do (elfeed-tag entry tag))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))

  (defun bjm/elfeed-unstar ()
    "Remove starred tag from all selected entries."
    (interactive)
    (let* ((entries (elfeed-search-selected))
           (tag (intern "starred")))

      (cl-loop for entry in entries do (elfeed-untag entry tag))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))

  ;;functions to support syncing .elfeed between machines
  ;;makes sure elfeed reads index from disk before launching
  (defun bjm/elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  ;;write to disk when quiting
  (defun bjm/elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))

  (defun bjm/elfeed-show-all ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-all"))
#+END_SRC
** colouring
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-goodies
    :ensure t
    :config
    (elfeed-goodies/setup))

  (custom-set-faces
   '(elfeed-search-date-face
     ((t :foreground "#11a"
         :weight bold
         ))))

  (custom-set-faces
   '(elfeed-search-feed-face
     ((t :foreground "#444"
         :weight bold
         ))))

  (custom-set-faces
   '(elfeed-search-title-face
     ((t :foreground "#3ef"
         :weight bold
         ))))

  (defface elfeed-search-starred-title-face
    '((t :foreground "#f77"
         :weight extra-bold
         :underline t))
    "marks a starred Elfeed entry")

  (push '(starred elfeed-search-starred-title-face) elfeed-search-face-alist)
#+END_SRC
** image chaseup
   The problem is that the entry content only includes the tiny reddit-hosted thumbnail and Elfeed doesn't know to chase through the chain of links to get to the actual image that you care about. You could try assigning your own function to elfeed-show-refresh-function that treats reddit posts differently (and calling the default for everything else). You'd need to shr-insert an img element with the full size image as the src.
* SSH mode
** setting up trampXS
#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :ensure t
    :config
    (custom-set-variables
     '(tramp-default-method "ssh")
     '(tramp-default-user "antonov")
     '(tramp-default-host "192.168.0.5")))
  ;;  (add-to-list 'tramp-default-user-alist
  ;;               '("ssh" "192\\.168\\.0\\.5#6767" "antonov")))
    ;;  (custom-set-variables
    ;;  '(tramp-default-method "ssh")
  ;;  '(tramp-default-user "antonov")
     ;;  '(tramp-default-host "134.219.128.96")))
  ;;   (add-to-list 'tramp-default-proxies-alist
  ;;	       '("134\\.219\\.128\\.96" "root" ;;"/ssh:antonov@134.219.128.96:"))
  ;;when using /sudo:134.219.128.96 we first login to the proxy via my antonov@134.219.128.96 account, and then | as sudo to the root@134.219.128.96
  ;;([host] [username] [proxy])
#+END_SRC
** to connect type =C-x C-f /-::/directiontofile=
** to connect as sudo =C-x C-f /sudo:134.219.128.96:directiontofile=
   ;;(use-package auth-source
   ;;  :ensure t
   ;;  :config
   ;;  (customize-set-variable 'auth-sources "~/.authinfo"))
* Alternative keybindings
** zoom in and out
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t
    :init
    (defhydra hydra-zoom (global-map "<f9>")
      "zoom"
      ("g" text-scale-increase "in")
      ("l" text-scale-decrease "out")))
#+END_SRC
* Autocomplete Yasnippet                                           :yas_mode:
- Autocompletion by typing in first part of word and tabbing to insert a template
- yasnippet is the framework
- yasnippet-snippets is the official collection of snippets

*create a hard link between the =.emacs.d/snippets= files and the =.emacs/elpa/yasnippets-snippets/snippets/REQUIRED_MODE/= files*
#+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t

      :init
      (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
      (add-hook 'LaTeX-mode-hook 'yas-minor-mode)
      (global-set-key (kbd "C-c C-n") 'yas-new-snippet)
      (yas-global-mode)
      :config
  ;;    (add-to-list 'yas-snippet-dirs (ilya_fire-up-from-emacs "snippets/snippet-mode")) ;; adds our locally created snippets
      (add-to-list 'yas-snippet-dirs "~/creamy_seas/syncFiles/emacs_config/snippets/snippet-mode")
      (use-package yasnippet-snippets
        :ensure t)
      (yas-reload-all))
#+END_SRC
* Autocomplete Company                                         :company:mode:
Autocomplete shoudl only run in certain environments
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (add-hook 'org-mode-hook 'company-mode)
    (add-hook 'emacs-lisp-mode-hook 'company-mode)
    (add-hook 'text-mode-hook 'company-mode)

  ;;  (add-hook 'after-init-hook 'global-company-mode)
  ;;  (setq company-global-modes '(not LaTeX-mode))
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 4))

  (with-eval-after-load 'company;;remap navigation only if company mode is loaded
    ;;cancel some keys, and activate others
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    )
#+END_SRC
* Buffers 
** kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list))) ;;mapc is a for loop, running 'function to the supplied (list)
  (global-set-key (kbd "C-x a b") 'kill-all-buffers)
#+END_SRC
** enable ibuffer
ibuffer will mean that new buffer is opened in the window that the command was called from
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
** IDO 
buffer with better representation.
*** enable ido mode
buffer suggestion is given as a list in the terminal command (after C-x b)
 #+BEGIN_SRC emacs-lisp
   (setq ido-enable-flex-matching nil)
   (setq ido-create-new-biffer 'always)
   (setq ido-everywhere t)
   (ido-mode 1)
 #+END_SRC
*** enable vertical mode for buffer suggestion
 #+BEGIN_SRC emacs-lisp
   (use-package ido-vertical-mode
     :ensure t
     :init
     (ido-vertical-mode 1))
   (setq ido-vertical-define-keys 'C-n-and-C-p-only)
 #+END_SRC
*** remap "C-x C-b" buffer switching to ido-switch-buffer
 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
 #+END_SRC

** always kill the current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC
* Copying and killing
** select same element
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-line-this))
#+END_SRC
** copy within region
this will copy within the first brackets, then second, third, etc
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC

** killing words
when the cursor is in the middle of a word, go to its start and kill it.
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC

** hungry delete                                         :hungry:delete:mode:
hungry delete deletes all white space between cursor and the next character
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
** copying whole line and save the cursor position
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion ;;save the cursor position
      (kill-new            ;;kill the following
       (buffer-substring ;;from begginin of line to end of line
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC

** kill ring
nice popup menu when pasting of the past history
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
** select all cases (iedit)
#+BEGIN_SRC emacs-lisp 
  (use-package iedit
    :ensure t)
 #+END_SRC
* Default loading screens
** do not show startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC
** maximise to full screen
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
** startup dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 20)))
    (setq dashboard-banner-logo-title "Привет от Леонта!"))
#+END_SRC
* Essential autism
This stuff should be there by default, but >muh autism prevents this from being so
** toggling fullscreen
#+BEGIN_SRC emacs-lisp 
  (add-hook 'prog-mode-hook (
                             lambda ()
                               (define-key prog-mode-map (kbd "M-m") 'toggle-frame-fullscreen)))

  (add-hook 'text-mode-hook (
                             lambda ()
                               (define-key prog-mode-map (kbd "M-m") 'toggle-frame-fullscreen)))
 #+END_SRC
** autocorrect
for this to work, you *must* install ispell
#+BEGIN_SRC emacs-lisp 
  (use-package flyspell
    :ensure t
    :bind(("<f12>" . flyspell-auto-correct-previous-word)))
 #+END_SRC
** wrapping lines                                           :visual_line_mode:o
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode t)
#+END_SRC

** key suggestions                                           :which:key:mode:
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
** command line autocompletion
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex ))
#+END_SRC
** yes and no alias
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Navigation
** transfer using shift keys
#+BEGIN_SRC emacs-lisp
  ;;(windmove-default-keybindings)
#+END_SRC
** switch window with number tags
when the there are more than two windows =C-x o= will give each window a letter that can be jumped to
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 7)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty) 
    (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
  ;;(global-set-key (kbd "C-M-z") 'switch-window)
#+END_SRC
** move cursor to newly generated window
becuase initially emacs keeps it in the original window
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** jump using highlighted syntax
the superior search method
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :init
    (global-set-key (kbd "M-s") 'avy-goto-word-or-subword-1)
    (setq avy-background t))
  ;;(global-set-key (kbd "M-s") 'ace-jump-mode)
#+END_SRC

** searching
the superior search mode to the original
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :config
    (global-set-key (kbd "C-s") 'swiper))
#+END_SRC
** moving in subwords                                          :subword:mode:
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

* Non essential
** clocks 
#+BEGIN_SRC emacs-lisp
;;  (display-time-mode 1)
#+END_SRC

* Numbering
** line and column numbering
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
  (global-hl-line-mode 1)
#+END_SRC  
** relative line numbering
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :init
    (setq linum-relative-backend 'display-line-numbers-mode))

  (linum-relative-global-mode)


#+END_SRC

* Shortcuts
** function to open up the config file for editing
#+BEGIN_SRC emacs-lisp
  (defun config-visit()                       ;;no arguments
    (interactive)                                 ;;function type
    (find-file "~/creamy_seas/syncFiles/emacs_config/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit) ;;call the function defined above
#+END_SRC
** function to load the configuration into emacs
#+BEGIN_SRC emacs-lisp
  (defun reload-config()
    (interactive)
    (org-babel-load-file (expand-file-name "~/creamy_seas/syncFiles/emacs_config/config.org")))
  (global-set-key (kbd "C-c r") 'reload-config)
#+END_SRC

* Reverting
** undo tree                                                 :undo:tree:mode:
spawns a tree of all the undos that you have ever made
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode 1))
  (global-set-key (kbd "M-/") 'undo-tree-visualize)
#+END_SRC
** backing up file
one can turn it off, or make the backups in a separate directory
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

* Renaming a currently opened file (C-c m)
#+BEGIN_SRC emacs-lisp 
  (defun rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))

  (global-set-key (kbd "C-c m")  'rename-file-and-buffer)
 #+END_SRC
* Emacs feel
** menus
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format "nsdap")
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** fonts                                                    :require_install:
to access the inconsolata font you need to 
**** download the .ttf file and put into the font directory
**** run =M-x customize= go to =faces= then =defaults= and type =Inconsolata=
** bottoms bar
#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "~/macbook_localiser")
      (progn
        (use-package powerline			
          :ensure t
          :init
          (powerline-center-theme)
          (setq ns-use-srgb-colorspace nil))
        (setq powerline-default-separator 'wave))
    (progn
      (use-package spaceline
        :ensure t
        :config
        (require 'spaceline-config)
        (setq powerline-default-separator (quote arrow))
        (setq ns-use-srgb-colorspace nil)
        (spaceline-spacemacs-theme))))
#+END_SRC
** theme
#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "~/macbook_localiser")
      (load-theme 'misterioso)
    (use-package spacemacs-theme
      :defer t
      :ensure t
      :config (load-theme 'spacemacs-dark)))
#+END_SRC
** line highlight
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
  (set-face-background 'hl-line "#3e4446")
  (set-cursor-color "yellow")
#+END_SRC
** current line fade                                           :beacon:mode:
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
** setting hexadecimal to the correct colour                  :rainbow:mode:
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
* Emacs brackets
** autoclosing parantheses
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\" . ?\")
                              ))
  (add-hook
   'LaTex-mode-hook
   (lambda ()
     (setq-local electric-pair-inhibit-predicate
                 `(lambda (c)
                    (if (char-equal c ?{) t (,electric-pair-inhibit-predicate c))))))

  (add-hook 'org-mode-hook 'electric-pair-mode)
  (add-hook 'emacs-lisp-mode-hook 'electric-pair-mode)

#+END_SRC
** highlight brackets
#+BEGIN_SRC emacs-lisp
  (show-paren-mode)
#+END_SRC
** colour coding brackets
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1)
    (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'org-mode-hook #'rainbow-delimiters-mode)
    )
#+END_SRC
* Hide minor modes                                             :must_be_last:
hides the minor modes that are trivial
#+BEGIN_SRC emacs-lisp
      (use-package diminish
        :ensure t
        :init
        (diminish 'hungry-delete-mode)
        (diminish 'beacon-mode)		
        (diminish 'which-key-mode)
        (diminish 'undo-tree-mode)
        (diminish 'rainbow-mode)
        (diminish 'subword-mode)
        (diminish 'visual-line-mode)
        (diminish 'org-indent-mode)
        (diminish 'prettify-symbols-mode)
  ;;      (diminish 'yas-minor-mode)
        (diminish 'hl-line-mode)
        (diminish 'column-number-mode)
        (diminish 'line-number-mode)
        (diminish 'linum-relative-mode)
    )
#+END_SRC
