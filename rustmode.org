#+TITLE: Rust setup
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

You cannot compile in Google Drive. Rust throws an error

|-------------+---------------------------------+-------|
| =C-c C-c ?= | various cargo functions         | cargo |
|-------------+---------------------------------+-------|
| =C-x . 4=   | open definition in other window | racer |
| =M-.=       | jump to definition              | racer |
| =M-,=       | jump back                       | racer |
| =C-c C-d=   | get docs to popup               | racer |
| =C-c d=     | get docs in buffer              | racer |
|-------------+---------------------------------+-------|

* Dependencies
#+BEGIN_SRC emacs-lisp
  (my/add-dependency "rustc")
  (my/add-dependency "cargo")
  (my/add-dependency "rustup")
  (my/add-dependency "rls")
 #+END_SRC

|---------------+---------------------------------------------------------------------|
| cargo         | for compling project                                                |
| [[https://github.com/brotzeit/rustic][rustc]]         | does compilation, checking and documentation. Can activate later on |
| rustup        | installation and package managment                                  |
| [[https://github.com/rust-lang/rls][rls]]           | rust language server                                                |
| [[https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/user][rust-analyzer]] | rust language server v2                                             |
|---------------+---------------------------------------------------------------------|
| [[https://github.com/racer-rust/emacs-racer][racer]]         | code completion (rls uses it as a fallback)                         |
|---------------+---------------------------------------------------------------------|

** 1 - Install =cargo, rustc, rustup=
=curl -f https://sh.rustup.rs > rust.sh=
For arch also install =base-devel=
** 2 - Use nightly
The package manager is =rustup=. For cool packages, add nightly toolkit
=rustup toolchain add nightly=
** 3 - Install =rls=
=rustup component add rls rust-analysis= for language server
=rustup component add rust-src= for the source code

You will need to =export PATH=~/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src= in order for the source to be specified or =$(rustc --print sysroot)/lib/rustlib/src/rust/src=
** ? - Instal  =racer=
=cargo install racer=

* PACKAGE Init
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :init (my/add-to-package-list 'rust-mode))
                                          ; use rust analyzer above the normal lsp server
  ;;(setq lsp-rust-server 'rust-analyzer)
                                          ; launch lsp server
  ;;(add-hook 'rust-mode-hook #'lsp)
                                          ; indentation
  (add-hook 'rust-mode-hook
            (lambda () (setq indent-tabs-mode nil)))

                                          ; do not compile documentation for external packages
  ;; (setq cargo-process--command-doc-open "doc --no-deps --open")
  ;; (setq cargo-process--command-doc "doc --no-deps")

  ;; (setq cargo-process--command-doc-open "doc --document-private-items --no-deps --open")
  ;; (setq cargo-process--command-doc "doc --document-private-items --no-deps ")
 #+END_SRC

* PACKAGE Flycheck rust
#+BEGIN_SRC emacs-lisp
  ;; (use-package flycheck-rust
  ;;   :ensure t
  ;;   :init (my/add-to-package-list 'flycheck-rust)
  ;;   :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
 #+END_SRC
* PACKAGE Cargo
#+BEGIN_SRC emacs-lisp
  ;; (use-package cargo
  ;;   :ensure t
  ;;   :init (my/add-to-package-list 'cargo)
  ;;   :diminish cargo-minor-mode
  ;;   :hook (rust-mode . cargo-minor-mode))
 #+END_SRC
* PACKAGE Racer
#+BEGIN_SRC emacs-lisp
  ;; (use-package racer
  ;;   :ensure t
  ;;   :hook
  ;;   (rust-mode . racer-mode)
  ;;   (racer-mode . eldoc-mode)
  ;;                                         ; show current function being typed
  ;;   (racer-mode . company-mode)
  ;;   :init (my/add-to-package-list 'racer))

  ;; (use-package rustic
  ;;   :ensure t
  ;;   :hook
  ;;   (racer-mode . rustic-mode)
  ;;   :init (my/add-to-package-list 'rustic))
 #+END_SRC
* PACKAGE Hydra
#+BEGIN_SRC emacs-lisp
  ;; (defhydra hydra-rust ()
  ;;   "
  ;;     Cargo                                                              [_q_] quit
  ;;     ^^---------------------------------------------------------------------------
  ;;     [_b_] Build
  ;;     [_r_] Run
  ;;     [_R_] Run Binary
  ;;     [_l_] Clean

  ;;     [_f_] Format			[_c_] Clippy: lints to improve rust code
  ;;     ^^---------------------------------------------------------------------------
  ;;     [_D_] Cargo Build Documentation: for all the libraries used
  ;;     [_d_] Cargo Open Documentation: in a browser
  ;;     [_a_] Remove a crate			[_A_] Add a crate

  ;;     ^^---------------------------------------------------------------------------
  ;;     [_e_] Run example?		Test Current [_t_]		Test [_T_]

  ;;     [_i_] init a new project
  ;;     [_n_] init a new project with a name
  ;;     "
  ;;   ("r" cargo-process-run nil)
  ;;   ("R" cargo-process-run-bin nil)
  ;;   ("b" cargo-process-build nil)
  ;;   ("f" cargo-process-fmt nil)
  ;;   ("D" cargo-process-doc nil)
  ;;   ("d" cargo-process-doc-open nil)
  ;;   ("t" cargo-process-current-test nil)
  ;;   ("T" cargo-process-test nil)
  ;;   ("n" cargo-process-new nil)
  ;;   ("l" cargo-process-clean nil)
  ;;   ("c" cargo-process-clippy nil)
  ;;   ("a" cargo-process-rm nil)
  ;;   ("A" cargo-process-add nil)
  ;;   ("e" cargo-process-run-example nil)
  ;;   ("i" cargo-process-init nil)
  ;;   ("q" nil nil))

  ;; (define-key my/keymap (kbd "c") #'hydra-rust/body)

  ;; (add-hook 'rust-mode-hook (lambda ()
  ;;                             (define-key rust-mode-map (kbd "C-c C-c") #'hydra-rust/body)
  ;;                             (message "Rust mode")
  ;;                             (define-key rust-mode-map (kbd "C-c C-c") #'hydra-rust/body)))
  ;; ;; (add-hook 'rustic-mode-hook (lambda ()
  ;; ;;                               (define-key rustic-mode-map (kbd "C-c C-c") #'hydra-rust/body)
  ;; ;;                               (message "RUSTIC mode")))
  ;; (add-hook 'lsp-mode-hook (lambda ()
  ;;                            (if (string= (format "%s" major-mode) "rustic-mode")
  ;;                                (define-key rustic-mode-map (kbd "C-c C-c") #'hydra-rust/body)
  ;;                              (message "RUSTIC mode after LSP"))))
 #+END_SRC
* Bloatre
#+BEGIN_SRC emacs-lisp
  ;; (setq racer-rust-src-path "/Users/CCCP/Vagrant_VMs/rust-source-code")
  ;; (setq rustic-format-trigger 'on-save)
  ;; (setq rust-format-on-save t))
 #+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
  (define-key rust-mode-map (kbd "C-c C-n") (function flycheck-next-error))
  (define-key rust-mode-map (kbd "C-c C-p") (function flycheck-previous-error))
  ;; (define-key rustic-mode-map (kbd "C-c C-n") (function flycheck-next-error))
  ;; (define-key rustic-mode-map (kbd "C-c C-p") (function flycheck-previous-error))
  ;; (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  ;; (define-key rust-mode-map (kbd "C-c C-d") (function racer-describe-tooltip))
  ;; (define-key rust-mode-map (kbd "C-c d") (function racer-describe))
 #+END_SRC
