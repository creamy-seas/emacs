#+TITLE: Languages config not large enough for a separate org file
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

| =C-i V= | track mardown file in browser |

* PACKAGE Init
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (my/add-to-package-list 'markdown-mode)
    (setq markdown-command "multimarkdown")
    :config
    (define-key markdown-mode-map (kbd "C-c C-b") nil))
 #+END_SRC
* Toggling toc when exporting markdown from [[file:orgmode.org::*Export][org mode]]
#+BEGIN_SRC emacs-lisp 
  (defvar my/org/last-toc-state t "Table-of-content state right before export. We need to turn it off for markdown")

  (defun my/toggle-toc-before-markdown-export ()
    "Toggle toc off before mardown export and save the state to set it after export"
    (if org-export-with-toc
        (progn
          (message " Turning toc off for markdown")
          (setq my/org/last-toc-state t)
          (setq org-export-with-toc nil)
          )
      (progn
        (setq my/org/last-toc-state nil)
        (message " Toc already off"))))

  (defadvice org-md-export-to-markdown
      (before toggle-toc-before-to-markdown-export activate)
    (my/toggle-toc-before-markdown-export))

  (defadvice org-md-export-to-markdown
      (after revert-toc-after-to-markdown-export activate)
    (setq org-export-with-toc my/org/last-toc-state))

  (defadvice org-md-export-as-markdown
      (before toggle-toc-before-as-markdown-export activate)
    (my/toggle-toc-before-markdown-export))

  (defadvice org-md-export-as-markdown
      (after revert-toc-after-as-markdown-export activate)
    (setq org-export-with-toc my/org/last-toc-state))
 #+END_SRC
* PACKAGE Grip mode
** Init
#+BEGIN_SRC emacs-lisp 
  (my/add-dependency "grip")
  (use-package grip-mode
    :ensure t
    :init (my/add-to-package-list 'grip-mode))

  (define-key my/keymap (kbd "V") 'grip-mode)
 #+END_SRC
** CONFIG Personal configuration
You will need to create a github token [[https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line][as written here]] and store it in the =~/.authinfo= file
#+begin_example
  machine api.github.com login <GITHUB_USERNAME> password <TOKEN>
#+end_example
where =<GITHUB_USERNAME>= is your gitlab name and =<TOKEN>= is what was generated on the page

#+BEGIN_SRC emacs-lisp 
  (require 'auth-source)
  (let ((credential (auth-source-user-and-password "api.github.com")))
    (setq grip-github-user (car credential)
          grip-github-password (cadr credential)))

  (if (string-equal grip-github-user "")
      (warn "Markdown preview will not work until you set user in the '~/.authinfo' file - see markdownmode.org"))
  (if (string-equal grip-github-password "")
      (warn "Markdown preview will not work until you set password in the '~/.authinfo' file - see markdownmode.org"))
 #+END_SRC
