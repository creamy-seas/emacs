#+TITLE: Email configuration
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

- for google, you need to allow less secure apps in =https://myaccount.google.com/u/4/security=
- bound with [[global_bindings]]
- =C-c C-a= for attachments

* External Setup
- =offlineimap=
- =w3m=
- =mu=
*** location of binaries
#+BEGIN_SRC emacs-lisp
  ;; add location of lisp files for me4e
  (add-to-list 'load-path
               (expand-file-name "/usr/local/share/emacs/site-lisp/mu/mu4e"))

  ;; location of the mu binary
  (setq mu4e-mu-binary "/usr/local/bin/mu")
 #+END_SRC
* mu4e configuration
#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :config

    ;; 1 - method to pull in the mail
    (setq mu4e-get-mail-command "offlineimap")
    (setq mu4e-maildir "~/mail")
    (setq mu4e-view-show-addresses t)
    (setq mu4e-update-interval 86000)
    ;; (setq mu4e~get-mail-password-regexp "^Enter password for user 'Remote': $")

    ;; 2 - directory for saving attachments
    (setq mu4e-attachment-dir (expand-file-name "~/Dropbox"))

    ;; 4 - main accounts and sending mail
    (setq mu4e-user-mail-address-list '("ilya.antonov@dreams-ai.com"
                                        "ilya.antonov24@ntlworld.com"
                                         "antonov.ilya225@gmail.com"
                                         "ilya.antonov2013@live.rhul.ac.uk")))
 #+END_SRC
* Contexts
#+BEGIN_SRC emacs-lisp
  (setq mu4e-context-policy 'pick-first)
  (setq mu4e-compose-context-policy 'always-ask)
  (setq mu4e-contexts
        (list
         (make-mu4e-context
          :name "ntlworld"
          :enter-func (lambda () (mu4e-message "Entering NTLWORLD"))
          :leave-func (lambda () (mu4e-message "Leaving NTLWORLD"))
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg :to "ilya.antonov24@ntlworld.com")))
          :vars '((user-mail-address . "ilya.antonov24@ntlworld.com")
                  (user-full-name . "Ilya Antonov (NTLWORLD)")
                  ;; (mu4e-sent-messages-behavior 'delete)
                  (mu4e-sent-folder . "/ilya_NTLWORLD/Sent")
                  (mu4e-drafts-folder . "/ilya_NTLWORLD/Drafts")
                  (mu4e-trash-folder . "/ilya_NTLWORLD/Trash")
                  (mu4e-refile-folder . "/ilya_NTLWORLD/Archive")
                  (mu4e-compose-signature . (concat
                                             "Ilya Antonov,\n"
                                             "‚¶ø NTLWORLD\n"))
                  (mu4e-compose-format-flowed . nil)))
         (make-mu4e-context
          :name "dreams-ai"
          :enter-func (lambda () (mu4e-message "Entering Dreams ‚òÅ"))
          :leave-func (lambda () (mu4e-message "Entering Dreams ‚òÅ"))
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg :to "ilya.antonov@dreams-ai.com")))
          :vars '((user-mail-address . "ilya.antonov@dreams-ai.com")
                  (user-full-name . "Ilya Antonov (Dreams-AI)")
                  ;; (mu4e-sent-messages-behavior 'delete)
                  (mu4e-sent-folder . "/ilya_DREAMSAI/[Gmail].Sent Mail")
                  (mu4e-drafts-folder . "/ilya_DREAMSAI/[Gmail].Drafts")
                  (mu4e-trash-folder . "/ilya_DREAMSAI/[Gmail].Bin")
                  (mu4e-refile-folder . "/ilya_DREAMSAI/[Gmail].Starred")
                  (mu4e-compose-signature . (concat
                                             "Ilya Antonov,\n"
                                             "‚òÅ DREAMSAI\n"))
                  (mu4e-compose-format-flowed . nil)))
         (make-mu4e-context
          :name "gmail"
          :enter-func (lambda () (mu4e-message "Entering GMAIL"))
          :leave-func (lambda () (mu4e-message "Leaving GMAIL"))
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg :to ".*ilya.*")))
          :vars '((user-mail-address . "antonov.ilya225@gmail.com")
                  (user-full-name . "Ilya Antonov (GMAIL)")
                  ;; (mu4e-sent-messages-behavior 'delete)
                  (mu4e-sent-folder . "/ilya_GMAIL/[Gmail].Sent Mail")
                  (mu4e-drafts-folder . "/ilya_GMAIL/[Gmail].Drafts")
                  (mu4e-trash-folder . "/ilya_GMAIL/[Gmail].Bin")
                  (mu4e-refile-folder . "/ilya_GMAIL/[Gmail].Starred")
                  (mu4e-compose-signature . (concat
                                             "Ilya Antonov,\n"
                                             "‚¶ø GMAIL\n"))
                  (mu4e-compose-format-flowed . nil)))
         (make-mu4e-context
          :name "outlook"
          :enter-func (lambda () (mu4e-message "Entering OUTLOOK"))
          :leave-func (lambda () (mu4e-message "Leaving OUTLOOK"))
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg '(:from :to :cc :bcc) "ilya.antonov.2013@live.rhul.ac.uk")))
          :vars '((user-mail-address . "ilya.antonov.2013@live.rhul.ac.uk")
                  (user-full-name . "Ilya Antonov (OUTLOOK)")
                  (mu4e-sent-folder . "/ilya_OUTLOOK/Sent Items")
                  (mu4e-drafts-folder . "/ilya_OUTLOOK/Drafts")
                  (mu4e-trash-folder . "/ilya_OUTLOOK/Deleted Items")
                  (mu4e-refile-folder . "/ilya_OUTLOOK/Archive")
                  (mu4e-compose-signature . (concat
                                             "Ilya Antonov,\n"
                                             "‚¶ø From OUTLOOK\n"))
                  (mu4e-compose-format-flowed . nil)))))
 #+END_SRC
* Navigation
#+BEGIN_SRC emacs-lisp
  ;; 7 - shortcuts
  (setq mu4e-bookmarks '(("flag:unread" "Unread messages" ?u)
                         ("date:today..now" "Today's messages" ?t)
                         ("date:7d..now" "Last 7 days" ?w)
                         ("mime:image/*" "Messages with images" ?p)))
  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "All Inboxes"
                :query "maildir:/ilya_GMAIL/INBOX OR maildir:/ilya_NTLWORLD/INBOX OR maildir:/ilya_OUTLOOK/INBOX OR maildir:/ilya_DREAMSAI/INBOX"
                :key ?i))
  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "All Archives"
                :query "maildir:/ilya_GMAIL/[Gmail].Starred OR maildir:/ilya_NTLWORLD/Archive OR maildir:/ilya_OUTLOOK/Archive OR maildir:/ilya_DREAMSAI/[Gmail].Starred"
                :key ?a))

  (setq   mu4e-maildir-shortcuts
          '(("/ilya_DREAMSAI/INBOX"     . ?d)
            ("/ilya_GMAIL/INBOX"     . ?g)
            ("/ilya_NTLWORLD/INBOX"     . ?n)
            ("/ilya_OUTLOOK/INBOX"     . ?l)))
 #+END_SRC
* View
*** Email list
#+BEGIN_SRC emacs-lisp
  (setq mu4e-headers-fields
      '( (:date          .  10)
         (:flags         .   6)
         (:from          .  30)
         (:subject       .  nil)))
  (setq mu4e-split-view 'horizontal)
 #+END_SRC
*** Method to generate html messages and preview images
#+BEGIN_SRC emacs-lisp
  ;;   - html2text -utf8 -width 72
  ;;   - textutil -stdin -format html -convert txt -stdout
  ;;   - html2markdown | grep -v '&nbsp_place_holder;' (Requires html2text pypi)
  ;;   - w3m -dump -cols 80 -T text/html
  ;; (setq mu4e-html2text-command "textutil -stdin -format html -convert txt -stdout")
  (setq mu4e-html2text-command "w3m -T text/html")

  (setq mu4e-view-show-images t)
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))
 #+END_SRC
*** Start in new frame
#+BEGIN_SRC emacs-lisp
  ;; (defun mu4e-in-new-frame ()
  ;;   "Start mu4e in new frame."
  ;;   (interactive)
  ;;   (select-frame (make-frame))
  ;;   (mu4e))
 #+END_SRC
*** View in browser
#+BEGIN_SRC emacs-lisp
  (add-to-list 'mu4e-view-actions '("web-view" . mu4e-action-view-in-browser) t)
 #+END_SRC
* Customized marking actions
- read and delete
#+BEGIN_SRC emacs-lisp
  (add-to-list 'mu4e-marks
               '(read-and-trash
                 :char       "‚úò"
                 :prompt     "w‚¶øRead and Trash‚¶ø"
                 :show-target (lambda (target) "‚ÜíRead and Trash")
                 :action      (lambda (docid msg target)
                              ;remove Unread and New ‚Üí Mark as [S]een and [T]rash
                                (mu4e~proc-move docid nil "+S+T-u-N"))))

  (add-to-list 'mu4e-marks
               '(dump-order
                 :char       "üì®"
                 :prompt     "w‚¶øPlace into order‚¶ø"
                 :show-target (lambda (target) "‚ÜíOrder")
                 :action      (lambda (docid msg target)
                              ;remove Unread and New ‚Üí Mark as [S]een and [T]rash
                                (mu4e~proc-move docid nil "+S"))))

  (mu4e~headers-defun-mark-for read-and-trash)
  (define-key mu4e-headers-mode-map (kbd "d") 'mu4e-headers-mark-for-read-and-trash)

  (mu4e~headers-defun-mark-for dump-order)
  (define-key mu4e-headers-mode-map (kbd "o") 'mu4e-headers-mark-for-dump-order)
 #+END_SRC
* Sending mail
=msmtp --host=smtp.office365.com --port=587 --serverinfo --tls --tls-certcheck=off=

#+BEGIN_SRC emacs-lisp
  (setq message-send-mail-function (function message-send-mail-with-sendmail))
  (setq sendmail-program "/usr/local/bin/msmtp")

    ;; Use the correct account context when sending mail based on the from header.
  (setq message-sendmail-envelope-from 'header)
  ;; (add-hook 'message-send-mail-hook 'choose-msmtp-account)
 #+END_SRC
*** Composing Mail
#+BEGIN_SRC emacs-lisp
  (setq message-citation-line-format "%N @ %Y-%m-%d %H:%M %Z:\n")
  (setq message-citation-line-function 'message-insert-formatted-citation-line)

  (add-hook 'mu4e-compose-mode-hook
            (defun my-do-compose-stuff ()
              "‚¶ø‚¶ø Those sweet custom settings"
              (set-fill-column 72)
              (flyspell-mode)))
 #+END_SRC
* mu4e Alert
#+BEGIN_SRC emacs-lisp
  (use-package mu4e-alert
    :ensure t
    :after mu4e
    :init
    (setq mu4e-alert-interesting-mail-query
      (concat
       "flag:unread maildir:/ilya_NTLWORLD/INBOX "
       "OR "
       "flag:unread maildir:/ilya_GMAIL/INBOX "
       "OR "
       "flag:unread maildir:/ilya_DREAMSAI/INBOX "
       " OR "
       "flag:unread maildir:/ilya_OUTLOOK/INBOX"
       ))
    (mu4e-alert-enable-mode-line-display)

    (defun ilya-mu4e-alert-mode-line ()
      (interactive)
      (mu4e~proc-kill)
      (mu4e-alert-enable-mode-line-display)
      )
    (run-with-timer 0 60 'ilya-mu4e-alert-mode-line))
 #+END_SRC
* gpg access
because we need a gpg already in the cache to access the imap servers, run a dummy command on a dummy file to store the password

funciton is based off epa-decrypt file
#+BEGIN_SRC emacs-lisp
  (defun ilya-epa-decrypt-file (decrypt-file &optional plain-file)
    "Decrypt DECRYPT-FILE into PLAIN-FILE.
    If you do not specify PLAIN-FILE, this functions prompts for the value to use."
    (interactive
     (let* ((file (read-file-name "File to decrypt: "))
            (plain (epa-read-file-name file)))
       (list file plain)))
    (or plain-file (setq plain-file (epa-read-file-name decrypt-file)))
    (setq decrypt-file (expand-file-name decrypt-file))
    (let ((context (epg-make-context epa-protocol)))
      (epg-context-set-passphrase-callback context
                                           #'epa-passphrase-callback-function)
      (epg-context-set-progress-callback context
                                         (cons
                                          #'epa-progress-callback-function
                                          (format "Decrypting %s..."
                                                  (file-name-nondirectory decrypt-file))))
      (setf (epg-context-pinentry-mode context) epa-pinentry-mode)
      (message "Decrypting %s..." (file-name-nondirectory decrypt-file))
      (condition-case error
          (epg-decrypt-file context decrypt-file plain-file)
        (error
         (epa-display-error context)
         (signal (car error) (cdr error))))))

  (add-hook 'mu4e-update-pre-hook (lambda ()
                                    (ilya-epa-decrypt-file "~/creamy_seas/sync_files/emacs_config/support_files/load_password_dummy_file.gpg" "/dev/null")))
 #+END_SRC
