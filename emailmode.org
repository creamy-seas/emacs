#+TITLE: Email configuration
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

* CONFIG Personal Configuration
#+BEGIN_SRC emacs-lisp
  (defvar my/mu4e-load-path "/usr/local/share/emacs/site-lisp/mu/mu4e" "location of the emacs mu4e package")
  (defvar mu4e-mu-binary "/usr/local/bin/mu" "The mu4e binary")
  (defvar my/mu4e-mail-dir "~/db_mail" "Location of where to read the mail from")
  (defvar my/mu4e-save-dir "~/Dropbox/mail" "Location of where to save the mail attachement")
  (defvar sendmail-program "/usr/local/bin/msmtp" "The SMTP binary")
 #+END_SRC

* External setup
If offlineimap is giving an error, it is probably picking up python3.7
Delete all python3.7 email-related libraries:
1. Find the site libraries
#+BEGIN_SRC shell :tangle no
  python3 -m site
 #+END_SRC
2. [@2] Remove all =imap= packages
3. https://etienne.depar.is/emacs.d/mu4e.html
4. http://kitchingroup.cheme.cmu.edu/blog/2016/10/29/Sending-html-emails-from-org-mode-with-org-mime/

For [[*Sending mail][Sending mail]] you may need to get certificates and update them in =msmtprc=
#+BEGIN_SRC shell :tangle no
  msmtp --host=smtp.office365.com --port=587 --serverinfo --tls --tls-certcheck=off
 #+END_SRC
- Copy the SHA256 into tls_fingerprint
* Theory
** To read
- [[https://kkatsuyuki.github.io/notmuch-conf/][Arch Setup]]
- [[https://medium.com/@kirang89/emacs-as-email-client-with-offlineimap-and-mu4e-on-os-x-3ba55adc78b6]]
- [[http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-][Very great read]]
- [[https://notanumber.io/2016-10-03/better-email-with-mu4e/][Another great read]]
- [[https://vxlabs.com/2014/06/06/configuring-emacs-mu4e-with-nullmailer-offlineimap-and-multiple-identities/][It keeps going]]
- [[https://ict4g.net/adolfo/notes/2014/12/27/emacs-imap.html][Using keychains]]
- [[https://www.djcbsoftware.nl/code/mu/cheatsheet.html][mu cheatsheet]]
** [[https://www.jscape.com/blog/smtp-vs-imap-vs-pop3-difference][POP, IMAP and SMTP]]
| SMTP | sends messages to server               |
| POP  | Downloads from server and deletes them |
| IMAP | Syncs with server                     |

** Incoming Mail Server
| Account Type    | IMAP                                |
| Username        | Your email address is your username |
| Server hostname | imap.virginmedia.com                |
| Server port     | 993                                 |
| Authentication  | Password                            |
| SSL/TLS         | Yes                                 |
** Outgoing Mail Server
| Account Type    | SMTP                                |
| Username        | Your email address is your username |
| Server hostname | smtp.virginmedia.com                |
| Server port     | 465                                 |
| Authentication  | Password                            |
| SSL/TLS         | Yes                                 |
** SSL certificate
This ensures that the connection is secure. This fingerprint is required for ntlworld
[[https://www.offlineimap.org/doc/FAQ.html#how-do-i-generate-an-sslcacertfile-file]]
https://www.offlineimap.org/doc/FAQ.html#does-offlineimap-verify-ssl-certificates

- first part gets the certificate
- second part gets information from certificate - the fingerprint

#+BEGIN_SRC sh :tangle no
  SSL_CERT_DIR="" openssl s_client -connect imap.SERVERTHATYOUCHOOSE.com:993 < /dev/null 2>/dev/null | openssl x509 -fingerprint -noout -text -in /dev/stdin
#+END_SRC

** Google authentication
- With google, you need to allow unknow applications to have access to the account
- go to =https://myaccount.google.com/lesssecureapps=
- allow all applications
- https://myaccount.google.com/u/4/security
** Google Mailboxes
Create a new label in Google Mail. Next time it will sync to computer
** What to install
| =offlineimap= | for the emailserver               |
| =w3m=         | text based webrowser to show html |
| =mu=          | indexer and searcher              |
* MANUAL-PACKAGE Init
#+BEGIN_SRC emacs-lisp
  ;; Add to path and load mu4e
  (add-to-list 'load-path
               (expand-file-name my/mu4e-load-path))
  (require 'mu4e)
  (my/add-to-package-list 'mu4e)


  (setq mu4e-get-mail-command "offlineimap")
                                          ; directory of the local mailboxes
  (setq mu4e-maildir my/mu4e-mail-dir)
                                          ; directory for saving attachments
  (setq mu4e-attachment-dir (expand-file-name my/mu4e-save-dir))
                                          ; email addresses of user
  (setq mu4e-update-interval 86000)
 #+END_SRC
* Account setup
** =ilya.antonov@dreams-ai.com=
#+BEGIN_SRC emacs-lisp
  (add-to-list 'mu4e-user-mail-address-list "ilya.antonov@dreams-ai.com")

  (setq my/mu4e/context-dreamsai
        (make-mu4e-context
         :name "dreams-ai"
         :enter-func (lambda () (message "Entering Dreams ☁"))
         :leave-func (lambda () (message "Entering Dreams ☁"))
         :match-func (lambda (msg)
                       (when msg
                         (mu4e-message-contact-field-matches
                          msg (list :to :from :cc) "ilya.antonov@dreams-ai.com")))
         :vars '((user-mail-address . "ilya.antonov@dreams-ai.com")
                 (user-full-name . "Ilya Antonov (Dreams-AI)")
                 ;; (mu4e-sent-messages-behavior 'delete)
                 (mu4e-sent-folder . "/ilya_DREAMSAI/[Gmail].Sent Mail")
                 (mu4e-drafts-folder . "/ilya_DREAMSAI/[Gmail].Drafts")
                 (mu4e-trash-folder . "/ilya_DREAMSAI/[Gmail].Bin")
                 (mu4e-refile-folder . "/ilya_DREAMSAI/[Gmail].Starred")
                 (mu4e-compose-signature . (concat
                                            "\n\n"
                                            "Physics Handyman\n\n"
                                            "+825 56856958\n\n"
                                            "☁ DREAMSAI"))
                 (mu4e-compose-format-flowed . t))))
 #+END_SRC
** =ilya.antonov24@ntlworld=
#+BEGIN_SRC emacs-lisp
  (add-to-list 'mu4e-user-mail-address-list "ilya.antonov24@ntlworld")
  (setq my/mu4e/context-ntlworld
        (make-mu4e-context
         :name "ntlworld"
         :enter-func (lambda () (mu4e-message "Entering NTLWORLD"))
         :leave-func (lambda () (mu4e-message "Leaving NTLWORLD"))
         :match-func (lambda (msg)
                       (when msg
                         (mu4e-message-contact-field-matches
                          msg (list :to :from :cc) "ilya.antonov24@ntlworld.com")))
         :vars '((user-mail-address . "ilya.antonov24@ntlworld.com")
                 (user-full-name . "Ilya Antonov (NTLWORLD)")
                 ;; (mu4e-sent-messages-behavior 'delete)
                 (mu4e-sent-folder . "/ilya_NTLWORLD/Sent")
                 (mu4e-drafts-folder . "/ilya_NTLWORLD/Drafts")
                 (mu4e-trash-folder . "/ilya_NTLWORLD/Trash")
                 (mu4e-refile-folder . "/ilya_NTLWORLD/Archive")
                 (mu4e-compose-signature . (concat
                                            "Ilya Antonov,\n"
                                            "⦿ NTLWORLD\n"))
                 (mu4e-compose-format-flowed . nil))))
 #+END_SRC
** =antonov.ilya225@gmail.com=
#+BEGIN_SRC emacs-lisp
  (add-to-list 'mu4e-user-mail-address-list "antonov.ilya225@gmail.com")

  (setq my/mu4e/context-gmail
        (make-mu4e-context
         :name "gmail"
         :enter-func (lambda () (mu4e-message "Entering GMAIL"))
         :leave-func (lambda () (mu4e-message "Leaving GMAIL"))
         :match-func (lambda (msg)
                       (when msg
                         (mu4e-message-contact-field-matches
                          msg (list :to :from :cc) "antonov.ilya225@gmail.com")))
         :vars '((user-mail-address . "antonov.ilya225@gmail.com")
                 (user-full-name . "Ilya Antonov (GMAIL)")
                 ;; (mu4e-sent-messages-behavior 'delete)
                 (mu4e-sent-folder . "/ilya_GMAIL/[Gmail].Sent Mail")
                 (mu4e-drafts-folder . "/ilya_GMAIL/[Gmail].Drafts")
                 (mu4e-trash-folder . "/ilya_GMAIL/[Gmail].Bin")
                 (mu4e-refile-folder . "/ilya_GMAIL/[Gmail].Starred")
                 (mu4e-compose-signature . (concat
                                            "Ilya Antonov,\n"
                                            "⦿ GMAIL\n"))
                 (mu4e-compose-format-flowed . nil))))
#+END_SRC
** =ilya.antonov.2013@live.rhul.ac.uk=
#+BEGIN_SRC emacs-lisp
  (add-to-list 'mu4e-user-mail-address-list "ilya.antonov.2013@live.rhul.ac.uk")
  (setq my/mu4e/context-outlook
        (make-mu4e-context
         :name "outlook"
         :enter-func (lambda () (mu4e-message "Entering OUTLOOK"))
         :leave-func (lambda () (mu4e-message "Leaving OUTLOOK"))
         :match-func (lambda (msg)
                       (when msg
                         (mu4e-message-contact-field-matches
                          msg '(list :from :to :cc :bcc) "ilya.antonov.2013@live.rhul.ac.uk")))
         :vars '((user-mail-address . "ilya.antonov.2013@live.rhul.ac.uk")
                 (user-full-name . "Ilya Antonov (OUTLOOK)")
                 (mu4e-sent-folder . "/ilya_OUTLOOK/Sent Items")
                 (mu4e-drafts-folder . "/ilya_OUTLOOK/Drafts")
                 (mu4e-trash-folder . "/ilya_OUTLOOK/Deleted Items")
                 (mu4e-refile-folder . "/ilya_OUTLOOK/Archive")
                 (mu4e-compose-signature . (concat
                                            "\nPhD Student\n\n"
                                            "*Royal Holloway University of London*"))
                 (mu4e-compose-format-flowed . nil))))
#+END_SRC
** Loading in accounts
#+BEGIN_SRC emacs-lisp
                                          ; always ask for context when sending mail
  (setq mu4e-context-policy 'pick-first)
  (setq mu4e-compose-context-policy 'always-ask)

  (setq mu4e-contexts
        (list
         my/mu4e/context-dreamsai
         my/mu4e/context-ntlworld
         my/mu4e/context-gmail
         my/mu4e/context-outlook))
 #+END_SRC
* Navigation
** Main menu
#+BEGIN_SRC emacs-lisp
  (setq mu4e-maildir-shortcuts
        '(("/ilya_DREAMSAI/INBOX"     . ?d)
          ("/ilya_GMAIL/INBOX"     . ?g)
          ("/ilya_NTLWORLD/INBOX"     . ?n)
          ("/ilya_OUTLOOK/INBOX"     . ?l)))
 #+END_SRC
** Bookmarks
#+BEGIN_SRC emacs-lisp
  (setq mu4e-bookmarks '(("flag:unread" "Unread messages" ?u)
                         ("date:today..now" "Today's messages" ?t)
                         ("date:7d..now" "Last 7 days" ?w)
                         ("mime:image/*" "Messages with images" ?p)))
                                          ; display all inbox emails
  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "All Inboxes"
                :query "maildir:/ilya_GMAIL/INBOX OR maildir:/ilya_NTLWORLD/INBOX OR maildir:/ilya_OUTLOOK/INBOX OR maildir:/ilya_DREAMSAI/INBOX"
                :key ?i))
                                          ; display all flagged emails
  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "All Archives"
                :query "maildir:/ilya_GMAIL/[Gmail].Starred OR maildir:/ilya_NTLWORLD/Archive OR maildir:/ilya_OUTLOOK/Archive OR maildir:/ilya_DREAMSAI/[Gmail].Starred"
                :key ?a))
 #+END_SRC
* View
** Show full address
#+BEGIN_SRC emacs-lisp
  (setq mu4e-view-show-addresses t)
 #+END_SRC
** Email list
#+BEGIN_SRC emacs-lisp
  (setq mu4e-headers-fields
        '( (:date          .  10)
           (:flags         .   6)
           (:from          .  30)
           (:size		 .  8)
           (:subject       .  nil)))

  (setq mu4e-split-view 'horizontal)
                                          ; allow fancy chars in the first column
  (setq mu4e-use-fancy-chars nil)

 #+END_SRC
** Images
#+BEGIN_SRC emacs-lisp
  (setq mu4e-view-show-images t)
                                          ; hook imagemagick if it was installed with emacs
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))
 #+END_SRC
** HTML
One of the following options can be chosen to preview html
- html2text -utf8 -width 72
- textutil -stdin -format html -convert txt -stdout
- html2markdown | grep -v '&nbsp_place_holder;' (Requires html2text pypi)
- w3m -dump -cols 80 -T text/html *fastest from my experience*
#+BEGIN_SRC emacs-lisp
  (setq mu4e-html2text-command "textutil -stdin -format html -convert txt -stdout")
  ;; (setq mu4e-html2text-command "w3m -T text/html")
  ;; (setq mu4e-html2text-command "w3m -dump -T text/html -cols 72 -o display_link_number=true -o display_image=false -o ignore_null_img_alt=true")
 #+END_SRC
** Start in new frame (optional)
#+BEGIN_SRC emacs-lisp
  (defun my/mu4e-in-new-frame ()
    "Start mu4e in new frame"
    (interactive)
    (select-frame (make-frame))
    (mu4e))
 #+END_SRC
** Open in browser
#+BEGIN_SRC emacs-lisp
  (add-to-list 'mu4e-view-actions '("web-view" . mu4e-action-view-in-browser) t)
 #+END_SRC
* Customized marking actions
** Read and delete
#+BEGIN_SRC emacs-lisp
  (add-to-list 'mu4e-marks
               '(read-and-trash
                 :char       "✘"
                 :prompt     "wRead and Trash?"
                 :show-target (lambda (target) "Read and Trash")
                 :action      (lambda (docid msg target)
                                          ;remove [u]nread and [N]ew → Mark as [S]een and [T]rash
                                (mu4e~proc-move docid nil "+S+T-u-N"))))

  (mu4e~headers-defun-mark-for read-and-trash)
  (define-key mu4e-headers-mode-map (kbd "C-c C-t") 'mu4e-headers-mark-for-read-and-trash)
 #+END_SRC
** Dump order
#+BEGIN_SRC emacs-lisp
  (add-to-list 'mu4e-marks
               '(dump-order
                 :char       ("O" . "🐋")
                 :prompt     "wPlace into order?"
                 :show-target (lambda (target) "Order")
                 :action      (lambda (docid msg target)
                                          ;remove [u]nread and [N]ew → Mark as [S]een. move to the orders directory
                                (mu4e~proc-move docid "/ilya_GMAIL/Orders" "+S-u-N"))))

  (mu4e~headers-defun-mark-for dump-order)
  (define-key mu4e-headers-mode-map (kbd "C-c C-o") 'mu4e-headers-mark-for-dump-order)
 #+END_SRC
** Expenses
#+BEGIN_SRC emacs-lisp
  (add-to-list 'mu4e-marks
               '(expenses-dreamsai
                 :char       ("E" . "💰")
                 :prompt     "wMark as expense"
                 :show-target (lambda (target) "Expenses ☁")
                 :action      (lambda (docid msg target)
                                          ;remove [u]nread and [N]ew → Mark as [S]een. move to the orders directory
                                (mu4e~proc-move docid "/ilya_DREAMSAI/Expenses" "+S-u-N"))))

  (mu4e~headers-defun-mark-for expenses-dreamsai)
  (define-key mu4e-headers-mode-map (kbd "C-c C-e") 'mu4e-headers-mark-for-expenses-dreamsai)
 #+END_SRC

* PACKAGE Alert
#+BEGIN_SRC emacs-lisp
  (use-package mu4e-alert
    :ensure t
    :after mu4e
    :init (my/add-to-package-list 'mu4e-alert)
    (setq mu4e-alert-interesting-mail-query
          (concat
           "flag:unread maildir:/ilya_NTLWORLD/INBOX "
           "OR "
           "flag:unread maildir:/ilya_GMAIL/INBOX "
           "OR "
           "flag:unread maildir:/ilya_DREAMSAI/INBOX "
           " OR "
           "flag:unread maildir:/ilya_OUTLOOK/INBOX"
           ))
    (mu4e-alert-enable-mode-line-display))

                                          ; alrt to refresh every 60 seconds
  (defun my/mu4e-alert-mode-line ()
    (interactive)
    (mu4e~proc-kill)
    (mu4e-alert-enable-mode-line-display))
  (run-with-timer 0 60 'my/mu4e-alert-mode-line)
 #+END_SRC
* Sending mail
#+BEGIN_SRC emacs-lisp 
  (my/add-dependency "gnupg")
 #+END_SRC
** Base config
#+BEGIN_SRC emacs-lisp
  (setq message-send-mail-function (function message-send-mail-with-sendmail))
                                          ; Use the correct account context when sending mail based on the from header.
  (setq message-sendmail-envelope-from 'header)
 #+END_SRC
** Composing Mail
#+BEGIN_SRC emacs-lisp
  (setq message-citation-line-format "%N @ %Y-%m-%d %H:%M %Z:\n")
  (setq message-citation-line-function 'message-insert-formatted-citation-line)

  (add-hook 'mu4e-compose-mode-hook
            (defun my-do-compose-stuff ()
              "⦿⦿ Those sweet custom settings"
              (set-fill-column 72)
              (flyspell-mode)))
 #+END_SRC
** org-mu4e
#+BEGIN_SRC emacs-lisp
                                          ; installed with mu4e
  (require 'org-mu4e)
  (use-package org-mime
    :ensure t)


  (defun my/mu4e-compose-org-mail ()
    (interactive)
    (mu4e-compose-new)
    (org-mu4e-compose-org-mode))

  (setq org-mu4e-link-query-in-headers-mode nil)


  (defun my/mu4e-htmlize-and-send ()
    "When in an org-mu4e-compose-org-mode message, htmlize and send it."
    (interactive)
    (when (member 'org~mu4e-mime-switch-headers-or-body post-command-hook)
      (org-mime-htmlize)
      (message-send-and-exit)))

  (add-hook 'org-ctrl-c-ctrl-c-hook 'my/mu4e-htmlize-and-send t)
 #+END_SRC
* Syncing mail
** =my/epa-decrypt-file=
Because we need a gpg password already in the cache to access the imap servers
I run a dummy command on a dummy file that prompts for the password

#+BEGIN_SRC emacs-lisp
  (defun my/epa-decrypt-file (decrypt-file &optional plain-file)
    "Decrypt DECRYPT-FILE into PLAIN-FILE.
    If you do not specify PLAIN-FILE, this functions prompts for the value to use."
    (interactive
     (let* ((file (read-file-name "File to decrypt: "))
            (plain (epa-read-file-name file)))
       (list file plain)))
    (or plain-file (setq plain-file (epa-read-file-name decrypt-file)))
    (setq decrypt-file (expand-file-name decrypt-file))

    (let ((context (epg-make-context epa-protocol)))
      (epg-context-set-passphrase-callback context
                                           #'epa-passphrase-callback-function)
      (epg-context-set-progress-callback context
                                         (cons
                                          #'epa-progress-callback-function
                                          (format "Decrypting %s..."
                                                  (file-name-nondirectory decrypt-file))))
      (setf (epg-context-pinentry-mode context) epa-pinentry-mode)
      (message "Decrypting %s..." (file-name-nondirectory decrypt-file))
      (condition-case error
          (epg-decrypt-file context decrypt-file plain-file)
        (error
         (epa-display-error context)
         (signal (car error) (cdr error))))))

  (add-hook 'message-send-hook (lambda ()
                                 (my/epa-decrypt-file (my/config-file-path-evaluate "my-files/gpg/load_password_dummy_file.gpg")
                                                      "/dev/null")))
 #+END_SRC

** =my/update-mu4e=
 #+BEGIN_SRC emacs-lisp
   (defun my/mu4e/update ()
     (interactive)
     (let ((last-venv pyvenv-virtual-env-name))

       ;; (message (concat ">>>> Set my/python/last-venv to " last-venv))
       ;; (pyvenv-workon "imap")
       (pyvenv-deactivate)
       ;; (message ">>>> deactivated")

       (exec-path-from-shell-initialize)

       ;; (message ">>>> decrypting dummy file")
       (my/epa-decrypt-file (my/config-file-path-evaluate "my-files/gpg/load_password_dummy_file.gpg")
                            "/dev/null")

       ;; (message ">>>> updating")
       (mu4e-update-mail-and-index t)

       (message (concat " (((cringe incoming))) " last-venv))
       (pyvenv-workon last-venv)
       ))
 #+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
  (define-key my/keymap (kbd "m") (function mu4e))
  (define-key my/keymap (kbd "M") (function my/mu4e-in-new-frame))
  (define-key my/keymap (kbd "C") (function my/mu4e-compose-org-mail))
  (define-key mu4e-main-mode-map (kbd "U") (function my/mu4e/update))
  (define-key mu4e-main-mode-map (kbd "C") (function my/mu4e-compose-org-mail))
  (define-key my/keymap (kbd "u") (function my/mu4e/update))
 #+END_SRC
* Testing
#+BEGIN_SRC emacs-lisp
  (setq mu4e-compose-complete-only-after "2015-01-01"
        message-kill-buffer-on-exit t)


  ;; message-citation-line-format "%a %d %b %Y à %R, %n a écrit :\n"
  ;; message-citation-line-function 'message-insert-formatted-citation-line

  ;; message-send-mail-function 'smtpmail-send-it
  ;; smtpmail-auth-credentials (expand-file-name "~/.authinfo.gpg")
  ;; mml-secure-openpgp-sign-with-sender t
  ;; mml-secure-openpgp-encrypt-to-self t
 #+END_SRC
