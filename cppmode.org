#+TITLE: C++ configuration
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

| Type angle bracket <TAB in order to complete a header |
| Run =ggtags-create-tags= from emacs                   |
| Run =gtags= from shell in the root directoru     |

| C-M-h       | highlight all    |
| C-M-a/e/f/b | Navigation       |
| C-j         | Search for a TAG |
| M-./,       | Go to definition |
|             |                  |

* ggtags
- In every project, run =gtags= from the command line in the root directory or run =ggtags-create-tags= in the root directory

| =C-c g XXX= | For expansion       |
| =C-c M-XXX= |                     |
|-------------+---------------------|
| GTAGS       | definition database |
| GRTAGS      | reference database  |
| GPATH       | path name database  |

** External setup
Install ctags backend https://github.com/universal-ctags/homebrew-universal-ctags or https://centos.pkgs.org/7/epel-x86_64/global-6.5.6-4.el7.x86_64.rpm.html
2) Download
#+BEGIN_SRC sh :tangle no
wget https://download-ib01.fedoraproject.org/pub/epel/7/x86_64/Packages/g/global-6.5.6-4.el7.x86_64.rpm or https://www.gnu.org/software/global/download.html
 #+END_SRC
3) [@3] Install
#+BEGIN_SRC shell :tangle no
  ./configure --with-universal-ctags=/usr/local/bin/ctags
  make & make install

  or

  sudo rpm -Uvh global-6.5.6-4.el7.x86_64.rpm
  yum install global-ctags.x86_64
 #+END_SRC
** PACKAGE Normal ggtags
*** Init
#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :ensure t
    :init
    (my/add-to-package-list 'ggtags)
    (my/add-dependency "gtags"))

  (add-hook 'c-mode-common-hook (lambda ()
                                  (when (derived-mode-p 'c-mode 'c++-mode)
                                    (ggtags-mode 1))))
 #+END_SRC
*** Keybindings
#+BEGIN_SRC emacs-lisp
  (dolist (map (list ggtags-mode-map dired-mode-map))
    ;; (define-key map (kbd "C-c g s") 'ggtags-find-other-symbol)
    ;; (define-key map (kbd "C-c g h") 'ggtags-view-tag-history)
    (define-key map (kbd "C-c g r") 'ggtags-find-reference)
    ;; (define-key map (kbd "C-c g f") 'ggtags-find-file)
    (define-key map (kbd "C-c g c") 'ggtags-create-tags)
    ;; (define-key map (kbd "C-c g u") 'ggtags-update-tags)
    ;; (define-key map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
    ;; (define-key map (kbd "M-.") 'ggtags-find-tag-dwim)
    ;; (define-key map (kbd "M-,") 'pop-tag-mark)
    ;; (define-key map (kbd "C-c <") 'ggtags-prev-mark)
    ;; (define-key map (kbd "C-c >") 'ggtags-next-mark)
    )
 #+END_SRC
** PACKAGE Helm-ggtags =C-c g=
Use helm-etags when looking through tags
*** Init
#+BEGIN_SRC emacs-lisp
  (use-package helm-gtags
    :ensure t
    :init (my/add-to-package-list 'helm-gtags))

  (add-hook 'dired-mode-hook 'helm-gtags-mode)
  (add-hook 'eshell-mode-hook 'helm-gtags-mode)
  (add-hook 'c-mode-hook 'helm-gtags-mode)
  (add-hook 'c++-mode-hook 'helm-gtags-mode)
  (add-hook 'asm-mode-hook 'helm-gtags-mode)
 #+END_SRC
*** Config
#+BEGIN_SRC emacs-lisp
  (setq
   helm-gtags-ignore-case t
   helm-gtags-auto-update t
   helm-gtags-use-input-at-cursor t
   helm-gtags-pulse-at-cursor t
   helm-gtags-prefix-key "\C-cg"
   helm-gtags-suggested-key-mapping t)
 #+END_SRC
*** Keybinding
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'helm-gtags
    (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
    (define-key helm-gtags-mode-map (kbd "C-c g h") 'helm-gtags-show-stack)
    (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
    (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
    (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
    (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
    (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history))
 #+END_SRC
* CONFIG Personal Configuration
#+BEGIN_SRC emacs-lisp
  (defvar my/c-header-file-location (list "/usr/local/include/c++/9.3.0" "/usr/include/c++/4.8.5/"))
 #+END_SRC

* Preliminary instructions
Check that clang is on computer =clang --version=
#+BEGIN_SRC emacs-lisp
  (my/add-dependency "clang")
 #+END_SRC
** Legacy instructions
- then make sure that cmake is also installed =brew install cmake=
- after filling out the code below, run =M-x irony-install-server=
- this should prepare to run some long command like:
#+BEGIN_SRC sh :tangle no
  /usr/local/bin/cmake -DCMAKE_INSTALL_PREFIX\=/Users/CCCP/.emacs.d/irony/  /Users/CCCP/.emacs.d/elpa/irony-20190516.2348/server && /usr/local/bin/cmake --build . --use-stderr --config Release --target install
#+END_SRC
- *copy this into terminal and evalute. Then it chould be working*

*** Habr
#+BEGIN_SRC emacs-lisp
  ;; (require 'cedet) ;; –∏—Å–ø–æ–ª—å–∑—É—é "–≤—à–∏—Ç—É—é" –≤–µ—Ä—Å–∏—é CEDET. –ú–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç...

 #+END_SRC
*** Actual installation
#+BEGIN_SRC emacs-lisp
  ;; ;;tie backend of company to company-irony
  ;; (use-package company-irony
  ;;   :ensure t
  ;;   :config
  ;;   (require 'company)
  ;;   (add-to-list 'company-backends 'company-irony))

  ;; ;;setup company-irony with c++ connection
  ;; (use-package irony
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'c++-mode-hook 'irony-mode)
  ;;   (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  ;; ;;finally ensure that c++-mode-hook is activated when company mode is on
  ;; (with-eval-after-load 'company
  ;;   (add-hook 'c++-mode-hook 'company-mode))
 #+END_SRC
* Autoinsert
#+BEGIN_SRC emacs-lisp
  (define-skeleton my-skeleton/c/unittest
    "Unitest with CppUnit"
    nil
                                          ; initial top line
    "#include <cppunit/extensions/HelperMacros.h>"\n
    "#include <cppunit/Exception.h>"\n
    \n

    "class " (setq test-class-name (skeleton-read "Class Name: ")) "Test : public CppUnit::TestFixture {"\n
    \n

    > "// Macro for generating suite"\n
    > "CPPUNIT_TEST_SUITE( " test-class-name " );"\n
    \n
    > "// Population with tests"\n
    > "// CPPUNIT_TEST_EXCEPTION( üêô, CppUnit::Exception );"\n
    > "CPPUNIT_TEST( " _ " );" \n
    \n

    > "CPPUNIT_TEST_SUITE_END();"\n
    -8 "private:"\n
    \n
    -8 "public:"\n
    > "void setUp(){"\n
    > "}"\n
    > "void tearDown(){"\n
    > "}"\n
    > "};"\n
    > "CPPUNIT_TEST_SUITE_REGISTRATION( " test-class-name " );"
    )
 #+END_SRC
** Bind to buffer names
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-insert-alist '(
                                    (".*Test\\.cpp\\'" . "[Unittest template]")
                                    . my-skeleton/c/unittest))
 #+END_SRC
* System
#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure t
    :init (my/add-to-package-list 'cc-mode))
 #+END_SRC

* PACKAGE Autocomplete header arguments
When you type an #include declaration within a supported major mode (see
`company-c-headers-modes'), company-c-headers will search for header files
within predefined search paths.  company-c-headers can search "system" and
"user" paths, depending on the type of #include declaration you type.

#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers
    :ensure t
    :init (my/add-to-package-list 'company-c-headers)
    (add-to-list 'company-backends 'company-c-headers))

  (setq company-c-headers-path-system(
                                      append company-c-headers-path-system my/c-header-file-location))
 #+END_SRC
* Company backend
- Add the clang backend to company (actually =company-clang= is used by default)
- Delete =company-semantics= as it is given higher priority

#+BEGIN_SRC emacs-lisp
  (setq company-backends (delete 'company-semantic company-backends))
  (with-eval-after-load 'cc-mode
    (define-key c-mode-map  [(tab)] 'company-complete)
    (define-key c++-mode-map  [(tab)] 'company-complete))
 #+END_SRC
* C-Style
#+BEGIN_SRC emacs-lisp
  ;; Available C style:
  ;; ‚Äúgnu‚Äù: The default style for GNU projects
  ;; ‚Äúk&r‚Äù: What Kernighan and Ritchie, the authors of C used in their book
  ;; ‚Äúbsd‚Äù: What BSD developers use, aka ‚ÄúAllman style‚Äù after Eric Allman.
  ;; ‚Äúwhitesmith‚Äù: Popularized by the examples that came with Whitesmiths C, an early commercial C compiler.
  ;; ‚Äústroustrup‚Äù: What Stroustrup, the author of C++ used in his book
  ;; ‚Äúellemtel‚Äù: Popular C++ coding standards as defined by ‚ÄúProgramming in C++, Rules and Recommendations,‚Äù Erik Nyquist and Mats Henricson, Ellemtel
  ;; ‚Äúlinux‚Äù: What the Linux developers use for kernel development
  ;; ‚Äúpython‚Äù: What Python developers use for extension modules
  ;; ‚Äújava‚Äù: The default style for java-mode (see below)
  ;; ‚Äúuser‚Äù: When you want to define your own style
  (setq c-default-style "linux")
 #+END_SRC
* Function args
#+BEGIN_SRC emacs-lisp
  (use-package function-args
    :ensure t
    :init (my/add-to-package-list 'function-args))
 #+END_SRC
* Folding source code
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook 'hs-minor-mode)
 #+END_SRC
* Semantics
#+BEGIN_SRC emacs-lisp
  (require 'semantic)
                                          ; cache results
  (global-semanticdb-minor-mode 1)
                                          ; keep tack of live changes
  (global-semantic-idle-scheduler-mode 1)
                                          ; parse the buffer for semantic content
  (semantic-mode 1)
  ;; (add-to-list 'semantic-default-submodes 'global-semanticdb-minor-mode)
  ;; (add-to-list 'semantic-default-submodes 'global-semantic-mru-bookmark-mode)
  ;; (add-to-list 'semantic-default-submodes 'global-semantic-idle-scheduler-mode)
  ;; (add-to-list 'semantic-default-submodes 'global-semantic-highlight-func-mode)
  ;; (add-to-list 'semantic-default-submodes 'global-semantic-idle-completions-mode)
  ;; (add-to-list 'semantic-default-submodes 'global-semantic-show-parser-state-mode)

  ;; (global-ede-mode t)
  ;; (require 'ede/generic)
  ;; (require 'semantic/ia)
  ;; (ede-enable-generic-projects)

 #+END_SRC
