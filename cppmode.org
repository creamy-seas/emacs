#+TITLE: C++ configuration
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

|   | Type angle bracket <TAB in order to complete a header |
|   |                                                       |
* CONFIG Personal Configuration
#+BEGIN_SRC emacs-lisp
  (defvar my/c-header-file-location "/usr/local/include/c++/9.3.0")
 #+END_SRC

* Preliminary instructions
Check that clang is on computer =clang --version=
#+BEGIN_SRC emacs-lisp
  (my/add-dependency "clang")
 #+END_SRC
** Legacy instructions
- then make sure that cmake is also installed =brew install cmake=
- after filling out the code below, run =M-x irony-install-server=
- this should prepare to run some long command like:
#+BEGIN_SRC sh :tangle no
  /usr/local/bin/cmake -DCMAKE_INSTALL_PREFIX\=/Users/CCCP/.emacs.d/irony/  /Users/CCCP/.emacs.d/elpa/irony-20190516.2348/server && /usr/local/bin/cmake --build . --use-stderr --config Release --target install
#+END_SRC
- *copy this into terminal and evalute. Then it chould be working*

*** Habr
#+BEGIN_SRC emacs-lisp
  ;; (require 'cedet) ;; использую "вшитую" версию CEDET. Мне хватает...

 #+END_SRC
*** Actual installation
#+BEGIN_SRC emacs-lisp
  ;; ;;tie backend of company to company-irony
  ;; (use-package company-irony
  ;;   :ensure t
  ;;   :config
  ;;   (require 'company)
  ;;   (add-to-list 'company-backends 'company-irony))

  ;; ;;setup company-irony with c++ connection
  ;; (use-package irony
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'c++-mode-hook 'irony-mode)
  ;;   (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  ;; ;;finally ensure that c++-mode-hook is activated when company mode is on
  ;; (with-eval-after-load 'company
  ;;   (add-hook 'c++-mode-hook 'company-mode))
 #+END_SRC
* System
#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure t
    :init (my/add-to-package-list 'cc-mode))
 #+END_SRC

* PACKAGE Autocomplete header arguments
When you type an #include declaration within a supported major mode (see
`company-c-headers-modes'), company-c-headers will search for header files
within predefined search paths.  company-c-headers can search "system" and
"user" paths, depending on the type of #include declaration you type.

#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers
    :ensure t
    :init (my/add-to-package-list 'company-c-headers)
    (add-to-list 'company-backends 'company-c-headers))

  (add-to-list 'company-c-headers-path-system my/c-header-file-location)
 #+END_SRC
* Company backend
- Add the clang backend to company (actually =company-clang= is used by default)
- Delete =company-semantics= as it is given higher priority

#+BEGIN_SRC emacs-lisp
  (setq company-backends (delete 'company-semantic company-backends))
  (with-eval-after-load 'cc-mode
    (define-key c-mode-map  [(tab)] 'company-complete)
    (define-key c++-mode-map  [(tab)] 'company-complete))
 #+END_SRC
* C-Style
#+BEGIN_SRC emacs-lisp
  ;; Available C style:
  ;; “gnu”: The default style for GNU projects
  ;; “k&r”: What Kernighan and Ritchie, the authors of C used in their book
  ;; “bsd”: What BSD developers use, aka “Allman style” after Eric Allman.
  ;; “whitesmith”: Popularized by the examples that came with Whitesmiths C, an early commercial C compiler.
  ;; “stroustrup”: What Stroustrup, the author of C++ used in his book
  ;; “ellemtel”: Popular C++ coding standards as defined by “Programming in C++, Rules and Recommendations,” Erik Nyquist and Mats Henricson, Ellemtel
  ;; “linux”: What the Linux developers use for kernel development
  ;; “python”: What Python developers use for extension modules
  ;; “java”: The default style for java-mode (see below)
  ;; “user”: When you want to define your own style
  (setq c-default-style "linux")
 #+END_SRC
* Folding source code
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook 'hs-minor-mode)
 #+END_SRC
* PACKAGE ggtags
- In every project, run =gtags= from the command line in the root directory or
- Run =ggtags-create-tags= in the root directory
** External setup
1) Install ctags backend https://github.com/universal-ctags/homebrew-universal-ctags
2) Download
#+BEGIN_SRC sh :tangle no
wget https://www.gnu.org/software/global/download.html
 #+END_SRC
3) [@3] Install
#+BEGIN_SRC shell :tangle no
  ./configure --with-universal-ctags=/usr/local/bin/ctags
  make & make install
 #+END_SRC
** Init
#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :ensure t
    :init (my/add-to-package-list 'ggtags)
    (my/add-dependency "gtags")
    )


  (add-hook 'c-mode-common-hook (lambda ()
                                  (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                                    (ggtags-mode 1))))
 #+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp
  (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
  (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
  (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
  (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
  (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
  (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

  (define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
 #+END_SRC
* Semantics
#+BEGIN_SRC emacs-lisp
  (require 'semantic)
                                          ; cache results
  (global-semanticdb-minor-mode 1)
                                          ; keep tack of live changes
  (global-semantic-idle-scheduler-mode 1)
                                          ; parse the buffer for semantic content
  (semantic-mode 1)
  ;; (add-to-list 'semantic-default-submodes 'global-semanticdb-minor-mode)
  ;; (add-to-list 'semantic-default-submodes 'global-semantic-mru-bookmark-mode)
  ;; (add-to-list 'semantic-default-submodes 'global-semantic-idle-scheduler-mode)
  ;; (add-to-list 'semantic-default-submodes 'global-semantic-highlight-func-mode)
  ;; (add-to-list 'semantic-default-submodes 'global-semantic-idle-completions-mode)
  ;; (add-to-list 'semantic-default-submodes 'global-semantic-show-parser-state-mode)

  ;; (global-ede-mode t)
  ;; (require 'ede/generic)
  ;; (require 'semantic/ia)
  ;; (ede-enable-generic-projects)

 #+END_SRC
