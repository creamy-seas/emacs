#+TITLE: Common things that I forget
#+STARTUP: overview
#+PROPERTY: header-args :tangle no

| C-c t | Toggling view |
| C-c M | Mail          |
| C-c f | Files         |
| C-c p | Projectile |

To get a list of pretty symbols run =(all-the-icons-insert)=

Tags
| =C-j=           | jump to a tag selected from menu |   |
| =M-.= and =M-,= | move to an from tag under cursor |   |
| =C-c g h=       | List all tasg                    |   |
| =C-c g r=       | Find tags in project             |   |
| =C-c g a=       | List tags in current scope       | h |
|-----------------+----------------------------------+---|

A generic autocompletion framework
| Ivy     | Generic completion                      |
| Counsel | Ivy-enhanced versions of emacs commands |
| Swiper  | Alternative search                      |

| =C-==     | Expand region                |
| =C-x n ?= | Narrow and widen in org mode |

* Scratch
** Default load
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message (concat
                               "#+Title: Persistent Scratch Buffer"))
 #+END_SRC
** Save scratch when emacs closes
#+BEGIN_SRC emacs-lisp
(use-package! persistent-scratch
  :config
  (persistent-scratch-setup-default))
 #+END_SRC
* About Emacs  =C-h C-a=
#+BEGIN_SRC emacs-lisp
(defhydra hydra-about-emacs ()
  "
  About Emacs                                                        [_q_] quit
  ^^---------------------------------------------------------------------------
           PID:    %s(emacs-pid)
        Uptime:    %s(emacs-uptime)
     Init time:    %s(emacs-init-time)
     Directory:    %s(identity user-emacs-directory)
  Invoked from:    %s(concat invocation-directory invocation-name)
       Version:    %s(identity emacs-version)

  User Info
  ^^---------------------------------------------------------------------------
     User name:    %s(user-full-name)
  Login (real):    %s(user-login-name) (%s(user-real-login-name))
    UID (real):    %s(user-uid) (%s(user-real-uid))
    GID (real):    %s(group-gid) (%s(group-real-gid))
  Mail address:    %s(identity user-mail-address)
  "
  ("q" nil nil))

(global-set-key (kbd "C-h C-a") #'hydra-about-emacs/body)
 #+END_SRC
* Prettify-symbols
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode 1)
  (setq prettify-symbols-unprettify-at-point t)
#+END_SRC
* GPG prompt
Make emacs prompt for password in the minibuffer
#+BEGIN_SRC emacs-lisp
  (setq epa-pinentry-mode 'loopback)
 #+END_SRC
* CONFIG Expand region =C-==
* Dired
| M | chmod |
* Org mode
| C-c C-x C-l              | View latex in buffer - must be in math quotes $$ |
| C-c C-x ;                | Start countdown                                  |
| C-c C-x 0                | Start timer                                      |
| C-c C-x . or =C-c C-x -= | Insert timestamp                                 |
| C-c C-x ,                | Pause/Resume                                     |
| C-c C-x _                | Stop                                             |
* Babel
*General*
- If  inside function or a loop, *do not have empty lines*!
- If using session (what we generally have rule) *DO NOT HAVE RETURN STATEMENTS*. Instead, place the value that you would return at the end of the line.

Add
#+BEGIN_SRC text
# -*- org-export-babel-evaluate: nil -*-
#+END_SRC
Add # -*- org-export-babel-evaluate: nil -*- to top of file in order to avoid execution of the source blocks during export. This way, only the results you have evaluated yourself are exported

*For tables*
- =:eval yes=
- If using a  function, *make sure that there is a space after the definition and before invocation*

#+NAME: example
#+HEADER: :session ps-session
#+HEADER: :noweb yes
#+HEADER: :exports code
#+HEADER: :eval yes
#+HEADER: :results value silent
#+HEADER: :var jj_side=1
#+HEADER: :var oxidation=""
 #+BEGIN_SRC python
  def eval_expected_rt_resistance(jj_side, oxidation):
      """
      Evaluates the expected room temperature resistance from the dimensions of the designed JJ and known scalings.
      @param jj_side:              The side off the designed JJ in nm
      """
      x_side = jj_side; y_size = jj_side
      x = jj_side * JJ_x_scaling
      y = jj_side * JJ_y_scaling
      # Number of 100x100nmÂ² squares
      N_squares = x/100 * y/100
      return R_square_room_temperature[oxidation] / N_squares / kOhm

  eval_expected_rt_resistance(jj_side, oxidation)
 #+END_SRC

#+name: hello-world
#+begin_src sh
  <<hello-world-prefix>>
  echo "|                       hello world                         |"
  <<hello-world-postfix>>
#+end_src
** Exporting table
can add post processing
#+name: attr_wrap
#+begin_src sh :var data="" :var height="400px" :results output
  echo "#+ATTR_HTML: :height $height"
  echo "$data"
#+end_src

and use the following header
#+HEADER: :post attr_wrap(height="5cm", data=*this*)

Or it can be made with prologu

#+HEADER: :results output replace raw
#+HEADER: :eval no-export
#+HEADER: :prologue print('#+ATTR_HTML: :height 400px')
** Example inline variables
=src_python[:session cqps-session]{coil_al}=
** Example headers
| #+HEADER: :var R_cold_scaling=(car (read (org-table-get-remote-range "calibration_table" "$R_cold_scaling"))) | sbv |
| #+HEADER: :var JJ_x_scaling=(car (read (org-table-get-remote-range "calibration_table" "$JJ_x_scaling")))     | sbv |
| #+HEADER: :var JJ_y_scaling=(car (read (org-table-get-remote-range "calibration_table" "$JJ_y_scaling")))     | sbv |
| #+HEADER: :var coil_au=(car (read (org-table-get-remote-range "calibration_table" "$coil_au")))               | sbv |
| #+HEADER: :var coil_al=(car (read (org-table-get-remote-range "calibration_table" "$coil_al")))               | sbv |
| #+HEADER: :var calibration_table=calibration_table                                                            | sbv |
|---------------------------------------------------------------------------------------------------------------+-----|
| All commands below                                                                                            | sb  |
|---------------------------------------------------------------------------------------------------------------+-----|
| #+NAME: example                                                                                               | sbn |
|---------------------------------------------------------------------------------------------------------------+-----|
| #+HEADER: :session session-name!                                                                              | sbs |
|---------------------------------------------------------------------------------------------------------------+-----|
| #+HEADER: :noweb yes                                                                                          | sbw |
|---------------------------------------------------------------------------------------------------------------+-----|
| #+HEADER: :exports results :results output                                                                    | sbo |
** Tables
Example of reading cell from remote table
- =@#= is the current column that is evaluated immediatelly
- The reason that the refference is built up this way, is so that there are no substirytions

(mapconcat 'identity (org-table-get-remote-range "2021-07-photon-source-time-series-resistance" (let ((row (number-to-string (- @# 1)))) (concat "@" row "$" "2..@" row "$" "4"))))
** Commands

| =C-c C-v=   | all the functions |
| =C-c C-v j= | Add a header      |

| =:exports:= | What to show in latex or html |
| code        |                               |
| results     |                               |
| both        |                               |
| none        |                               |

| =:results=      | If exporting results, what to take                  |
|-----------------+-----------------------------------------------------|
| value           | functional mode,                                    |
|                 | output of the previous result (python needs return) |
| output          | whatever was printed to stdout                      |
|-----------------+-----------------------------------------------------|
| table, vector   | result is a table                                   |
| list            | result is a list                                    |
| scalar verbatim | just raw output                                     |
| file            | take it as a link to a file                         |
| =:file-desc=    | to name the file                                    |
| =:output-dir=   | where to store file                                 |
|-----------------+-----------------------------------------------------|
| raw             | insert directly into buffer                         |
| org             | put into an org block                               |
| html            | put into html block                                 |
| latex           | put into latex block                                |
| drawer          | put into new drawer                                 |
| pp              | pretty print                                        |
|-----------------+-----------------------------------------------------|
| silent          | do not showall                                      |
| replace         |                                                     |
| append          |                                                     |

| :var     | *allows using variables defined with #+NAME* |
|----------+----------------------------------------------|
| a=b      | direct assingment                            |
| a=b()    | call a named codeblock                       |
| a=b(a=1) | call a named codeblock with it's parameters  |
|          |                                              |

| *Tables*    |                                    |
| =:hlines=   | export lines or not in tables      |
| =:colnames= | Ignore input variable table column |
| =:rownames= |                                    |

| =:dir= | working directory - can be tramp |

| =:exports= | *what to export to html or latex* |
|------------+-----------------------------------|
| code       |                                   |
| results    |                                   |
| both       |                                   |

| =:tangle= | *whether to export the code block*  |
|-----------+-------------------------------------|
| yes       |                                     |
| no        |                                     |
| full path |                                     |
| =:mkdirp= | make directory if it does not exist |

| =:eval= | whether to run this code block |
|---------+--------------------------------|
| no      |                                |
| query   |                                |

| :=session= | *create/use a named session*. If nothing supplied, use default one. No return statements in session (like jnb) |
| =:cache=   | yes or no - *do not use with session*                                                                          |

| =:noweb yes= | allows insertion of named blocks with <<name>> |

* Artist mode
| C-c C-a M-w | Copy rectangle (enter to start and end selection)        |
| C-c C-a C-y | Paste (enter to paste)                                   |
| C-c C-a T   | Text mode (enter to use figlet to insert formatted text) |
| C-c C-a C-k | Cut                                                      |
|-------------+----------------------------------------------------------|
| C-c C-a E   | Erase                                                    |
| C-c C-a e   | Select erase character                                   |
|-------------+----------------------------------------------------------|
| C-c C-a f   | Flood fill (enter to fill)                               |
| C-c C-a C-f | Select fill character                                    |
|-------------+----------------------------------------------------------|
| C-c C-a L   | Line                                                     |
| C-c C-a l   | Line character                                           |

* Smerge ([[| =C-c C-n= | next                  |][click here]])
| =C-c C-n= | next                  |
| =C-c c-p= | previous              |
| =c=       | keep one under cursor |
| =u=       | keep upper            |
| =l=       | keep lower            |
| =a=       | keep all              |

* Smartparens ([[file:essential-config.org::*Smartparens][click here]])
Run =sp-cheat-sheet=
|                 |                                                     |                           |
| =C-M=u=         | Unwrap current bracketed region                     | =sp-splice-sexp=          |
| =C-M-r=         | Rewrap current pairs                                | =sp-rewrap-sexp=          |
|-----------------+-----------------------------------------------------+---------------------------|
| =C-M-f=         | Jump to matching closing bracket                    | =sp-forward-sexp=         |
| =C-M-b=         | Jump to matching opening bracket                    | =sp-backward-sexp=        |
| =C-M-g=         | Jump OUTSIDE matching closing bracket (in scope)    | =sp-up-sexp=              |
| =C-M-v=         | Jump OUTSIDE matching opening bracket (in scope)    | =sp-backward-up-sexp=     |
| =C-M-n=         | Jump to start of NEXT bracket - no scope            | =sp-next-sexp=            |
| =C-M-c=         | Jump INSIDE the NEXT bracket (in scope) to START    | =sp-down-sexp=            |
| =C-M-d=         | Jump INSIDE the PREVIOUS bracket (in scope) to END  | =sp-backward-down-sexp=   |
| =C-M-a=         | Jump to start of wrapper                            | =sp-begginig-of-sexp=     |
| =C-M-e=         | Jump to end of wrapper                              | =sp-end-of-sexp=          |
|-----------------+-----------------------------------------------------+---------------------------|
| =C-M-z=         | Move to START of function                           | =beginning-of-defun=      |
| =C-M-x=         | Move to END of function                             | =end-of-defun=            |
|-----------------+-----------------------------------------------------+---------------------------|
| =<s-right>=     | PULL in the next word INTO bracket                  | =sp-forward-slurp-sexp=   |
| =<C-s-right>=   | BARF the last word OUT of bracket                   | =sp-forward-barf-sexp=    |
| =<s-left>=      | PULL in the previous word INTO bracket              | =sp-backward-slurp-sexp=  |
| =<C-s-left>=    | BARF the first word out of bracket                  | =sp-backward-barf-sexp=   |
|-----------------+-----------------------------------------------------+---------------------------|
| =C-M-t=         | Transpose pair                                      | =sp-transpose-sexp=       |
| =C-M-k=         | Kill in bracket region (when cursor over bracket)   |                           |
| =C-M-w=         | Copy in bracket region (when cursor over bracket)   |                           |
| =C-M-2=         | Mark the next expression (see - it is just above w) | =sp-mark-sexp=            |
|-----------------+-----------------------------------------------------+---------------------------|
| =M-<delete>=    | Delete next sexp                                    | =sp-unwrap-sexp=          |
| =M-<backspare>= | Delete previous sexp                                | =sp-backward-unwrap-sexp= |

* Org mode
To read
- https://orgmode.org/manual/Export-Settings.html

| <C-down/up> | Lower/Higher priority |
| C-c C-r     | Embed/preview images  |
| C-c ~       | Change table type     |

|---------------+-----------------------------------------------------+-------------------|
| =C-c c=       | Entering capture mode where templates are available | [[*Capture templates][Capture templates]] |
| =C-c a=       | View agendas                                        | [[*Agenda files][Agenda files]]      |
| =C-c C-x C-i= | Start clock                                         |                   |
| =C-c C-x C-d= | Show clocks                                         |                   |
| =C-c C-x C-z= | Resolve clocks in buffer                            |                   |
| =C-c C-y=     | Recompute time after updatingmanually               |                   |
| =C-c C-x C-r= | Report for org file                                 |                   |

** Add propetires
| =C-c C-x d= | org-insert-drawer |
| =C-c C-x p= | Set property      |

* IDO mode ([[file:ricing.org::*IDO%20mode%20(buffers)][click here]])
|---------------------+----------------------------------------|
| [[*Buffer suggestion][*Buffer suggestion*]] |                                        |
| =C-x C-f=           | start searching for file               |
| =C-j=               | to just use whatever you have typed in |
| =C-s/r=             | Put at start/end of list               |
| =C-d=               | open directory in dired mode           |
| =M-n/p=             | next/previous directory in history     |
| =M-s=               | seach in directory history             |
| =M-m=               | prompt for directory to create it      |
| =C-t=               | toggle regex                           |
| =C-a=               | toggle ignore files                    |
|---------------------+----------------------------------------|

* Macros
| =<f3>=             | Record a macro                                                        |
| =<f4>=             | Finish recording macro                                                |
| =C-u 1 <f3>=       | Record macro with set counter. =<f3>= to insert and increment counter |
| =C-x C-k b=        | Bind to key                                                           |
| =C-x C-k n=        | Name last macro                                                       |
| =insert-kbd-macro= | Insert named macro                                                    |
* Registers and bookmarks

|---------------+----------------------------|
| *Registers*   |                            |
| =C-x r <SPC>= | Record position in buffer  |
| =C-x r j=     | Jump to position in buffer |
|---------------+----------------------------|
| =C-x r s=     | Copy region                |
| =C-x r +=     | Add to region              |
|---------------+----------------------------|
| =C-x r r=     | Copy rectangle             |
|---------------+----------------------------|
| =C-x r i=     | Insert                     |
|---------------+----------------------------|
| =C-x C-k x=   | Save macro in register     |

|----------------------+-----------------------------|
| *Bookmarks*          | /Persist betweeen sessions/ |
|----------------------+-----------------------------|
| =C-x r m=            | Set bookmarks               |
| =C-x r b=            | Jump bookmarks              |
| =C-x r l=            | List bookmarks              |
| =M-x bookmark-write= | Save bookmarks to file      |
|----------------------+-----------------------------|

* External dependencies
|-----------------------+---------------------------+---------------------------|
| =aspell=              | for checking spelling     |                           |
| =language-tools=      | for syntax checking       | https://languagetool.org/ |
| =the_silver_searcher= | for searching code        |                           |
| =figlet=              | for creating ascii text   |                           |
| =grip=                | to preview markdown files |                           |
* =C-c \= in latex
* =diff= for file comparisson
Run =M-x diff= to compare two files.
- =C-c C-n= to narrow the view to single hunks
- Use =n= and =p= to navigate through them
* To run an interactive command =(call-interactively (function functionName))
