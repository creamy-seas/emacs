#+TITLE: Config of orgmode
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

Tip - if you do not want to have long file names displayed in the agenda buffer, create a =Category=
#+begin_example
#+CATEGORY: custom-name-for-agenda-file
#+end_example


* Agenda files
Org searches through the files you set in [[*General Parameters][General Parameters]] and extracts out all deadlines. This allows a nice preview of them
** Agenda layout prompt
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        (quote (("c" "Simple agenda view"
           ((agenda ""))))))
 #+END_SRC
** Keybinding
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") (function org-agenda))
 #+END_SRC
* Autoinsert
#+BEGIN_SRC emacs-lisp
  (define-skeleton my-skeleton/org/standard-file
    "Skeleton for a brand new org file"
    nil
                                          ; initial top line
    "#+AUTHOR: Ilya Antonov" \n
    "#+TITLE: " (skeleton-read "Title name: ") | "🐳 - Missing Title" \n
    "#+EMAIL: ilya.antonov@dreams-ai.com" \n
    "#+EXPORT_FILE_NAME:"  (skeleton-read "Export name: ") | "index.html" \n
    "#+OPTIONS: p:t" \n
    "#+OPTIONS: date:t" \n
    "#+OPTIONS: email:t" \n
    "#+OPTIONS: author:t" \n
    "#+OPTIONS: num:nil" \n
    "#+OPTIONS: title:t" \n
    "#+OPTIONS: toc:t" \n
    "#+OPTIONS: \\n:t" \n
    "#+HTML_MATHJAX: align: center indent: 20em tagside: right font: Inconsolata"
    )

  (add-to-list 'auto-insert-alist '(
                                    (".*\\.org\\'" . "[ org template]")
                                    . my-skeleton/org/standard-file))
 #+END_SRC
* Capture templates     =C-c c=
Go and edit [[file:orgmode-config.org::*Capturing%20templates%20=C-c%20c=][Capturing templates]] to use this roided feature
** Keybinding
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") (function org-capture))
 #+END_SRC
** Spawning capture window from anywhere (os-x example)
1. =brew install coreutils=
2. Automator -> new shell script
#+BEGIN_SRC sh :tangle no
  socketfile=$(lsof -c Emacs | grep server | tr -s " " | cut -d' ' -f 8); /usr/local/bin/emacsclient -ne "(make-capture-frame)" -s $socketfile
#+END_SRC
*** Functions
#+BEGIN_SRC emacs-lisp
  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

  (defadvice org-capture-destroy
      (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

  (use-package noflet
    :ensure t )
  (defun make-capture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
      (org-capture)))
 #+END_SRC
* Allow alphabetic enumeration
#+BEGIN_SRC emacs-lisp
  (setq org-list-allow-alphabetical t)
 #+END_SRC
* Babel
What languages can be evaluated in org buffers by hitting =C-c C-c=
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (shell . t)
     (emacs-lisp . t)))
 #+END_SRC
* PACKAGE Bullets
Nice bullets instead of multiplication symbols
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :init (my/add-to-package-list 'org-bullets)
    :hook (org-mode . org-bullets-mode))
#+END_SRC
* Change the ellipsis to ↴
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "↴")
 #+END_SRC
* Editing source code
** Do it in a new window (default is side by side)
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** Shortcuts
You can type =<el= and the =TAB= to create the desired source block
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp \n ? \n #+END_SRC"))
  (add-to-list 'org-structure-template-alist
               '("py" "#+BEGIN_SRC python \n ? \n #+END_SRC"))
  (add-to-list 'org-structure-template-alist
               '("sh" "#+BEGIN_SRC shell \n ? \n #+END_SRC"))
#+END_SRC
* Export
#+BEGIN_SRC emacs-lisp
  (setq org-export-with-toc t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-backends '(html latex md groff))
 #+END_SRC
** Conflunence
#+BEGIN_SRC emacs-lisp
  (require 'ox-confluence)
 #+END_SRC
** PACKAGE Html
** Init
#+BEGIN_SRC emacs-lisp
(setq org-html-checkbox-type 'html)
 #+END_SRC
** PACKAGE HTMLIZE
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t
    :init (my/add-to-package-list 'htmlize))
 #+END_SRC
** PACKAGE Ox-twbs      =C-c C-e w=
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t
    :init (my/add-to-package-list 'ox-twbs))
#+END_SRC
** Nice template
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:1 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />
** DOWN Presentations
#+BEGIN_SRC emacs-lisp
  ;;(use-package ox-reveal
  ;;  :ensure t)
  ;;(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
#+END_SRC
* DOWN Insert link
#+BEGIN_SRC emacs-lisp
  ;; (defun my/org/insert-link (&optional complete-file link-location default-description)
  ;;   "Insert a link.  At the prompt, enter the link.

  ;; Completion can be used to insert any of the link protocol prefixes in use.

  ;; The history can be used to select a link previously stored with
  ;; `org-store-link'.  When the empty string is entered (i.e. if you just
  ;; press `RET' at the prompt), the link defaults to the most recently
  ;; stored link.  As `SPC' triggers completion in the minibuffer, you need to
  ;; use `M-SPC' or `C-q SPC' to force the insertion of a space character.

  ;; You will also be prompted for a description, and if one is given, it will
  ;; be displayed in the buffer instead of the link.

  ;; If there is already a link at point, this command will allow you to edit
  ;; link and description parts.

  ;; With a `\\[universal-argument]' prefix, prompts for a file to link to.  The \
  ;; file name can be
  ;; selected using completion.  The path to the file will be relative to the
  ;; current directory if the file is in the current directory or a subdirectory.
  ;; Otherwise, the link will be the absolute path as completed in the minibuffer
  ;; \(i.e. normally ~/path/to/file).  You can configure this behavior using the
  ;; option `org-link-file-path-type'.

  ;; With a `\\[universal-argument] \\[universal-argument]' prefix, enforce an \
  ;; absolute path even if the file is in
  ;; the current directory or below.

  ;; A `\\[universal-argument] \\[universal-argument] \\[universal-argument]' \
  ;; prefix negates `org-keep-stored-link-after-insertion'.

  ;; If the LINK-LOCATION parameter is non-nil, this value will be used as
  ;; the link location instead of reading one interactively.

  ;; If the DEFAULT-DESCRIPTION parameter is non-nil, this value will
  ;; be used as the default description.  Otherwise, if
  ;; `org-make-link-description-function' is non-nil, this function
  ;; will be called with the link target, and the result will be the
  ;; default link description."
  ;;   (interactive "P")
  ;;   (let* ((wcf (current-window-configuration))
  ;;          (origbuf (current-buffer))
  ;;          (region (when (org-region-active-p)
  ;;                    (buffer-substring (region-beginning) (region-end))))
  ;;          (remove (and region (list (region-beginning) (region-end))))
  ;;          (desc region)
  ;;          (link link-location)
  ;;          (abbrevs org-link-abbrev-alist-local)
  ;;          entry all-prefixes auto-desc)
  ;;     (cond
  ;;      (t
  ;;       ;; Read link, with completion for stored links.
  ;;       (org-link-fontify-links-to-this-file)
  ;;       (org-switch-to-buffer-other-window "*Org Links*")
  ;;       (let ((cw (selected-window)))
  ;;         (select-window (get-buffer-window "*Org Links*" 'visible))
  ;;         (with-current-buffer "*Org Links*" (setq truncate-lines t))
  ;;         (unless (pos-visible-in-window-p (point-max))
  ;;           (org-fit-window-to-buffer))
  ;;         (and (window-live-p cw) (select-window cw)))
  ;;       (setq all-prefixes (append (mapcar 'car abbrevs)
  ;;                                  (mapcar 'car org-link-abbrev-alist)
  ;;                                  (org-link-types)))
  ;;       (unwind-protect
  ;;           ;; Fake a link history, containing the stored links.
  ;;           (let ((org--links-history
  ;;                  (append (mapcar #'car org-stored-links)
  ;;                          org-insert-link-history)))
  ;;             (setq link "file")
  ;;             (unless (org-string-nw-p link) (user-error "No link selected"))
  ;;             (dolist (l org-stored-links)
  ;;               (when (equal link (cadr l))
  ;;                 (setq link (car l))
  ;;                 (setq auto-desc t)))
  ;;             (when (or (member link all-prefixes)
  ;;                       (and (equal ":" (substring link -1))
  ;;                            (member (substring link 0 -1) all-prefixes)
  ;;                            (setq link (substring link 0 -1))))
  ;;               (setq link (with-current-buffer origbuf
  ;;                            (org-link-try-special-completion link)))))
  ;;         (set-window-configuration wcf)
  ;;         (kill-buffer "*Org Links*"))
  ;;       (setq entry (assoc link org-stored-links))
  ;;       (or entry (push link org-insert-link-history))
  ;;       (setq desc (or desc (nth 1 entry)))))

  ;;     (when (funcall (if (equal complete-file '(64)) 'not 'identity)
  ;;                    (not org-keep-stored-link-after-insertion))
  ;;       (setq org-stored-links (delq (assoc link org-stored-links)
  ;;                                    org-stored-links)))

  ;;     (when (and (string-match org-plain-link-re link)
  ;;                (not (string-match org-ts-regexp link)))
  ;;       ;; URL-like link, normalize the use of angular brackets.
  ;;       (setq link (org-unbracket-string "<" ">" link)))

  ;;     ;; Check if we are linking to the current file with a search
  ;;     ;; option If yes, simplify the link by using only the search
  ;;     ;; option.
  ;;     (when (and buffer-file-name
  ;;                (let ((case-fold-search nil))
  ;;                  (string-match "\\`file:\\(.+?\\)::" link)))
  ;;       (let ((path (match-string-no-properties 1 link))
  ;;             (search (substring-no-properties link (match-end 0))))
  ;;         (save-match-data
  ;;           (when (equal (file-truename buffer-file-name) (file-truename path))
  ;;             ;; We are linking to this same file, with a search option
  ;;             (setq link search)))))

  ;;     ;; Check if we can/should use a relative path.  If yes, simplify
  ;;     ;; the link.
  ;;     (let ((case-fold-search nil))
  ;;       (when (string-match "\\`\\(file\\|docview\\):" link)
  ;;         (let* ((type (match-string-no-properties 0 link))
  ;;                (path-start (match-end 0))
  ;;                (search (and (string-match "::\\(.*\\)\\'" link)
  ;;                             (match-string 1 link)))
  ;;                (path
  ;;                 (if search
  ;;                     (substring-no-properties
  ;;                      link path-start (match-beginning 0))
  ;;                   (substring-no-properties link (match-end 0))))
  ;;                (origpath path))
  ;;           (cond
  ;;            ((or (eq org-link-file-path-type 'absolute)
  ;;                 (equal complete-file '(16)))
  ;;             (setq path (abbreviate-file-name (expand-file-name path))))
  ;;            ((eq org-link-file-path-type 'noabbrev)
  ;;             (setq path (expand-file-name path)))
  ;;            ((eq org-link-file-path-type 'relative)
  ;;             (setq path (file-relative-name path)))
  ;;            (t
  ;;             (save-match-data
  ;;               (if (string-match (concat "^" (regexp-quote
  ;;                                              (expand-file-name
  ;;                                               (file-name-as-directory
  ;;                                                default-directory))))
  ;;                                 (expand-file-name path))
  ;;                   ;; We are linking a file with relative path name.
  ;;                   (setq path (substring (expand-file-name path)
  ;;                                         (match-end 0)))
  ;;                 (setq path (abbreviate-file-name (expand-file-name path)))))))
  ;;           (setq link (concat type path (and search (concat "::" search))))
  ;;           (when (equal desc origpath)
  ;;             (setq desc path)))))

  ;;     (unless auto-desc
  ;;       (let ((initial-input
  ;;              (cond
  ;;               (default-description)
  ;;               ((not org-make-link-description-function) desc)
  ;;               (t (condition-case nil
  ;;                      (funcall org-make-link-description-function link desc)
  ;;                    (error
  ;;                     (message "Can't get link description from `%s'"
  ;;                              (symbol-name org-make-link-description-function))
  ;;                     (sit-for 2)
  ;;                     nil))))))
  ;;         (setq desc link)
  ;;         ;; (setq desc (read-string "Description: " initial-input))
  ;;         ))

  ;;     (unless (string-match "\\S-" desc) (setq desc nil))
  ;;     (when remove (apply 'delete-region remove))

  ;;     (insert (org-make-link-string link desc))
  ;;     ;; Redisplay so as the new link has proper invisible characters.
  ;;     (sit-for 0)))
 #+END_SRC
* Image preview
In order to get a preview, add =#+ATTR_ORG: :width 100=

#+BEGIN_SRC emacs-lisp
  (setq org-image-actual-width nil)
 #+END_SRC
* Indentation
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
* Major Function: Base64 Image Export
** =my/org/tob64-roided=: opens image and processes it into a base64 string
#+BEGIN_SRC emacs-lisp
  (defun my/org/tob64-roided (filename caption width)
    "Takes the filename (pass it an image) and writes the content upon export to hmtl"
    (format "<figure><img src=\"data:image/png;base64,%s\" width=\"%s\" class='center' border='1'>'<figcaption class='center'>%s</figcaption></figure>"
            (base64-encode-string
             (with-temp-buffer
               (insert-file-contents filename)
               (buffer-string)))
            width
            caption
            ))
 #+END_SRC
** =my/org/tob64=: opens image and processes it into a base64 string
#+BEGIN_SRC emacs-lisp
  (defun my/org/tob64 (filename width)
    "Takes the filename and creates a temporary buffer with contents
    Use it to export to base64"
    (format "<img src=\"data:image/png;base64,%s\" width=\"%s\" class='center' border='5'>'"
            (base64-encode-string
             (with-temp-buffer
               (insert-file-contents filename)
               (buffer-string))) width))
 #+END_SRC
** =my/org/image-select= return the relative location of the image
#+BEGIN_SRC emacs-lisp
  (defun my/org/image-select ()
    "Select a relative file"
    (let* ((raw-file-name (read-file-name "Image file to (((base64))): "))
           (relative-file-name (replace-regexp-in-string default-directory "" raw-file-name)))
      (concat "./" relative-file-name)))
 #+END_SRC
* Latex preview =C-c C-x C-l=
#+BEGIN_SRC emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options
                                            :scale 1.7))
  ;; (setq org-format-latex-options (plist-put org-format-latex-options
  ;;                                           :foreground "#fdab10"))
 #+END_SRC
* DOWN Org-ac (when typing #+)
#+BEGIN_SRC emacs-lisp
  ;; (use-package org-ac
  ;;   :ensure t
  ;;   :init (my/add-to-package-list 'org-ac)
  ;;   :config
  ;;   (org-ac/config-default)
  ;;                                         ;keys that trigger autocomplete
  ;;   (setq org-ac/ac-trigger-command-keys (quote ("\\" ":" "[" "+")))
  ;;                                         ;bind the usual scrolling keys
  ;;   (define-key ac-completing-map (kbd "C-n") (function ac-next))
  ;;   (define-key ac-completing-map (kbd "C-p") (function ac-previous))
  ;;   (define-key ac-completing-map (kbd "C-v") (function ac-quick-help-scroll-down))
  ;;   (define-key ac-completing-map (kbd "M-v") (function ac-quick-help-scroll-up)))
 #+END_SRC
* DOWN Org-ref
#+BEGIN_SRC emacs-lisp
  ;; (use-package org-ref
  ;;   :ensure t
  ;;   :init (my/add-to-package-list 'org-ref))
 #+END_SRC
* DOWN PDF view
#+BEGIN_SRC emacs-lisp
  ;; (use-package org-pdfview
  ;;   :ensure t
  ;;   :init (my/add-to-package-list 'org-pdfview))
 #+END_SRC

* Keybindings
#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "<C-return>") (function org-insert-heading))
  (define-key org-mode-map (kbd "C-x RET") (function org-insert-subheading))
  (define-key org-mode-map (kbd "C-c C-;") (function comment-line))
  (define-key org-mode-map (kbd "C-c C-r") (function org-toggle-inline-images))

  (define-key emacs-lisp-mode-map (kbd "C-c C-;") (function comment-line))

  (define-key org-mode-map "\C-cb" 'org-switchb)
  (define-key org-mode-map (kbd "C-c l") 'org-store-link)
  (define-key org-mode-map (kbd "C-c C-l") 'org-insert-link)
  (define-key org-mode-map (kbd "C-c #") (function org-time-stamp-inactive))
  (define-key org-mode-map (kbd "<C-down>") (function org-priority-down))
  (define-key org-mode-map (kbd "<C-up>") (function org-priority-up))
 #+END_SRC
