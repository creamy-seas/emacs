#+TITLE: Config of orgmode
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

* Babel
What languages can be evaluated in org buffers
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (shell . t)
     (emacs-lisp . t)))
 #+END_SRC
* Bullets
Nice bullets instead of multiplication symbols
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :init (my/add-to-package-list 'org-bullets)
    :hook (org-mode . org-bullets-mode))
#+END_SRC
* Change the ellipsis
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "â†´")
 #+END_SRC
* Initial mode should be org mode
#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'org-mode)
 #+END_SRC
* PDF view                                                             :Down:
#+BEGIN_SRC emacs-lisp
  ;; (use-package org-pdfview
  ;;   :ensure t
  ;;   :init (my/add-to-package-list 'org-pdfview))
 #+END_SRC
* Org mode                                                         :Refactor:
** agenda files
*** keybinding
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") (function org-capture))
  (global-set-key (kbd "C-c a") (function org-agenda))
 #+END_SRC
*** agenda file location
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list "~/creamy_seas/antlers.org"
                               "~/mydrive/east-data-company.org"
                               "~/mydrive/people.org"
                               "~/mydrive/adv18_sa36_automation/adventure_brief.org"
                               "~/mydrive/adv17_ext_horseBetting/adventure_brief.org"
                               "~/mydrive/adv16_sa_onFire/adventure_brief.org"))
 #+END_SRC
*** agenda layout prompt
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        (quote (("c" "Simple agenda view"
           ((agenda ""))))))
 #+END_SRC
*** org-capture-templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("b" "Bloat" entry (id "antlers-bloat")
           "** BLOAT %^{stuff-to-be-done}\nSHEDULED: %^T")

          ("c" "Copy Pasta" entry (id "copy-pasta") "** %^{Pasta Title} %t\n%?")

          ("d" "Draft" plain (file "~/Desktop/.temp.org")
           "%?")

          ("e" "East-India Data Company")
          ("e2" "2am goals" entry (id "bryan-plan")
           "** %^{TODO-STATE} %^{stuff-to-be-done}\nDEADLINE: %^T")
          ("et" "Time log" table-line (id "bryan-done")
           "| %^u | %^{Project}: %^{task-summary} | %^{hours-worked} hours | |"
           :table-line-pos "@<-1")

          ("l" "Boomer Entry"
           item (
                 file+headline "~/creamy_seas/1488.org.gpg" "Becoming a boomer"
                               ) "%^{What did Luke say} %^G\n%?" (
                                                                  file "~/creamy_seas/1488.org.gpg")
                                 "%?")
          ("p"
           "PhD Tasks")
          ("pp"
           "Photon Counting"
           entry (id "phd-photon")
           "*** PHD Photn Counting [/]: %^{stuff-to-be-done}\nDEADLINE: %^T\n- [ ] %?")
          ("pt" "Twin Qubit"
           entry
           (id "phd-twin")
           "*** PHD Twin Qubit [/]: %^{stuff-to-be-done}\nDEADLINE: %^T\n- [ ] %?")
          ("px"
           "xMon"
           entry (id "phd-xmon")
           "*** PHD xMon [/]: %^{stuff-to-be-done}\nDEADLINE: %^T\n- [ ] %?")
          ("pg"
           "General"
           entry (id "phd-general")
           "*** PHD General [/]: %^{stuff-to-be-done}\nDEADLINE: %^T\n- [ ] %?")

          ("u"
           "Save URL"
           entry
           (file+headline "~/creamy_seas/1488.org.gpg" "URL too good to throw away")
           "** %^L %? %^G"
           :kill-buffer t)

          ("s" "Stories"
           entry
           (id "stories")
           "** %^{Title} %t\n%?")))
          ;; tutoring
          ;; ("t" "Tutoring lessons")
          ;; ("tw" "Nikhil Lesson (Winchester)" table-line (id "tutoring-nikhil-invoice")
          ;;  "| # | %^u | %^{lesson summary} | 120%? | |"
          ;;  :table-line-pos "III-1")
          ;; ("tn" "Nathan Lesson" table-line (id "tutoring-nathan-invoice")
          ;;  "| # | %^u | %^{lesson summary} | 45%? | |"
          ;;  :table-line-pos "III-1")
          ;; ("td" "Darrens Programming" table-line (id "tutoring-darren-invoice")
          ;;  "| # | %^u | %^{lesson summary} | 50%? | |"
          ;;  :table-line-pos "III-1")
          ;; ("f" "Future Lesson")
          ;; ("fw" "Nikhil Lesson (Winchester)" entry (id "tutoring-nikhil-lesson")
          ;;  "*** TUTORING Lesson %^{location|at Home|on Skype} covering: %^{topic-to-cover}\n%^T")
          ;; ("fn" "Nathan Lesson" entry (id "tutoring-nathan-lesson")
          ;;  "*** TUTORING Lesson %^{location|at Home|on Skype} covering: %^{topic-to-cover}\n%^T")
          ;; ))
 #+END_SRC
*** org capture frame
capture frame can be called from any application - just map it
#+BEGIN_SRC emacs-lisp
  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

  (defadvice org-capture-destroy
      (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

  (use-package noflet
    :ensure t )
  (defun make-capture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
      (org-capture)))
 #+END_SRC
*** org capture frame supplementary installed
- =brew install coreutils=
- Automator -> new shell script
#+BEGIN_SRC sh
  socketfile=$(lsof -c Emacs | grep server | tr -s " " | cut -d' ' -f 8); /usr/local/bin/emacsclient -ne "(make-capture-frame)" -s $socketfile
#+END_SRC
** autocomplete in org mode (when typing #+)
#+BEGIN_SRC emacs-lisp
  ;; (use-package org-ac
  ;;   :ensure t
  ;;   :init
  ;;   (require 'org-ac)
  ;;   (org-ac/config-default)
  ;;   (setq org-ac/ac-trigger-command-keys (quote ("\\" ":" "[" "+"))) ;keys that trigger autocomplete
  ;;   ;bing the usual scrolling keys
  ;;   (define-key ac-completing-map (kbd "C-n") (function ac-next))
  ;;   (define-key ac-completing-map (kbd "C-p") (function ac-previous))
  ;;   (define-key ac-completing-map (kbd "C-v") (function ac-quick-help-scroll-down))
  ;;   (define-key ac-completing-map (kbd "M-v") (function ac-quick-help-scroll-up)))

 #+END_SRC
** todo lists
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)"
                                      "BLOAT(B)"
                                      "BRYAN(z)"
                                      "PHD(p)"
                                      "DREAMS-AI(a)"
                                      "HORSE(h)"
                                      "SA36(3)"
                                      "WORKFORCE(w)"
                                      "SCHOOLS(b)"
                                      "TUTORING(l)"
                                      "CURRENT(c)"
                                      "SKYPE(s)"
                                      "SINO"
                                      "DOWN"
                                      "|"
                                      "DOMINATED(d)"
                                      "PACKAGE"
                                      )))

  (setq org-todo-keyword-faces (quote (
                                       ("STARTED" . "yellow")
                                       ("CURRENT" . (:foreground "#ffff0a" :background "#754ec1" :weight bold))
                                       ("DREAMS-AI" . (:foreground "#68c3c1" :background "#fdc989" :weight bold))
                                       ("SA36" . (:background "#01168a" :foreground "#fdc989" :weight bold))
                                       ("PACKAGE" . (:background "#00AFF0" :foreground "#ffffff" :weight bold))
                                       ("SKYPE" . (:background "#00AFF0" :foreground "#ffffff" :weight bold))
                                       ("SINO" . (:background "#ffe7ba" :foreground "#3d3d3d" :weight bold))
                                       ("HORSE" . (:background "#68c3c1" :foreground "#fdc989" :weight bold))
                                       ("WORKFORCE" . (:background "#68c3c1" :foreground "#fdc989" :weight bold))
                                       ("PHD" . (:foreground "yellow" :background "#FF3333"))
                                       ("DONE" . (:foreground "yellow" :background "#FF3333"))
                                       ("SCHOOLS" . (:foreground "#090C42" :background "#9DFE9D"))
                                       ("Dominated" . (:foreground "#9DFE9D" :weight bold))
                                       ("BLOAT" . (:foreground "#000001" :background "#ffffff"))
                                       ("TUTORING" . (:foreground "#090C42" :background "#FFD700": weight bold))
                                       ("BRYAN" . (:foreground "#090C42" :background "#33ccff" :weight bold)))))

  (setq org-agenda-span 10)
 #+END_SRC
** insert link                                                    :function:
#+BEGIN_SRC emacs-lisp
  (defun ilya-org-insert-link (&optional complete-file link-location default-description)
    "Insert a link.  At the prompt, enter the link.

  Completion can be used to insert any of the link protocol prefixes in use.

  The history can be used to select a link previously stored with
  `org-store-link'.  When the empty string is entered (i.e. if you just
  press `RET' at the prompt), the link defaults to the most recently
  stored link.  As `SPC' triggers completion in the minibuffer, you need to
  use `M-SPC' or `C-q SPC' to force the insertion of a space character.

  You will also be prompted for a description, and if one is given, it will
  be displayed in the buffer instead of the link.

  If there is already a link at point, this command will allow you to edit
  link and description parts.

  With a `\\[universal-argument]' prefix, prompts for a file to link to.  The \
  file name can be
  selected using completion.  The path to the file will be relative to the
  current directory if the file is in the current directory or a subdirectory.
  Otherwise, the link will be the absolute path as completed in the minibuffer
  \(i.e. normally ~/path/to/file).  You can configure this behavior using the
  option `org-link-file-path-type'.

  With a `\\[universal-argument] \\[universal-argument]' prefix, enforce an \
  absolute path even if the file is in
  the current directory or below.

  A `\\[universal-argument] \\[universal-argument] \\[universal-argument]' \
  prefix negates `org-keep-stored-link-after-insertion'.

  If the LINK-LOCATION parameter is non-nil, this value will be used as
  the link location instead of reading one interactively.

  If the DEFAULT-DESCRIPTION parameter is non-nil, this value will
  be used as the default description.  Otherwise, if
  `org-make-link-description-function' is non-nil, this function
  will be called with the link target, and the result will be the
  default link description."
    (interactive "P")
    (let* ((wcf (current-window-configuration))
           (origbuf (current-buffer))
           (region (when (org-region-active-p)
                     (buffer-substring (region-beginning) (region-end))))
           (remove (and region (list (region-beginning) (region-end))))
           (desc region)
           (link link-location)
           (abbrevs org-link-abbrev-alist-local)
           entry all-prefixes auto-desc)
      (cond
       (t
        ;; Read link, with completion for stored links.
        (org-link-fontify-links-to-this-file)
        (org-switch-to-buffer-other-window "*Org Links*")
        (let ((cw (selected-window)))
          (select-window (get-buffer-window "*Org Links*" 'visible))
          (with-current-buffer "*Org Links*" (setq truncate-lines t))
          (unless (pos-visible-in-window-p (point-max))
            (org-fit-window-to-buffer))
          (and (window-live-p cw) (select-window cw)))
        (setq all-prefixes (append (mapcar 'car abbrevs)
                                   (mapcar 'car org-link-abbrev-alist)
                                   (org-link-types)))
        (unwind-protect
            ;; Fake a link history, containing the stored links.
            (let ((org--links-history
                   (append (mapcar #'car org-stored-links)
                           org-insert-link-history)))
              (setq link "file")
              (unless (org-string-nw-p link) (user-error "No link selected"))
              (dolist (l org-stored-links)
                (when (equal link (cadr l))
                  (setq link (car l))
                  (setq auto-desc t)))
              (when (or (member link all-prefixes)
                        (and (equal ":" (substring link -1))
                             (member (substring link 0 -1) all-prefixes)
                             (setq link (substring link 0 -1))))
                (setq link (with-current-buffer origbuf
                             (org-link-try-special-completion link)))))
          (set-window-configuration wcf)
          (kill-buffer "*Org Links*"))
        (setq entry (assoc link org-stored-links))
        (or entry (push link org-insert-link-history))
        (setq desc (or desc (nth 1 entry)))))

      (when (funcall (if (equal complete-file '(64)) 'not 'identity)
                     (not org-keep-stored-link-after-insertion))
        (setq org-stored-links (delq (assoc link org-stored-links)
                                     org-stored-links)))

      (when (and (string-match org-plain-link-re link)
                 (not (string-match org-ts-regexp link)))
        ;; URL-like link, normalize the use of angular brackets.
        (setq link (org-unbracket-string "<" ">" link)))

      ;; Check if we are linking to the current file with a search
      ;; option If yes, simplify the link by using only the search
      ;; option.
      (when (and buffer-file-name
                 (let ((case-fold-search nil))
                   (string-match "\\`file:\\(.+?\\)::" link)))
        (let ((path (match-string-no-properties 1 link))
              (search (substring-no-properties link (match-end 0))))
          (save-match-data
            (when (equal (file-truename buffer-file-name) (file-truename path))
              ;; We are linking to this same file, with a search option
              (setq link search)))))

      ;; Check if we can/should use a relative path.  If yes, simplify
      ;; the link.
      (let ((case-fold-search nil))
        (when (string-match "\\`\\(file\\|docview\\):" link)
          (let* ((type (match-string-no-properties 0 link))
                 (path-start (match-end 0))
                 (search (and (string-match "::\\(.*\\)\\'" link)
                              (match-string 1 link)))
                 (path
                  (if search
                      (substring-no-properties
                       link path-start (match-beginning 0))
                    (substring-no-properties link (match-end 0))))
                 (origpath path))
            (cond
             ((or (eq org-link-file-path-type 'absolute)
                  (equal complete-file '(16)))
              (setq path (abbreviate-file-name (expand-file-name path))))
             ((eq org-link-file-path-type 'noabbrev)
              (setq path (expand-file-name path)))
             ((eq org-link-file-path-type 'relative)
              (setq path (file-relative-name path)))
             (t
              (save-match-data
                (if (string-match (concat "^" (regexp-quote
                                               (expand-file-name
                                                (file-name-as-directory
                                                 default-directory))))
                                  (expand-file-name path))
                    ;; We are linking a file with relative path name.
                    (setq path (substring (expand-file-name path)
                                          (match-end 0)))
                  (setq path (abbreviate-file-name (expand-file-name path)))))))
            (setq link (concat type path (and search (concat "::" search))))
            (when (equal desc origpath)
              (setq desc path)))))

      (unless auto-desc
        (let ((initial-input
               (cond
                (default-description)
                ((not org-make-link-description-function) desc)
                (t (condition-case nil
                       (funcall org-make-link-description-function link desc)
                     (error
                      (message "Can't get link description from `%s'"
                               (symbol-name org-make-link-description-function))
                      (sit-for 2)
                      nil))))))
          (setq desc link)
          ;; (setq desc (read-string "Description: " initial-input))
          ))

      (unless (string-match "\\S-" desc) (setq desc nil))
      (when remove (apply 'delete-region remove))

      (insert (org-make-link-string link desc))
      ;; Redisplay so as the new link has proper invisible characters.
      (sit-for 0)))
 #+END_SRC
** open code editing in the same window (not side by side)          :darren:
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** begin_src generation
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp \n ? \n #+END_SRC"))
  (add-to-list 'org-structure-template-alist
               '("py" "#+BEGIN_SRC python \n ? \n #+END_SRC"))
  (add-to-list 'org-structure-template-alist
               '("sh" "#+BEGIN_SRC shell \n ? \n #+END_SRC"))
#+END_SRC
** indentation                                                      :darren:
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
** export
*** export to confluence
#+BEGIN_SRC emacs-lisp
  (require 'ox-confluence)
 #+END_SRC
*** export to html
#+BEGIN_SRC emacs-lisp
(setq org-html-checkbox-type 'html)
 #+END_SRC
**** nice template
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:1 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />
*** export to nice html
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t
  )
#+END_SRC


#+BEGIN_SRC emacs-lisp
  ;; (defun my-org-inline-css-hook (exporter)
  ;;   "Insert custom inline css"
  ;;   (when (eq exporter 'html)
  ;;     (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
  ;;            (path (concat dir "style.css"))
  ;;            (homestyle (or (null dir) (null (file-exists-p path))))
  ;;            (final (if homestyle "~/creamy_seas/sync_files/emacs_config/support_files/org_style.css" path)))
  ;;       (setq org-html-head-include-default-style nil)
  ;;       (setq org-html-head (concat
  ;;                            "<style type=\"text/css\">\n"
  ;;                            "<!--/*--><![CDATA[/*><!--*/\n"
  ;;                            (with-temp-buffer
  ;;                              (insert-file-contents final)
  ;;                              (buffer-string))
  ;;                            "/*]]>*/-->\n"
  ;;                            "</style>\n")))))

  ;; (eval-after-load 'ox
  ;;   '(progn
  ;;      (add-hook 'org-export-before-processing-hook 'my-org-inline-css-hook)))


 #+END_SRC
*** export to presentation
#+BEGIN_SRC emacs-lisp
  ;;(use-package ox-reveal
  ;;  :ensure t)
  ;;(use-package htmlize
  ;;  :ensure t)
  ;;(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
#+END_SRC
** table formulas
#+BEGIN_SRC emacs-lisp
  (defmath gradeBand(score)
    (if (< score 1)
        "DNS"
      (if (< score 40)
          "Working"
        (if (< score 50)
            "3rd"
          (if (< score 60)
              "2:2"
            (if (< score 70)
                "2:1"
              "1st"))))))
 #+END_SRC
** latex
#+BEGIN_SRC emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options
                                            :scale 1.7))
  (setq org-format-latex-options (plist-put org-format-latex-options
                                            :foreground "#fdab10"))
 #+END_SRC
** keybindings
#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "<C-return>") (function org-insert-heading))
  (define-key org-mode-map (kbd "C-x RET") (function org-insert-subheading))
  (define-key org-mode-map (kbd "C-c C-;") (function comment-line))
  (define-key org-mode-map (kbd "C-c C-r") (function org-toggle-inline-images))
  (define-key emacs-lisp-mode-map (kbd "C-c C-;") (function comment-line))
  (global-set-key "\C-cb" 'org-switchb)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c C-l") 'org-insert-link)
 #+END_SRC
