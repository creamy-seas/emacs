#+TITLE: Configuration for orgmode

| Ox-twbs       | =C-c C-e w=   |
| Latex preview | =C-c C-x C-l= |

Tip - if you do not want to have long file names displayed in the agenda buffer, create a =Category=
#+begin_example
#+CATEGORY: custom-name-for-agenda-file
#+end_example

Org searches through the files you set in [[*General Parameters][General Parameters]] and extracts out all deadlines. This allows a nice preview of them

Nice export template
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:1 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />

* Export
#+BEGIN_SRC emacs-lisp
(setq org-export-with-toc t
      org-confirm-babel-evaluate nil
      org-export-backends '(html latex md)
      org-html-checkbox-type 'html)
 #+END_SRC

* Capture template
#+begin_src emacs-lisp
(defun my/org/add-to-capture (template)
  (let ((key (car template)))
    (setq org-capture-templates
	  (cl-delete-if (lambda (x) (equal (car x) key)) org-capture-templates))
    (add-to-list 'org-capture-templates
                 template)))
#+end_src

* DOWN Capture from anywhere
1. =brew install coreutils=
2. Automator -> new shell script
#+BEGIN_SRC sh :tangle no
  socketfile=$(lsof -c Emacs | grep server | tr -s " " | cut -d' ' -f 8); /usr/local/bin/emacsclient -ne "(make-capture-frame)" -s $socketfile
#+END_SRC

3. This will call this function
#+BEGIN_SRC emacs-lisp :tangle no
(defadvice org-capture-finalize
    (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame"
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))

(defadvice org-capture-destroy
    (after delete-capture-frame activate)
  "Advise capture-destroy to close the frame"
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))

(defun make-capture-frame ()
  "Create a new frame and run org-capture."
  (interactive)
  (make-frame '((name . "capture")))
  (select-frame-by-name "capture")
  (delete-other-windows)
  (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
          (org-capture)))
 #+END_SRC

* DOWN Autoinsert
#+BEGIN_SRC emacs-lisp
  (define-skeleton my-skeleton/org/standard-file
    "Skeleton for a brand new org file"
    nil
                                          ; initial top line
    "#+AUTHOR: Ilya Antonov" \n
    "#+TITLE: " (skeleton-read "Title name: ") | "üê≥ - Missing Title" \n
    "#+EMAIL: ilya.antonov@dreams-ai.com" \n
    "#+EXPORT_FILE_NAME:"  (skeleton-read "Export name: ") | "index.html" \n
    "#+OPTIONS: p:t" \n
    "#+OPTIONS: date:t" \n
    "#+OPTIONS: email:t" \n
    "#+OPTIONS: author:t" \n
    "#+OPTIONS: num:nil" \n
    "#+OPTIONS: title:t" \n
    "#+OPTIONS: toc:t" \n
    "#+OPTIONS: \\n:t" \n
    "#+HTML_MATHJAX: align: center indent: 20em tagside: right font: Inconsolata"
    )
 #+END_SRC

* Rescheduling actions
#+BEGIN_SRC emacs-lisp
(setq org-log-reschedule (quote note)
      org-log-into-drawer t)
 #+END_SRC

* Org timer
Need to install on os-x terminal-notifier
#+BEGIN_SRC emacs-lisp
  (defvar terminal-notifier-command
    (executable-find "terminal-notifier")
    "The path to terminal-notifier.")

  (defun terminal-notifier-notify (title message)
    "Show a message with terminal-notifier-command"
    (start-process "terminal-notifier"
                   "terminal-notifier"
                   terminal-notifier-command
                   "-appIcon" "/Users/CCCP/creamy_seas/gallery_road/breeding_humanoids/train.jpg"
                   "-sound" "submarine"
                   "-title" title
                   "-message" message
                   "-activate" "org.gnu.Emacs"))

  (defun timed-notification (time msg)
    (interactive "sNotification when (e.g: 2 minutes, 60 seconds, 3 days): \nsMessage: ")
    (run-at-time time nil (lambda (msg) (terminal-notifier-notify "Âçç Emacs" msg)) msg))

  (setq org-show-notification-handler
        (lambda (msg) (timed-notification nil msg)))
 #+END_SRC

* Change the ellipsis to ‚Ü¥
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "‚Ü¥")
 #+END_SRC
* Babel
What languages can be evaluated in org buffers by hitting =C-c C-c=
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (shell . t)
     (emacs-lisp . t)))
 #+END_SRC

* Base64 Image Export
** =my/org/tob64-roided=: opens image and processes it into a base64 string
#+BEGIN_SRC emacs-lisp
  (defun my/org/tob64-roided (filename caption width)
    "Takes the filename (pass it an image) and writes the content upon export to hmtl"
    (format "<figure><img src=\"data:image/png;base64,%s\" width=\"%s\" class='center' border='1'>'<figcaption class='center'>%s</figcaption></figure>"
            (base64-encode-string
             (with-temp-buffer
               (insert-file-contents filename)
               (buffer-string)))
            width
            caption
            ))
 #+END_SRC
** =my/org/tob64=: opens image and processes it into a base64 string
#+BEGIN_SRC emacs-lisp
  (defun my/org/tob64 (filename width)
    "Takes the filename and creates a temporary buffer with contents
    Use it to export to base64"
    (format "<img src=\"data:image/png;base64,%s\" width=\"%s\" class='center' border='5'>'"
            (base64-encode-string
             (with-temp-buffer
               (insert-file-contents filename)
               (buffer-string))) width))
 #+END_SRC
** =my/org/image-select= return the relative location of the image
#+BEGIN_SRC emacs-lisp
  (defun my/org/image-select ()
    "Select a relative file"
    (let* ((raw-file-name (read-file-name "Image file to (((base64))): "))
           (relative-file-name (replace-regexp-in-string default-directory "" raw-file-name)))
      (concat "./" relative-file-name)))
 #+END_SRC

* Keybindings
#+begin_src emacs-lisp
(after! org
  (global-set-key (kbd "C-c a") (function org-agenda))
  (define-key org-mode-map (kbd "<C-return>") (function org-insert-heading))
  (define-key org-mode-map (kbd "C-x RET") (function org-insert-subheading))
  (define-key org-mode-map (kbd "C-c C-r") (function org-toggle-inline-images))

  (define-key org-mode-map (kbd "C-c l") 'org-store-link)
  (define-key org-mode-map (kbd "C-c C-l") 'org-insert-link)
  (define-key org-mode-map (kbd "C-c #") (function org-time-stamp-inactive)))

(unbind-key (kbd "a") 'doom-leader-map)
(global-set-key (kbd "C-c a") 'org-agenda)
#+end_src
* Org bullets

#+BEGIN_SRC emacs-lisp
(use-package! org-bullets
  :hook (org-mode . org-bullets-mode)
  :config
  (setq org-bullets-bullet-list (quote ("‚óâ" "‚óã" "‚ú∏" "‚úø" "‚úö" "‚ùÄ"))))
#+END_SRC
* Source code blocks

You can type =<el= and the =TAB= to create the desired source block
#+BEGIN_SRC emacs-lisp
(after! org
  (add-to-list 'org-modules 'org-tempo t)
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist
               '("py" . "src python"))
  (add-to-list 'org-structure-template-alist
               '("pyi" . "src_python[:session ?]{}"))
  (add-to-list 'org-structure-template-alist
               '("sh" . "src shell")))
#+END_SRC
* PACKAGE Ox-reveal
- Presentations can be hosted from github - look at video 50.
*Online*)
- You can always add to the top of the org file to use online version
#+BEGIN_SRC text :tangle no
  #+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+END_SRC

*Offline*
- Clone =https://github.com/hakimel/reveal.js/= or copy from support-files
- Ensure that org-reveal-root is set to =./reveal.js=
- *Remove* any
#+BEGIN_SRC text :tangle no
  #+REVEAL_ROOT: file:///Users/antonov/....../reveal.js
#+END_SRC
on top of the file

*Theme*
Include the following
#+BEGIN_SRC text :tangle no
#+REVEAL_THEME: night
#+END_SRC

Best themes
| *Good* | *Bad*  | *SoSo* |
| blood  | league | night  |
| serif  |        | sky    |
| black  | moon   | beige  |
|        | simple |        |

- Other options
#+BEGIN_SRC text :tangle no
#+REVEAL_INIT_OPTIONS: width:1000, height:600, margin: 0.3, minScale:0.2, maxScale:2.5, transition:'cube', transitionSpeed:0.2
#+END_SRC
- Transitions: =default|cube|page|concave|zoom|linear|fade|none=

** Setup

#+begin_src emacs-lisp
(after! ox-reveal
  (setq org-reveal-mathjax t)
  )
#+end_src
* Org drill
See https://jmm.io/pr/emacs-meetup/#/5

#+begin_src emacs-lisp
(use-package! org-drill
  :config
  (add-to-list 'org-modules 'org-drill)
  (setq org-drill-hint-separator "||")
  (setq org-drill-add-random-noise-to-intervals-p t)
  (setq org-drill-hint-separator "||")
  (setq org-drill-left-cloze-delimiter "<[")
  (setq org-drill-right-cloze-delimiter "]>")
  (setq org-drill-learn-fraction 0.25))

#+end_src
