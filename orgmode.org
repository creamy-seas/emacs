#+TITLE: Config of orgmode
#+STARTUP: overview
#+PROPERTY: header-args :tangle yes

Tip - if you do not want to have long file names displayed in the agenda buffer, create a =Category=
#+begin_example
#+CATEGORY: custom-name-for-agenda-file
#+end_example

* Agenda files
Org searches through the files you set in [[*General Parameters][General Parameters]] and extracts out all deadlines. This allows a nice preview of them
** Agenda layout prompt
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        (quote (("c" "Simple agenda view"
           ((agenda ""))))))
 #+END_SRC
** Keybinding
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") (function org-agenda))
 #+END_SRC
* Autoinsert
#+BEGIN_SRC emacs-lisp
  (define-skeleton my-skeleton/org/standard-file
    "Skeleton for a brand new org file"
    nil
                                          ; initial top line
    "#+AUTHOR: Ilya Antonov" \n
    "#+TITLE: " (skeleton-read "Title name: ") | "üê≥ - Missing Title" \n
    "#+EMAIL: ilya.antonov@dreams-ai.com" \n
    "#+EXPORT_FILE_NAME:"  (skeleton-read "Export name: ") | "index.html" \n
    "#+OPTIONS: p:t" \n
    "#+OPTIONS: date:t" \n
    "#+OPTIONS: email:t" \n
    "#+OPTIONS: author:t" \n
    "#+OPTIONS: num:nil" \n
    "#+OPTIONS: title:t" \n
    "#+OPTIONS: toc:t" \n
    "#+OPTIONS: \\n:t" \n
    "#+HTML_MATHJAX: align: center indent: 20em tagside: right font: Inconsolata"
    )

  (add-to-list 'auto-insert-alist '(
                                    (".*\\.org\\'" . "[Ó§ó org template]")
                                    . my-skeleton/org/standard-file))
 #+END_SRC
* Capture templates     =C-c c=
Go and edit [[file:orgmode-config.org::*Capturing%20templates%20=C-c%20c=][Capturing templates]] to use this roided feature
** Keybinding
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") (function org-capture))
 #+END_SRC
** Spawning capture window from anywhere (os-x example)
1. =brew install coreutils=
2. Automator -> new shell script
#+BEGIN_SRC sh :tangle no
  socketfile=$(lsof -c Emacs | grep server | tr -s " " | cut -d' ' -f 8); /usr/local/bin/emacsclient -ne "(make-capture-frame)" -s $socketfile
#+END_SRC
*** Functions
#+BEGIN_SRC emacs-lisp
  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

  (defadvice org-capture-destroy
      (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

  (use-package noflet
    :ensure t )
  (defun make-capture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
      (org-capture)))
 #+END_SRC
* Allow alphabetic enumeration
#+BEGIN_SRC emacs-lisp
  (setq org-list-allow-alphabetical t)
 #+END_SRC
* Babel
What languages can be evaluated in org buffers by hitting =C-c C-c=
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (shell . t)
     (emacs-lisp . t)))
 #+END_SRC
* PACKAGE Bullets
Nice bullets instead of multiplication symbols
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :init (my/add-to-package-list 'org-bullets)
    :hook (org-mode . org-bullets-mode))

  '(org-bullets-bullet-list (quote ("‚óâ" "‚óã" "‚ú∏" "‚úø" "‚úö" "‚ùÄ")))
#+END_SRC
* Change the ellipsis to ‚Ü¥
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "‚Ü¥")
 #+END_SRC
* Editing source code
** Do it in a new window (default is side by side)
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** Shortcuts
Old: You can type =<el= and the =TAB= to create the desired source block
New: =C-c C-,= and select the completion
#+BEGIN_SRC emacs-lisp
  (require 'org-tempo)
  (setq org-structure-template-alist
        '(("el" . "src emacs-lisp")
          ("py" . "src python")
          ("sh" . "src shell")
          ("cl" . "src common-lisp")
          ("r" . "src rust")
          ("t" . "src text")))
#+END_SRC

* Export
#+BEGIN_SRC emacs-lisp
  (setq org-export-with-toc t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-backends '(html latex md groff))
 #+END_SRC
** Conflunence
#+BEGIN_SRC emacs-lisp
  ;;(require 'ox-confluence)
 #+END_SRC
** PACKAGE Html
** Init
#+BEGIN_SRC emacs-lisp
(setq org-html-checkbox-type 'html)
 #+END_SRC
** PACKAGE HTMLIZE
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t
    :init (my/add-to-package-list 'htmlize))
 #+END_SRC
** PACKAGE Ox-twbs      =C-c C-e w=
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t
    :init (my/add-to-package-list 'ox-twbs))
#+END_SRC
** Nice template
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:1 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />
** Presentations
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure t
    :config (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/"))

#+END_SRC
* Image preview
In order to get a preview, add =#+ATTR_ORG: :width 100=

#+BEGIN_SRC emacs-lisp
  (setq org-image-actual-width nil)
 #+END_SRC
* Indentation
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
* Major Function: Base64 Image Export
** =my/org/tob64-roided=: opens image and processes it into a base64 string
#+BEGIN_SRC emacs-lisp
  (defun my/org/tob64-roided (filename caption width)
    "Takes the filename (pass it an image) and writes the content upon export to hmtl"
    (format "<figure><img src=\"data:image/png;base64,%s\" width=\"%s\" class='center' border='1'>'<figcaption class='center'>%s</figcaption></figure>"
            (base64-encode-string
             (with-temp-buffer
               (insert-file-contents filename)
               (buffer-string)))
            width
            caption
            ))
 #+END_SRC
** =my/org/tob64=: opens image and processes it into a base64 string
#+BEGIN_SRC emacs-lisp
  (defun my/org/tob64 (filename width)
    "Takes the filename and creates a temporary buffer with contents
    Use it to export to base64"
    (format "<img src=\"data:image/png;base64,%s\" width=\"%s\" class='center' border='5'>'"
            (base64-encode-string
             (with-temp-buffer
               (insert-file-contents filename)
               (buffer-string))) width))
 #+END_SRC
** =my/org/image-select= return the relative location of the image
#+BEGIN_SRC emacs-lisp
  (defun my/org/image-select ()
    "Select a relative file"
    (let* ((raw-file-name (read-file-name "Image file to (((base64))): "))
           (relative-file-name (replace-regexp-in-string default-directory "" raw-file-name)))
      (concat "./" relative-file-name)))
 #+END_SRC
* Latex preview =C-c C-x C-l=
#+BEGIN_SRC emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options
                                            :scale 1.7))
  ;; (setq org-format-latex-options (plist-put org-format-latex-options
  ;;                                           :foreground "#fdab10"))
 #+END_SRC
* Rescheduling actions
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   ;; '(org-log-reschedule (quote note))
   '(org-log-reschedule nil)
   '(org-log-into-drawer t))
 #+END_SRC
* Org timer
Need to install on os-x terminal-notifier
#+BEGIN_SRC emacs-lisp
  (defvar terminal-notifier-command
    (executable-find "terminal-notifier")
    "The path to terminal-notifier.")

  (defun terminal-notifier-notify (title message)
    "Show a message with terminal-notifier-command"
    (start-process "terminal-notifier"
                   "terminal-notifier"
                   terminal-notifier-command
                   "-appIcon" "/Users/CCCP/creamy_seas/gallery_road/breeding_humanoids/2020-11-02 11.34.02.jpg"
                   "-sound" "submarine"
                   "-title" title
                   "-message" message
                   "-activate" "org.gnu.Emacs"))

  (defun timed-notification (time msg)
    (interactive "sNotification when (e.g: 2 minutes, 60 seconds, 3 days): \nsMessage: ")
    (run-at-time time nil (lambda (msg) (terminal-notifier-notify "Âçç Emacs" msg)) msg))

  (setq org-show-notification-handler
        (lambda (msg) (timed-notification nil msg)))
 #+END_SRC
* PACKAGE Org drill
See https://jmm.io/pr/emacs-meetup/#/5

#+begin_src emacs-lisp
(use-package org-drill
  :config
  (add-to-list 'org-modules 'org-drill)
  (setq org-drill-hint-separator "||")
  (setq org-drill-add-random-noise-to-intervals-p t)
  (setq org-drill-hint-separator "||")
  (setq org-drill-left-cloze-delimiter "<[")
  (setq org-drill-right-cloze-delimiter "]>")
  (setq org-drill-learn-fraction 0.25))

#+end_src
* Keybindings
#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "<C-return>") (function org-insert-heading))
  (define-key org-mode-map (kbd "C-x RET") (function org-insert-subheading))
  (define-key org-mode-map (kbd "C-c C-;") (function comment-line))
  (define-key org-mode-map (kbd "C-c C-r") (function org-toggle-inline-images))

  (define-key emacs-lisp-mode-map (kbd "C-c C-;") (function comment-line))

  (define-key org-mode-map "\C-cb" 'org-switchb)
  (define-key org-mode-map (kbd "C-c l") 'org-store-link)
  (define-key org-mode-map (kbd "C-c C-l") 'org-insert-link)
  (define-key org-mode-map (kbd "C-c #") (function org-time-stamp-inactive))
  (define-key org-mode-map (kbd "<C-down>") (function org-priority-down))
  (define-key org-mode-map (kbd "<C-up>") (function org-priority-up))
 #+END_SRC
* Capture template
#+BEGIN_SRC emacs-lisp
  (defun my/org/add-to-capture (template)
    (let ((key (car template)))
      (setq org-capture-templates
            (cl-delete-if (lambda (x) (equal (car x) key)) org-capture-templates))
      (add-to-list 'org-capture-templates
                   template)))
 #+END_SRC
* Common lisp
#+begin_src emacs-lisp
  (setq inferior-lisp-program "/usr/local/bin/sbcl")
  (setq slime-lisp-implementations '((sbcl ("sbcl"))))
  (require 'slime)
  (setq slime-net-coding-system 'utf-8-unix)
  (slime-setup '(slime-fancy))
  (setq slime-enable-evaluate-in-emacs t)
#+end_src
