<p>Its a long weekend, so I wrote a <a href="http://bford.info/pub/lang/packrat-icfp02.pdf">packrat parser</a>! (AKA Parsing Expression Grammar, or PEG.)</p>

<p>I implemented the example grammar from the original paper. Here its parsing the string <code>2*(3+4)</code>:</p>

<p><img src="https://josephg.com/blog/content/images/2016/03/Screen-Shot-2016-03-26-at-10-08-53-AM.png" alt=""></p>

<p>Holy cow thats a lot of steps for a 7 character string. No wonder modern compilers take ages to run!</p>

<p>Packrat parsers are neat because unlike other parsers you can combine your tokeniser and lexer into a single grammar. There's no need to define token rules separately from your semantic rules.</p>

<p>So for example, the definition of an array literal can simply be:</p>

<pre><code>ArrayLiteral = "[" ListOf&lt;AssignmentExpressionOrElision, ","&gt; "]"  
</code></pre>

<p>(<a href="https://github.com/cdglabs/ohm/blob/master/examples/ecmascript/es5.ohm">From this ES5 grammar</a>)</p>

<p>If you want to learn more, here's an online version of Ohm (a clean, full featured JS packrat parser) that you can mess around with: <a href="http://www.cdglabs.org/ohm/visualizer/">http://www.cdglabs.org/ohm/visualizer/</a>.</p>

<p>Here's a big pile of academic papers: <a href="http://bford.info/packrat/">http://bford.info/packrat/</a></p>

<p>Finally the simple code I wrote is <a href="https://github.com/josephg/miniohm/blob/f530cf54d50404d6723fe2efd42df5b01fd697ce/peg.js">here</a>. My full PEG implementation including the grammar fits in less than 200 lines of code.</p>