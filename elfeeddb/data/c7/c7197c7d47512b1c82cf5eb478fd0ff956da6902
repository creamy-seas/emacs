<p>On Friday I accepted a <a href="https://news.ycombinator.com/item?id=14111143">challenge</a> to clone Reddit's <a href="http://reddit.com/r/place">/r/place</a> in a weekend. And I did it, and <a href="https://josephg.com/sp/">its live</a>, and its amazing:</p>

<p><img src="http://josephg.com/blog/content/images/2017/04/final.png" alt=""></p>

<p>Being able to build this in a weekend isn't genius. Its possible because programming is made up of 2 activities:</p>

<ul>
<li>Making decisions (95%)</li>
<li>Typing (5%)</li>
</ul>

<p>Reddit wrote up a wonderful blog post about <a href="https://redditblog.com/2017/04/13/how-we-built-rplace/">how they made the original</a>, so lots of the decisions were already made for me. How much load I need to handle, how big to make it, the palette and some of the UI I'm using directly. I didn't copy reddit's architecture though, simply because I don't agree with some of their technical decisions. But the places in which I disagree are all based on decades of my own programming experience, so I still don't have a lot of decisions left to make.</p>

<p>To be clear, if I was building this for reddit a weekend wouldn't be enough time. <a href="https://github.com/josephg/sephsplace">The code</a> is a mess. There's no monitoring and logging. No CI, no tests. There's no access control and no mobile support. I also haven't load tested it as thoroughly as reddit would need to. A weekend is not enough time to make it production ready for a site like reddit.</p>

<p>But thats ok - it sure works! And some quick benchmarking shows it should scale past reddit's 100k users mark.</p>

<p><img src="http://josephg.com/blog/content/images/2017/04/gow.png" alt=""></p>

<h1 id="howitworks">How it works</h1>

<p>I had a think about how I wanted data to flow through the app before I even accepted the challenge. It was important to know so I could figure out if I could actually build it in time.</p>

<p>My favorite architecture for this sort of thing is to use event sourcing and make data flow one way though the site. If you've ever used Redux with react you'll appreciate how simple this makes everything - every part of the system just has 2 responsibilities:</p>

<ul>
<li>Where do I get data from?</li>
<li>Where do I send the data?</li>
</ul>

<p>So, for sephsplace edits start in the browser, hit a server, go to kafka, get read from kafka by a server then get sent to users. </p>

<p><img src="http://josephg.com/blog/content/images/2017/04/arch1.png" alt="architecture for edits"></p>

<p>Which is simple enough. The edits themselves are globally ordered by kafka, so if two edits to the same location happen at the same time, everyone will see the same final result based on the order they come <em>back out</em> of kafka. You could make a fancier event log which load balanced edits across multiple kafka partitions, but reddit's spec says it only needs to handle 333 edits per second. A single kafka partition should be able to manage 10-100x that much load.</p>

<p>To ensure consistency I attach a version number to each edit coming out of the kafka event stream. So, the first edit was edit 0, then edit 1 and so on. At the time of writing we're up to edit 333721. (Check <code>window._version</code> on the site if you're curious.)</p>

<h2 id="subscribefromversion">Subscribe from version</h2>

<p>The genius of this system is that if you have an image that is out of date, so long as you know the version we can catch you up by just sending some edits.</p>

<p>For example, if you get disconnected while at version 1000, when you reconnect you just have to download all the operations from version 1000 to 'now'.</p>

<p><img src="http://josephg.com/blog/content/images/2017/04/operations.png" alt=""></p>

<h2 id="snapshots">Snapshots</h2>

<p>The client needs to load the page quickly without downloading the entire history of operations. To do that I made a <a href="https://josephg.com/sp/current">REST endpoint</a> which simply returns a PNG of the current page. To make this work the server just stores a copy of the page in a 1000x1000 array in memory. The array gets updated when any edits come through kafka.</p>

<p>But rendering that image out to PNG is slow. I hooked up <a href="https://www.npmjs.com/package/pngjs">pngjs</a> to render out the image, and it takes about 300ms of time per render. A single CPU can only render the page 3 times per second. This is way too slow to keep up.</p>

<p>Its probably possible to optimize that. Reddit apparently spent a lot of time bit packing their image in redis, but that sounds like a waste of time to me. I just configured nginx to fetch the image at most once every 10 seconds. All the time in between that nginx will just return a stale image.</p>

<p>But the client can catch up! The cached image has the version number embedded in a header, so when the client connects to the realtime feed it can immediately get a copy of the edits which have happened since the image was generated.</p>

<p>To make server restarts fast, every 1000 edits or so I store a copy on disk of the current snapshot &amp; what version its at. When the server starts up it works just like the client - it grabs that snapshot from disk, updates it with any recent operations from kafka and its good to go.</p>

<p><img src="http://josephg.com/blog/content/images/2017/04/arch2.png" alt=""></p>

<p>The data flow ends up looking something like this, although the server keeps a recent snapshot in memory <em>and</em> on disk. But again, data only flows one way so each part is easy to reason about in isolation.</p>

<h2 id="writingtheserver">Writing the server</h2>

<p>At about 2pm on Friday I knew what I was building and I started to work.</p>

<p>I'd never actually used <a href="https://kafka.apache.org/">kafka</a> before, and I have a rule with projects like this that any new technology has to be put in first just in case there are unknown unknowns that affect the design. But Kafka was dreamy to work with, so by 4pm I had the kafka events working and the server was rendering images out:</p>

<p><blockquote class="twitter-video" data-lang="en"><p lang="en" dir="ltr">Got simple streaming edits working via kafka. Streaming update API next. <a href="https://twitter.com/hashtag/placethrowdown?src=hash">#placethrowdown</a> <a href="https://t.co/EuEXdZIVYI">pic.twitter.com/EuEXdZIVYI</a></p>&mdash; Seph (@josephgentle) <a href="https://twitter.com/josephgentle/status/852774081015435266">April 14, 2017</a></blockquote> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>In the video each edit sets the top left 100 pixels of the image to a random color. I'm triggering the edits via cURL (no browser code yet). The edits are published to kafka. The server gets sent the events <em>from</em> kafka then updates the image. When I refresh the page (actually its just an image URL), the server returns an updated PNG with the new content.</p>

<p>By 6pm I had an endpoint allowing the client to subscribe to a live stream of edits:</p>

<p><blockquote class="twitter-video" data-lang="en"><p lang="en" dir="ltr">SSE working for live updates, with resume &amp; replay. Not sure how to load balance SSE. Client image updating next <a href="https://twitter.com/hashtag/placethrowdown?src=hash">#placethrowdown</a> <a href="https://t.co/lu0e7WHdEb">pic.twitter.com/lu0e7WHdEb</a></p>&mdash; Seph (@josephgentle) <a href="https://twitter.com/josephgentle/status/852790675271589888">April 14, 2017</a></blockquote> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>(I used <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events">server-sent events</a> instead of websockets at first because they're simpler and more elegant than websockets and they work over HTTP2. But SSE doesn't support binary data, and <a href="http://caniuse.com/#feat=eventsource">you need a polyfill for IE</a> so I moved away from them later. More about that later.)</p>

<p>Anyway, with all that done the server was basically complete. I added a few caching headers for the snapshots, put it behind nginx with a strict caching policy and moved to the client.</p>

<h2 id="makingapixeleditorinabrowser">Making a pixel editor in a browser</h2>

<p>Luckily for me, I've already written a few browser games with scrollable and pannable pixel-like editors. So for the editor I blatantly stole a bunch of code from <a href="https://steam.dance/josephg/elevator">steam dance</a>.</p>

<p>The client works using 2 canvases:</p>

<ul>
<li>One invisible canvas for the image itself. This canvas is basically just an image with the whole drawing space in it. This is really simple and efficient because the image has a known, fixed size (1000px x 1000px) so it can fit comfortably in GPU memory.</li>
<li>The second canvas is the drawable area you see on the page itself. This canvas is in the DOM, and it gets resized when you resize your browser.</li>
</ul>

<p>Most of the time reddit uses CSS to render their r/place page, and then falls back to using canvases in some browsers. But I don't like needing multiple renderers if I can avoid it.</p>

<p>My draw function was just this:</p>

<p><img src="http://josephg.com/blog/content/images/2017/04/draw.png" alt=""></p>

<p>If you haven't seen it before, that wrapper for <code>requestAnimationFrame</code> improves the code in two ways:</p>

<ul>
<li>If the tab is in the background, it won't draw at all</li>
<li>It lets me call <code>draw()</code> with impunity in my code any time I need something redrawn. The page will only be redrawn once no matter how many calls to draw I make before rendering.</li>
</ul>

<p>For a game with animations you usually just render at 60fps regardless, but I want sephsplace to be able to sit in the background without <a href="https://josephg.com/blog/electron-is-flash-for-the-desktop/">using CPU unnecessarily while idle</a>.</p>

<p>For panning and zooming I <a href="https://github.com/josephg/sephsplace/blob/291c232b7d9b33666c5cd32ee8a9f72f52af2314/public/index.js#L48-L183">stole ~150 lines of code from past projects</a>.</p>

<p>Once that was done I added the palette swatches and some UI. By 9:30pm I had a working client:</p>

<p><blockquote class="twitter-video" data-lang="en"><p lang="en" dir="ltr">That asymmetric border radius tho :D. Added pan tool and color selection swatches. Next caching then I want to put it online <a href="https://twitter.com/hashtag/placethrowdown?src=hash">#placethrowdown</a> <a href="https://t.co/1fpEbVRkoa">pic.twitter.com/1fpEbVRkoa</a></p>&mdash; Seph (@josephgentle) <a href="https://twitter.com/josephgentle/status/852850616120483840">April 14, 2017</a></blockquote> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>Then I spent hours fighting with java, zookeeper, systemd scripts for kafka, nginx and pm2.</p>

<p><strong>At 2am, 12 hours after starting, I put the site live.</strong></p>

<p>I didn't manage to sleep until 4am though.</p>

<p><img src="http://josephg.com/blog/content/images/2017/04/mandalla.png" alt=""></p>

<h2 id="day2optimizationandpolish">Day 2 - Optimization and polish</h2>

<p>A good rule of thumb is that if you want to spend any time polishing you'll need twice as much time. So I was very pleased that I had a whole day for tweaks and optimizations.</p>

<p>For this project I was aiming to be able to support reddit's numbers - 100k concurrent users and 333 edits per second. Making numbers go up is really fun, so I always like to measure before optimizing so I can really see the performance metrics shoot up.</p>

<p><blockquote class="twitter-video" data-lang="en"><p lang="en" dir="ltr">Initial testing at 400 edits/second. Its 10x slower than I want but pretty. The real problem will be adding 100k readers tho <a href="https://twitter.com/hashtag/placethrowdown?src=hash">#placethrowdown</a> <a href="https://t.co/nQDUDBVJ73">pic.twitter.com/nQDUDBVJ73</a></p>&mdash; Seph (@josephgentle) <a href="https://twitter.com/josephgentle/status/853092182579855362">April 15, 2017</a></blockquote> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>The initial benchmarks were pretty depressing. In the video I have a script running which is sending 400 edits / second into kafka. Every part of this system is slower than I want it to be:</p>

<ul>
<li>Chrome is using an entire core of CPU just rendering the animation</li>
<li>My server is using about 34% of a core simply receiving operations from kafka and sending them out again</li>
<li>Even kafka is embarrassingly slow here - using 20% CPU to process those 400 ops/second. I expect better from you kafka!</li>
</ul>

<p>400/second is a really small number for modern computers. The reason we're using so much CPU here is bookkeeping:</p>

<ul>
<li>Kafka processes each edit individually</li>
<li>Kafka sends 1 network packet per edit (I think)</li>
<li>My server decodes each edit individually using msgpack, into a separate javascript object</li>
<li>My server then re-encodes each edit to a JSON string to send to the browser</li>
<li>The client processes each edit individually. For each edit it needs to talk to the GPU to upload that one lonely pixel.</li>
</ul>

<p>Whew - I'm tired just thinking about it. This is a staggering amount of work for the computer.</p>

<p>To fix this I made 3 changes:</p>

<p>First, we don't need to do this work per-edit! Its much better to batch up all edits into ~10th of a second blocks and process them together. That way we only need to pay for bookkeeping 10 times a second no matter how many messages we have.</p>

<p>Secondly I moved everything to binary messages.</p>

<p>The binary encoding for this is beautiful - each edit fits perfectly into 3 bytes. Look at the math - An edit is a (x, y, color) triple. The x and y coordinates are integers from 0-999 - which is almost perfectly represented as a 10 bit integer (10 bits = 1024 different values). And 16 colors fit exactly in 4 bits.</p>

<p>So we have <code>x</code> (10 bits) <code>+ y</code> (10 bits) <code>+ color</code> (4 bits) <code>= 24 bits = 3 bytes</code>. Perfect.</p>

<p><img src="http://josephg.com/blog/content/images/2017/04/bits.png" alt=""></p>

<p>Now I can batch hundreds of edits efficiently in a byte array! This is great because byte arrays are blazing fast. They're much faster because they're easy to optimize for in both hardware and software, they're GC-efficient (compared to JS lists) and they're cheap to access from C code (like, say, the nodejs networking stack).</p>

<p>Also writing bitwise code always makes me feel like I'm in hackers 💕💕</p>

<p><img src="http://josephg.com/blog/content/images/2017/04/hackers.jpg" alt=""></p>

<p>The third change was a move from server-sent events to websockets. I needed to do this because SSE doesn't support binary messages. To send the edits over SSE I'd need to encode them into base64 strings, which would be slow and increase the size of the messages. Websockets support sending binary messages directly, so its easier to just use that.</p>

<hr>

<p>With that done the same 400 edits per second it looked like this:</p>

<p><blockquote class="twitter-video" data-lang="en"><p lang="en" dir="ltr">Same 400 edits/second, but now coalesced every 200ms in batches on write. Less pretty, but the CPU difference is staggering. <a href="https://twitter.com/hashtag/placethrowdown?src=hash">#placethrowdown</a> <a href="https://t.co/Ncrti7wj92">pic.twitter.com/Ncrti7wj92</a></p>&mdash; Seph (@josephgentle) <a href="https://twitter.com/josephgentle/status/853122138961625088">April 15, 2017</a></blockquote> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>Notice:</p>

<ul>
<li>Chrome is down to 10% CPU (from 100%)</li>
<li>The <code>node</code> process (the server) is using 2.5% CPU (down from 35%)</li>
<li>Kafka isn't listed, because it was only using about 1% of my CPU to handle the 5 larger messages every second.</li>
</ul>

<p>I threw in some more minor optimizations after this video as well - adding more batching, tweaking <code>ws</code> parameters and stuff like that. I love optimizing code - it feels so cleansing.</p>

<p><img src="http://josephg.com/blog/content/images/2017/04/lady.png" alt=""></p>

<h3 id="arewefastenoughyet">Are we fast enough yet?</h3>

<p>Where are the actual performance bottlenecks here? What needs to be fast?</p>

<p>It turns out the big scaling challenge here is actually getting data from kafka to the clients.</p>

<p>Why? Well, because even in the naive version of my code I could handle the required 333 writes per second easily. Thats a tiny number. But remember we need to support 100k active clients. So if the server gets 333 edits per second, it needs to send 33.3 million edits per second.</p>

<p>On paper, 333 writes * 3 bytes = 1k of data. Sending 1k of data per second to 100k clients is 100MB/s of traffic. Which is large but manageable. A well optimized C program should be able to send 100MB of network traffic per second no sweat.</p>

<p>What I really want is something like nginx, but designed for event logs. It should be written in C (node won't be fast enough). The closest I found was <a href="https://github.com/wandenberg/nginx-push-stream-module">nginx-push-stream</a> - which looks perfect. Its designed for exactly this use case. But I don't like it because it doesn't guarantee message order or delivery. Remember, we need a consistent message order so everyone sees the same result when two people edit the same pixel at the same time.</p>

<p>Effectively, nginx-push-stream is UDP and I want TCP. It'd definitely be good enough for this project, but I don't want to have to write the code to replay and reorder messages. And to use it I'd need a worker process which simply tails the kafka log and forwards it into nginx. And we'd need need special catchup-on-reconnect logic, because the stream it sends out wouldn't support subscribing from a specified version number.</p>

<p>Another approach would be to send the events out using long polling. That sounds wild, but if we make a URL for each block of edits, the clients could just request the next block of edits directly from nginx. Nginx can be configured to hold all 100k requests from clients and just send 1 request to the backend for the data. The server then holds the request until the data is available (ie, 1 second has passed). If we get nginx to cache the edits, it'll support catchup just fine.</p>

<p>Its just... sad doing it that way. Long polling is so... 2005. And its a pretty weird way to use of nginx.</p>

<p>In this case I'm lucky to say I didn't need to do any of that. It turns out my binary message handling + <a href="http://josephg.com/blog/rplace-in-a-weekend/npmjs.com/package/ws">ws</a> is fast enough anyway:</p>

<p><img src="http://josephg.com/blog/content/images/2017/04/perfvictory-1.jpg" alt=""></p>

<p>My laptop manages 10k clients using only about 34% of one CPU core. So 100k clients should take about 4 modern CPU cores. This is several times faster than I expected it would be. I'm grateful for the performance optimizations that have gone into the ws websocket library, nodejs and v8 over the last few years. Horizontal scaling like this will put extra load on kafka, but kafka can handle a few more orders of magnitude of load before we need to worry about it.</p>

<p>(The node processes you see in the screenshot are the websocket testing library <a href="https://www.npmjs.com/package/thor">thor</a>. I had to modify it a little to work for me though.)</p>

<p><img src="http://josephg.com/blog/content/images/2017/04/batman.png" alt=""></p>

<p>So that was that. At 5:30pm on day 2 I declared the challenge complete.</p>

<p>If I was feeling virtuous or better rested I would have rented a few AWS machines and set up a full cluster. But the thought of spending hours setting up zookeeper again was enough to convince me to declare victory and play some computer games instead.</p>

<p>It'll be fine. We can fix it live if we need to, right?</p>

<p><img src="http://josephg.com/blog/content/images/2017/04/17861712_10155313973183083_8810187488691317415_n.jpg" alt=""></p>

<h1 id="finalthoughts">Final thoughts</h1>

<p>That was a wild ride. I haven't gotten much sleep, and I spent altogether too much time deleting nazi symbols and penises. And <a href="https://twitter.com/josephgentle/status/853312152223965184">fighting botnets used to draw giant pictures of Angela Merkel</a>.</p>

<p>I think if I make something like this again I'd like to live stream the whole thing. One of the most enjoyable parts of the process was going online and seeing what people have drawn. This sort of project is a real community thing, and I'd like to involve the community more in the future.</p>

<p>As for the site - I don't know what to do with it. I'll leave it up, but I'm worried people will start drawing child porn or something if I don't keep an eye on it.</p>

<p>While working on this I feel like the most interesting design question is the policy on rate limiting:</p>

<ul>
<li>Bots are cool, but way more powerful than humans</li>
<li>If you limit edits to once per 5 minutes, will I have enough community to keep it going?</li>
</ul>

<p>Maybe I could make a version where every user has an energy bar. Then different areas of the space are either more or less volatile - so you can draw on the volatile sections for free, but its easy for others to draw over the top. If you want your art to stay for a long time you can draw in the slow regions - it'll just take ages to draw in the first place. Or maybe the space should start small with just one small tile, and the community can slowly add tiles. Each tile can only be edited for 24 hours then it gets locked down forever, forming a slowly growing mosaic. I'm sure there's lots of cool variants.</p>

<p>Thankyou reddit for making r/place and inspiring me. And thanks to everyone who's drawn awesome stuff on the page, and <a href="https://twitter.com/josephgentle">followed along on twitter</a>. Its been fun!</p>

<p>Ugh, I feel weak.. did I forget to eat again? ... Oops.</p>

<p><img src="http://josephg.com/blog/content/images/2017/04/pushpin.png" alt=""></p>